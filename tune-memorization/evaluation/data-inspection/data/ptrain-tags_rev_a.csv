index,eval_sample,Cat,Interesting
0,"2);
  assertThat(events).extracting(""principal"")
  .containsExactlyInAnyOrder(""test-user"", ""other-test-user"");
  }
 
  @Test
  public void findByPrincipalAndType() {
  persistenceAuditEventRepository.save(testUserEvent);
  persistenceAuditEventRepository.save(testOldUserEvent);
 
  testOtherUserEvent.setAuditEventType(testUserEvent.getAuditEventType());
  persistenceAuditEventRepository.save(testOtherUserEvent);
 
  PersistentAuditEvent testUserOtherTypeEvent = new PersistentAuditEvent();
  testUserOtherTypeEvent.setPrincipal(testUserEvent.getPrincipal());
  testUserOtherTypeEvent.setAuditEventType(""test-other-type"");",T,
1,"Package = 4;
  public static final int FontFamily_fontProviderQuery = 5;
  public static final int[] FontFamilyFont = { 0x1010532, 0x1010533, 0x101053f, 0x101056f, 0x1010570, 0x7f0300d7, 0x7f0300df, 0x7f0300e0, 0x7f0300e1, 0x7f030208 };
  public static final int",DI,
2,"ivative Works; within the Source form or
  * documentation, if provided along with the Derivative Works; or,
  * within a display generated by the Derivative Works, if and
  * wherever such third-party notices normally appear. The contents
  * of the NOTICE file are for informational purposes only and
  * do not modify the License. You may add Your own attribution
  * notices within Derivative Works that You distribute, alongside
  * or as an addendum to the NOTICE text from the Work, provided
  * that such additional attribution notices cannot be construed
  * as modifying the License.
  *
  * You may add Your own",L,
3,"JsonIgnore
  public void setSystemInformation(RECORD_TYPE recordType) {
  if (systemInfo == null) {
  systemInfo = new SystemInfo();
  }
  if (recordType == RECORD_TYPE.DELETE) {
  this.systemInfo.setActiveStatus(0);
  } else {
  this.systemInfo.setActiveStatus(1);
  }
  }
 
  @JsonIgnore
  public void setSystemInformation(Integer activeStatus) {
  this.systemInfo.setActiveStatus(activeStatus);
  }
 
  @JsonIgnore
  public String getSystemInformation() {
  String systemInfo = """";
  if (this.systemInfo!= null) {
  systemInfo = systemInfo.toString();
  }
  return systemInfo",C,
4,"USE_HOST_PTR MEM_USE_HOST_PTR} are not set in flags.</li>
  * <li>{@link CL10#CL_MEM_OBJECT_ALLOCATION_FAILURE MEM_OBJECT_ALLOCATION_FAILURE} if there is a failure to allocate memory for buffer object.</li>
  * <li>{@link CL10#CL_OUT_OF_RESOURCES OUT_OF_RESOURCES} if there is a failure to allocate resources required by the OpenCL implementation on the device.</li>
  * <li>{@link CL10#CL_OUT_OF_HOST_MEMORY OUT_OF_HOST_MEMORY} if there is a failure to allocate resources required by the OpenCL",DO,
5,"()).isNull();
  }
 
  @Test
  public void testJWTFilterMissingToken() throws Exception {
  MockHttpServletRequest request = new MockHttpServletRequest();
  request.addHeader(JWTFilter.AUTHORIZATION_HEADER, ""Bearer "");
  request.setRequestURI(""/api/test"");
  MockHttpServletResponse response = new MockHttpServletResponse();
  MockFilterChain filterChain = new MockFilterChain();
  jwtFilter.doFilter(request, response, filterChain);
  assertThat(response.getStatus()).isEqualTo(HttpStatus.OK.value());
  assertThat(SecurityContextHolder.getContext().getAuthentication()).isNull();
  }
 
  @Test
  public void testJWTFilterWrongScheme() throws Exception {
  UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(
  ""test-",T,
6,"FAILURE} if there is a failure to allocate memory for buffer object.</li>
  * <li>{@link CL10#CL_OUT_OF_RESOURCES OUT_OF_RESOURCES} if there is a failure to allocate resources required by the OpenCL implementation on the device.</li>
  * <li>{@link CL10#CL_OUT_OF_HOST_MEMORY OUT_OF_HOST_MEMORY} if there is a failure to allocate resources required by the OpenCL implementation on the host.</li>
  * </ul>
  */
  @NativeType(""cl_mem"")
  public static long clCreateBufferWithPropertiesINTEL(@NativeType(""cl_context"") long context, @Nullable @Native",DO,
7,"0x7f010009;
  public static final int abc_tooltip_enter = 0x7f01000a;
  public static final int abc_tooltip_exit = 0x7f01000b;
  public static final int btn_checkbox_to_checked_box_inner_merged_animation = 0x7f01000c;
  public static final int btn_checkbox_to_checked_box_outer_merged_animation = 0x7f01000d;
  public static final int btn_checkbox_to_checked_icon_null_animation = 0x7f010",DI,
8,"InHeadNoscript {
  boolean process(Token t, HtmlTreeBuilder tb) {
  if (t.isDoctype()) {
  tb.error(this);
  } else if (t.isStartTag() && t.asStartTag().name().equals(""html"")) {
  return tb.process(t, InBody);
  } else if (t.isEndTag() && t.asEndTag().name().equals(""noscript"")) {
  tb.pop();
  tb.transition(InHead);
  } else if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().name(),
  """,C,
9,"></tr>
  * </table>
  */
  public static final int actionBarSize=0x7f030003;
  /**
  * Reference to a style for the split Action Bar. This style
  * controls the split component that holds the menu/action
  * buttons. actionBarStyle is still used for the primary
  * bar.
  * <p>May be a reference to another resource, in the form
  * ""<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>"" or a theme
  * attribute in the form
  * ""<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>"".",DO,
10,"that
  appears within action menu items. 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionMenuTextAppearance=0x7f010011;
  /** Color for text that appears within action menu items. 
  <p>May be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code",DO,
11,"LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS
 LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESSFOR A PARTICULAR PURPOSE
 ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
 TORT (INCLUDING NEGLIGENCE OR",L,
12,"isStartTag() && StringUtil.in(t.asStartTag().name(), ""head"", ""noscript"")) || t.isEndTag()) {
  tb.error(this);
  return false;
  } else {
  return anythingElse(t, tb);
  }
  return true;
  }
 
  private boolean anythingElse(Token t, HtmlTreeBuilder tb) {
  tb.error(this);
  tb.process(new Token.EndTag(""noscript""));
  return tb.process(t);
  }
  },
  AfterHead {
  boolean process(Token t, HtmlTreeBuilder tb) {
  if (isWhitespace(t)) {
  tb.insert(t.asCharacter());
  } else",C,
13,"_check_path_merged_animation = 0x7f010010;
  public static final int btn_checkbox_to_unchecked_icon_null_animation = 0x7f010011;
  public static final int btn_radio_to_off_mtrl_dot_group_animation = 0x7f010012;
  public static final int btn_radio_to_off_mtrl_ring_outer_animation = 0x7f010013;
  public static final int btn_radio_to_off_mtrl_ring_outer_path_animation = 0x7f0",DI,
14,";
  public static final int ConstraintLayout_Layout_layout_constraintHorizontal_chainStyle = 31;
  public static final int ConstraintLayout_Layout_layout_constraintHorizontal_weight = 32;
  public static final int ConstraintLayout_Layout_layout_constraintLeft_creator = 33;
  public static final int ConstraintLayout_Layout_layout_constraintLeft_toLeftOf = 34;
  public static final int ConstraintLayout_Layout_layout_constraintLeft_toRightOf = 35;
  public static final int ConstraintLayout_Layout_layout_constraintRight_creator = 36;
  public static final int ConstraintLayout_Layout_layout_constraintRight_toLeftOf",DI,
15,"i></code>"".
  */
  public static final int actionBarStyle=0x7f01000b;
  /** <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionBarTabBarStyle=0x7f010008;
  /** Default style for tabs within an action bar 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i",DO,
16,"advance();
  t.emit(replacementChar);
  break;
  default:
  String data = r.consumeToAny('-', '<', nullChar);
  t.emit(data);
  }
  }
  },
  ScriptDataEscapedDash {
  void read(Tokeniser t, CharacterReader r) {
  if (r.isEmpty()) {
  t.eofError(this);
  t.transition(Data);
  return;
  }
 
  char c = r.consume();
  switch (c) {
  case '-':
  t.emit(c);
  t.transition(ScriptDataEscapedDashDash);
  break;
  case '<':
  t.transition(ScriptDataEscapedLessthanSign);",C,
17,"(byte) 'Z',
  (byte) 'a', (byte) 'b', (byte) 'c', (byte) 'd', (byte) 'e',
  (byte) 'f', (byte) 'g', (byte) 'h', (byte) 'i', (byte) 'j',
  (byte) 'k', (byte) 'l', (byte)'m', (byte) 'n', (byte) 'o',
  (byte) 'p', (byte) 'q', (byte) 'r', (byte)'s', (byte) 't',
  (byte) 'u', (byte) 'v', (byte) 'w', (",DI,
18,#ERROR!,DI,
19,"átima Sampaio Leite
  * Micaela Maria Coelho de Araújo
  * Nelson Mendonça de Carvalho
  * Newton Morais e Silva
  * Pedro Alexandre Santos da Silva Filho
  * Rafael Corrêa Lima e Silva
  * Rafael Francisco Pinto
  * Rafael Koury Monteiro
  * Rafael Palermo de Araújo
  * Raphael Veras Rossiter
  * Roberto Sobreira Barbalho
  * Rodrigo Avellar Silveira
  * Rosana Carvalho Barbosa
  * Sávio",DO,
20,"remain
  * under the copyright of the copyright holder(s) and/or original author(s)per
  * the Attribution and Assignment Agreement that can be located at
  * http://www.open-xchange.com/EN/developer/. The contributing author shall be
  * given Attribution for the derivative code and a license granting use.
  *
  * Copyright (C) 2016-2020 OX Software GmbH
  * Mail: info@open-xchange.com
  *
  *
  * This program is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License, Version",L,
21,"LIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
  * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
  * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY THIRD PARTY ALL PROPER LICENSES
  * CONTAINED IN MEDIATEK SOFTWARE. MEDIATEK SHALL ALSO NOT BE RESPONSIBLE FOR ANY MEDIATEK
  * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
  * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EX",L,
22,"another resource, in the form
  * ""<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>"" or a theme
  * attribute in the form
  * ""<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>"".
  */
  public static final int actionMenuTextAppearance=0x7f03000e;
  /**
  * Color for text that appears within action menu items.
  * <p>May be a reference to another resource, in the form
  * ""<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>"" or a theme
  * attribute in the",DO,
23,"* when these raw version cannot be used as part of an ASCII
  * string literal.
  */
  static String add_escapes(String str) {
  StringBuffer retval = new StringBuffer();
  char ch;
  for (int i = 0; i < str.length(); i++) {
  switch (str.charAt(i))
  {
  case 0 :
  continue;
  case '\b':
  retval.append(""\\b"");
  continue;
  case '\t':
  retval.append(""\\t"");
  continue;
  case '\n':
  retval.append(""\\n"");
  continue;
  case '\f':
  retval.append(""\\f"");
  continue;
  case '\r':
  retval.append",C,
24,#ERROR!,DI,
25,"Trade offs:
  * <ol>
  * <li>Memory foot print. I'm using more memory than necessary to
  * represent numbers to get better performance.</li>
  * <li>Digits are bigger, so rounding is a greater loss. So, if you
  * really need 12 decimal digits, better use 4 base 10000 digits
  * there can be one partially filled.</li>
  * </ol></p>
  *
  * <p>Numbers are represented in the following form:
  * <pre>
  * n = sign &times; mant &times; (radix)<sup>",DO,
26,"EndTag(t, r, Rawtext);
  }
  },
  ScriptDataLessthanSign {
  void read(Tokeniser t, CharacterReader r) {
  switch (r.consume()) {
  case '/':
  t.createTempBuffer();
  t.transition(ScriptDataEndTagOpen);
  break;
  case '!':
  t.emit(""<!"");
  t.transition(ScriptDataEscapeStart);
  break;
  default:
  t.emit(""<"");
  r.unconsume();
  t.transition(ScriptData);
  }
  }
  },
  ScriptDataEndTagOpen {
  void read(Tokeniser t, CharacterReader r) {
  readEndTag(t, r,",C,
27,"the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionBarSplitStyle=0x7f01000c;
  /** Reference to a style for the Action Bar 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type",DO,
28,"?
  Element remainingA = tb.getFromStack(""a"");
  if (remainingA!= null) {
  tb.removeFromActiveFormattingElements(remainingA);
  tb.removeFromStack(remainingA);
  }
  }
  tb.reconstructFormattingElements();
  Element a = tb.insert(startTag);
  tb.pushActiveFormattingElements(a);
  } else if (StringUtil.in(name,
  ""b"", ""big"", ""code"", ""em"", ""font"", ""i"", ""s"", ""small"", ""strike"", ""strong"", ""tt"", ""u"")) {
  tb.reconstructFormattingElements();
  Element el = tb.insert(startTag);
  tb.push",C,
29,"(""p"")) {
  tb.process(new Token.EndTag(""p""));
  }
  tb.insert(startTag);
  } else if (StringUtil.in(name, ""h1"", ""h2"", ""h3"", ""h4"", ""h5"", ""h6"")) {
  if (tb.inButtonScope(""p"")) {
  tb.process(new Token.EndTag(""p""));
  }
  if (StringUtil.in(tb.currentElement().nodeName(), ""h1"", ""h2"", ""h3"", ""h4"", ""h5"", ""h6"")) {
  tb.error(this);
  tb.pop();
  }
  tb.insert(startTag",C,
30,"new StringBuffer();
  int maxSize = 0;
  for (int i = 0; i < expectedTokenSequences.length; i++) {
  if (maxSize < expectedTokenSequences[i].length) {
  maxSize = expectedTokenSequences[i].length;
  }
  for (int j = 0; j < expectedTokenSequences[i].length; j++) {
  expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');
  }
  if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1]!= 0) {
  expected.append(""..."");
  }
  expected.append(eol).append("" "");
  }
  String retval",C,
31,"SemanticListeners();
 }
 }
 
 /**
 * @generated
 */
 protected void removeSemanticListeners() {
 if (parserElements!= null) {
 for (int i = 0; i < parserElements.size(); i++) {
 removeListenerFilter(""SemanticModel"" + i); //$NON-NLS-1$
 }
 } else {
 super.removeSemanticListeners();
 }
 }
 
 /**
 * @generated
 */
 protected AccessibleEditPart getAccessibleEditPart() {
 if (accessibleEP == null) {
 accessibleEP = new AccessibleGraphicalEditPart() {
 
 public void getName(",C,
32,"_width = 0x7f050060;
  public static final int notification_main_column_padding_top = 0x7f050061;
  public static final int notification_media_narrow_margin = 0x7f050062;
  public static final int notification_right_icon_size = 0x7f050063;
  public static final int notification_right_side_padding_top = 0x7f050064;
  public static final int notification_small_icon_background_padding = 0x7f050065;
  public static final",DI,
33,"- Exposure Analytics
  * - Margin Analytics
  * - XVA Analytics
  * 
  * DROP Computational Core implements libraries for the following:
  * - Algorithm Support
  * - Computation Support
  * - Function Analysis
  * - Model Validation
  * - Numerical Analysis
  * - Numerical Optimizer
  * - Spline Builder
  * - Statistical Learning
  * 
  * Documentation for DROP is Spread Over:
  * 
  * - Main => https://lakshmidrip.github.io/DROP/
  * - Wiki => https://github.com/l",DO,
34,"020034;
  public static final int backgroundTintMode = 0x7f020035;
  public static final int barLength = 0x7f020036;
  public static final int borderlessButtonStyle = 0x7f020039;
  public static final int buttonBarButtonStyle = 0x7f02003a;
  public static final int buttonBarNegativeButtonStyle = 0x7f02003b;
  public static final int buttonBarNeutralButtonStyle = 0x7f02003c;
  public static final int buttonBarPositiveButtonStyle = 0x7f0",DI,
35,"* Bruno Leonardo Rodrigues Barros
  * Carlos Elmano Rodrigues Ferreira
  * Cláudio de Andrade Lira
  * Denys Guimarães Guenes Tavares
  * Eduardo Breckenfeld da Rosa Borges
  * Fabíola Gomes de Araújo
  * Flávio Leonardo Cavalcanti Cordeiro
  * Francisco do Nascimento Júnior
  * Homero Sampaio Cavalcanti
  * Ivan Sérgio da Silva Júnior
  * José Edmar de Siqueira
  * José Thi",DO,
36,"apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }
 
  public void _jspDestroy() {
  }
 
  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
  throws java.io.IOException, javax.servlet.ServletException {
 
  final javax.servlet.jsp.PageContext pageContext;
  javax.servlet.http.HttpSession session = null;
  final javax.servlet.ServletContext application;
  final javax.servlet.ServletConfig config;
  javax.servlet.jsp.JspWriter out = null;
  final java.lang.Object page = this;
  javax.servlet.jsp.JspWriter _",C,
37,"i>package</i>:]<i>type</i>/<i>name</i></code>"".
  */
  public static final int actionBarWidgetTheme=0x7f03000a;
  /**
  * Default action button style.
  * <p>May be a reference to another resource, in the form
  * ""<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>"" or a theme
  * attribute in the form
  * ""<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>"".
  */
  public static final int actionButtonStyle=0x7f03000b;
  /**",DO,
38,"* attribute in the form
  * ""<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>"".
  */
  public static final int actionBarPopupTheme=0x7f030002;
  /**
  * Size of the Action Bar, including the contextual
  * bar used to present Action Modes.
  * <p>May be a dimension value, which is a floating point number appended with a
  * unit such as ""<code>14.5sp</code>"".
  * Available units are: px (pixels), dp (density-independent pixels),
  * sp (scaled pixels based on preferred font size), in (inches), and
  * mm",DO,
39,"854-1987 notes below)</li>
  * </ol></p>
  *
  * <p>Trade offs:
  * <ol>
  * <li>Memory foot print. I'm using more memory than necessary to
  * represent numbers to get better performance.</li>
  * <li>Digits are bigger, so rounding is a greater loss. So, if you
  * really need 12 decimal digits, better use 4 base 10000 digits
  * there can be one partially filled.</li>
  * </ol></p>
  *
  * <p>Numbers are represented in the following",DO,
40,#ERROR!,DI,
41,"public static final int notification_right_side_padding_top = 0x7f0600c9;
  public static final int notification_small_icon_background_padding = 0x7f0600ca;
  public static final int notification_small_icon_size_as_large = 0x7f0600cb;
  public static final int notification_subtext_size = 0x7f0600cc;
  public static final int notification_top_pad = 0x7f0600cd;
  public static final int notification_top_pad_large_text = 0x7f0600ce",DI,
42,"View.VISIBLE : View.GONE);
  }
  });
  } else {
  // The ViewPropertyAnimator APIs are not available, so simply show
  // and hide the relevant UI components.
  mProgressView.setVisibility(show? View.VISIBLE : View.GONE);
  mLoginFormView.setVisibility(show? View.GONE : View.VISIBLE);
  }
  }
 
  @Override
  public Loader<Cursor> onCreateLoader(int i, Bundle bundle) {
  return new CursorLoader(this,
  // Retrieve data rows for the device user's 'profile' contact.
  Uri.withAppendedPath(ContactsContract.Profile.CONTENT_URI,
  ContactsContract.Contacts.Data.CONTENT_DIRECTORY),",C,
43,"4 decimal digits at once instead of one at a time. Radix 10 behavior
  * can be realized by adding an additional rounding step to ensure that
  * the number of decimal digits represented is constant.</p>
  *
  * <p>The IEEE standard specifically leaves out internal data encoding,
  * so it is reasonable to conclude that such a subclass of this radix
  * 10000 system is merely an encoding of a radix 10 system.</p>
  *
  * <p>IEEE 854 also specifies the existence of ""sub-normal"" numbers. This
  * class does not contain any such entities. The most significant radix",DO,
44,"activated) {
  this.activated = activated;
  }
 
  public String getLangKey() {
  return langKey;
  }
 
  public void setLangKey(String langKey) {
  this.langKey = langKey;
  }
 
  public String getCreatedBy() {
  return createdBy;
  }
 
  public void setCreatedBy(String createdBy) {
  this.createdBy = createdBy;
  }
 
  public Instant getCreatedDate() {
  return createdDate;
  }
 
  public void setCreatedDate(Instant createdDate) {
  this.createdDate = createdDate;
  }
 
  public String getLastModifiedBy() {
  return lastModifiedBy;
  }
 
  public void setLastModifiedBy(String lastModified",C,
45,"<p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionBarTabStyle=0x7f010007;
  /** <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i",DO,
46,";
  public static final int ConstraintLayout_Layout_constraint_referenced_ids = 9;
  public static final int ConstraintLayout_Layout_layout_constrainedHeight = 10;
  public static final int ConstraintLayout_Layout_layout_constrainedWidth = 11;
  public static final int ConstraintLayout_Layout_layout_constraintBaseline_creator = 12;
  public static final int ConstraintLayout_Layout_layout_constraintBaseline_toBaselineOf = 13;
  public static final int ConstraintLayout_Layout_layout_constraintBottom_creator = 14;
  public static final int ConstraintLayout_Layout_layout_constraintBottom_toBottomOf = 15;
  public static final",DI,
47,"<p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionModeSplitBackground=0x7f01003d;
  /** <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i",DO,
48,"[]{READ_CONTACTS}, REQUEST_READ_CONTACTS);
  }
  return false;
  }
 
  /**
  * Callback received when a permissions request has been completed.
  */
  @Override
  public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,
  @NonNull int[] grantResults) {
  if (requestCode == REQUEST_READ_CONTACTS) {
  if (grantResults.length == 1 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
  populateAutoComplete();
  }
  }
  }
 
 
  /**
  * Attempts to sign in or register the account specified by the login form.
  * If there are form errors (invalid email, missing fields",C,
49,".charAt(p) >= '1' && fpdecimal.charAt(p) <= '9') {
  break;
  }
 
  if (decimalFound && fpdecimal.charAt(p) == '0') {
  decimalPos--;
  }
 
  if (fpdecimal.charAt(p) == '.') {
  decimalFound = true;
  }
 
  p++;
 
  if (p == fpdecimal.length()) {
  break;
  }
  }
 
  // Copy the string onto Stripped
  int q = offset;
  striped[0] = '0';
  striped[1] = '0';
  striped[2] = '0';
  striped[3] = '0';
  int significant",C,
50,#ERROR!,C,
51,"prefix = generatePrefix(namespace);
  javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
  while (true) {
  java.lang.String uri = nsContext.getNamespaceURI(prefix);
  if (uri == null || uri.length() == 0) {
  break;
  }
  prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
  }
  xmlWriter.writeNamespace(prefix, namespace);
  xmlWriter.setPrefix(prefix, namespace);
  }
  return prefix;
  }
 
 
  
  /**
  * databinding method to get an XML representation of this object
  *
  */
  public javax.xml",C,
52,"value());
  assertThat(SecurityContextHolder.getContext().getAuthentication().getName()).isEqualTo(""test-user"");
  assertThat(SecurityContextHolder.getContext().getAuthentication().getCredentials().toString()).isEqualTo(jwt);
  }
 
  @Test
  public void testJWTFilterInvalidToken() throws Exception {
  String jwt = ""wrong_jwt"";
  MockHttpServletRequest request = new MockHttpServletRequest();
  request.addHeader(JWTFilter.AUTHORIZATION_HEADER, ""Bearer "" + jwt);
  request.setRequestURI(""/api/test"");
  MockHttpServletResponse response = new MockHttpServletResponse();
  MockFilterChain filterChain = new MockFilterChain();
  jwtFilter.doFilter(request, response, filterChain);
  assertThat(response.getStatus()).isEqualTo(HttpStatus.OK",T,
53,"{
 Intent iLaunchMyself = getPackageManager().getLaunchIntentForPackage(getPackageName());
 startActivity(iLaunchMyself);
 }
 
 /**
 * 处理微信向第三方应用发起的消息
 * <p>
 * 此处用来接收从微信发送过来的消息，比方说本demo在wechatpage里面分享
 * 应用时可以不分享应用文件，而分享一段应用的自定义信息。接受方的微信
 * 客户端会通过这个方法，将这个信息发送回接收方手机上的本demo中，当作
 * 回调。
 * <p>
 * 本Demo只是将信息展示出来，但你可做点",DO,
54,"7f02002a;
  public static final int autoCompleteTextViewStyle = 0x7f02002b;
  public static final int autoSizeMaxTextSize = 0x7f02002c;
  public static final int autoSizeMinTextSize = 0x7f02002d;
  public static final int autoSizePresetSizes = 0x7f02002e;
  public static final int autoSizeStepGranularity = 0x7f02002f;
  public static final int autoSizeTextType = 0x7f020030;
  public static final int background",DI,
55,"ability. Code should be kept as portable as possible.</li>
  * <li>Performance</li>
  * <li>Accuracy - Results should always be +/- 1 ULP for basic
  * algebraic operation</li>
  * <li>Comply with IEEE 854-1987 as much as possible.
  * (See IEEE 854-1987 notes below)</li>
  * </ol></p>
  *
  * <p>Trade offs:
  * <ol>
  * <li>Memory foot print. I'm using more memory than necessary to
  * represent numbers to get",DO,
56,"UnsupportedToken();
 
  boolean isTokenValid = tokenProvider.validateToken(unsupportedToken);
 
  assertThat(isTokenValid).isEqualTo(false);
  }
 
  @Test
  public void testReturnFalseWhenJWTisInvalid() {
  boolean isTokenValid = tokenProvider.validateToken("""");
 
  assertThat(isTokenValid).isEqualTo(false);
  }
 
  private Authentication createAuthentication() {
  Collection<GrantedAuthority> authorities = new ArrayList<>();
  authorities.add(new SimpleGrantedAuthority(AuthoritiesConstants.ANONYMOUS));
  return new UsernamePasswordAuthenticationToken(""anonymous"", ""anonymous"", authorities);
  }
 
  private String createUnsupportedToken() {
  return Jwts.builder()
  .setPayload(""payload",T,
57,"public void _jspInit() {
  }
 
  public void _jspDestroy() {
  }
 
  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
  throws java.io.IOException, javax.servlet.ServletException {
 
  if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
  final java.lang.String _jspx_method = request.getMethod();
  if (""OPTIONS"".equals(_jspx_method)) {
  response.setHeader(""Allow"",""GET, HEAD, POST, OPTIONS"");
  return;
  }
  if (!""GET"".equals(_jspx_method) &&!""POST"".equals(_jspx",C,
58,"();
  }
 
  @Test
  public void testJWTFilterMissingToken() throws Exception {
  MockHttpServletRequest request = new MockHttpServletRequest();
  request.addHeader(JWTFilter.AUTHORIZATION_HEADER, ""Bearer "");
  request.setRequestURI(""/api/test"");
  MockHttpServletResponse response = new MockHttpServletResponse();
  MockFilterChain filterChain = new MockFilterChain();
  jwtFilter.doFilter(request, response, filterChain);
  assertThat(response.getStatus()).isEqualTo(HttpStatus.OK.value());
  assertThat(SecurityContextHolder.getContext().getAuthentication()).isNull();
  }
 
  @Test
  public void testJWTFilterWrongScheme() throws Exception {
  UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(
  ""test-user"",",T,
59,"action button in Contextual Action Bar 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionModeCopyDrawable=0x7f010040;
  /** Drawable to use for the Cut action button in Contextual Action Bar 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</",DO,
60,"Strategy
  *  Incorporator, Holdings Constraint, and Transaction Costs.
  * 
  * - DRIP Numerical Optimizer: Library for Numerical Optimization and Spline Functionality.
  * 
  * - DRIP Statistical Learning: Library for Statistical Evaluation and Machine Learning.
  * 
  * Licensed under the Apache License, Version 2.0 (the ""License"");
  *  you may not use this file except in compliance with the License.
  * 
  * You may obtain a copy of the License at
  *  http://www.apache.org/licenses/LICENSE-2.0
  * 
  * Unless required by applicable law or agreed to in writing,",L,
61,"_OBJECT_ALLOCATION_FAILURE MEM_OBJECT_ALLOCATION_FAILURE} if there is a failure to allocate memory for buffer object.</li>
  * <li>{@link CL10#CL_OUT_OF_RESOURCES OUT_OF_RESOURCES} if there is a failure to allocate resources required by the OpenCL implementation on the device.</li>
  * <li>{@link CL10#CL_OUT_OF_HOST_MEMORY OUT_OF_HOST_MEMORY} if there is a failure to allocate resources required by the OpenCL implementation on the host.</li>
  * </ul>
  */
  @NativeType(""cl_mem"")
  public static long clCreateBufferWithPropertiesINTEL(@",DO,
62,"or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionModePopupWindowStyle=0x7f010046;
  /** Drawable to use for the Select all action button in Contextual Action Bar 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int action",DO,
63,"to other media types.
  *
  * ""Work"" shall mean the work of authorship, whether in Source or
  * Object form, made available under the License, as indicated by a
  * copyright notice that is included in or attached to the work
  * (an example is provided in the Appendix below).
  *
  * ""Derivative Works"" shall mean any work, whether in Source or Object
  * form, that is based on (or derived from) the Work and for which the
  * editorial revisions, annotations, elaborations, or other modifications
  * represent, as a whole, an original work of authorship. For the purposes
  * of this License,",L,
64,"} else if (t.isEndTag()) {
  if (StringUtil.in(t.asEndTag().name(), ""body"", ""html"")) {
  anythingElse(t, tb);
  } else {
  tb.error(this);
  return false;
  }
  } else {
  anythingElse(t, tb);
  }
  return true;
  }
 
  private boolean anythingElse(Token t, HtmlTreeBuilder tb) {
  tb.process(new Token.StartTag(""body""));
  tb.framesetOk(true);
  return tb.process(t);
  }
  },
  InBody {
  boolean process(Token t, HtmlTreeBuilder tb) {
  switch (t.type",C,
65,"Collection) {
  //Create adapter to tell the AutoCompleteTextView what to show in its dropdown list.
  ArrayAdapter<String> adapter =
  new ArrayAdapter<>(LoginActivity.this,
  android.R.layout.simple_dropdown_item_1line, emailAddressCollection);
 
  mEmailView.setAdapter(adapter);
  }
 
 
  private interface ProfileQuery {
  String[] PROJECTION = {
  ContactsContract.CommonDataKinds.Email.ADDRESS,
  ContactsContract.CommonDataKinds.Email.IS_PRIMARY,
  };
 
  int ADDRESS = 0;
  int IS_PRIMARY = 1;
  }
 
  /**
  * Represents an asynchronous login/registration task used to authenticate
  * the user.",C,
66,"Fragment extends PreferenceFragment {
  @Override
  public void onCreate(Bundle savedInstanceState) {
  super.onCreate(savedInstanceState);
  addPreferencesFromResource(R.xml.pref_general);
  setHasOptionsMenu(true);
 
  // Bind the summaries of EditText/List/Dialog/Ringtone preferences
  // to their values. When their values change, their summaries are
  // updated to reflect the new value, per the Android Design
  // guidelines.
  bindPreferenceSummaryToValue(findPreference(""example_text""));
  bindPreferenceSummaryToValue(findPreference(""example_list""));
  }
 
  @Override
  public boolean onOptionsItemSelected(MenuItem item) {
  int id = item.getItemId();
  if (",C,
67,"Notes and differences</p>
  *
  * <p>IEEE 854 requires the radix to be either 2 or 10. The radix here is
  * 10000, so that requirement is not met, but it is possible that a
  * subclassed can be made to make it behave as a radix 10
  * number. It is my opinion that if it looks and behaves as a radix
  * 10 number then it is one and that requirement would be met.</p>
  *
  * <p>The radix of 10000 was chosen because it should be faster to operate
  * on 4 decimal",DO,
68,"0L) == 0) {
  exponent--;
  mantissa <<= 1;
  }
  mantissa &= 0x000fffffffffffffL;
  }
 
  if (exponent == 1024) {
  // infinity or NAN
  if (x!= x) {
  sign = (byte) 1;
  nans = QNAN;
  } else if (x < 0) {
  sign = (byte) -1;
  nans = INFINITE;
  } else {
  sign = (byte) 1;
  nans = INFINITE;
  }
  return;
  }
 
  Dfp xdfp = new Dfp(field, m",C,
69,"65 USA
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 
 /*
  * COPYRIGHT AND PERMISSION NOTICE
  *
  * Copyright (C) 1991-2016 Unicode, Inc. All rights reserved.
  * Distributed under the Terms of Use in 
  * http://www.unicode.org/copyright.html.
  *
  * Permission is hereby granted, free of charge, to any person obtaining
  * a copy of the Unicode data files and any associated documentation
  * (the ""Data Files"") or Unicode software and any associated documentation
  * (the ""Software"") to deal in the Data Files or Software
  * without restriction,",L,
70,"httpInterceptor(networkFlipperPlugin));
  }
  });
  client.addPlugin(networkFlipperPlugin);
  client.start();
 
  // Fresco Plugin needs to ensure that ImagePipelineFactory is initialized
  // Hence we run if after all native modules have been initialized
  ReactContext reactContext = reactInstanceManager.getCurrentReactContext();
  if (reactContext == null) {
  reactInstanceManager.addReactInstanceEventListener(
  new ReactInstanceManager.ReactInstanceEventListener() {
  @Override
  public void onReactContextInitialized(ReactContext reactContext) {
  reactInstanceManager.removeReactInstanceEventListener(this);
  reactContext.runOnNativeModulesQueueThread(
  new Runnable() {
  @Override
  public void",C,
71,"id is not null"");
  return (Criteria) this;
  }
 
  public Criteria andIdEqualTo(Long value) {
  addCriterion(""id ="", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdNotEqualTo(Long value) {
  addCriterion(""id <>"", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdGreaterThan(Long value) {
  addCriterion(""id >"", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdGreaterThanOrEqualTo(Long value) {
  addCriterion(""id >="", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdLessThan(Long value)",C,
72,"""expectedTokenSequences"" to generate a parse
  * error message and returns it. If this object has been created
  * due to a parse error, and you do not catch it (it gets thrown
  * from the parser) the correct error message
  * gets displayed.
  */
  private static String initialise(Token currentToken,
  int[][] expectedTokenSequences,
  String[] tokenImage) {
  String eol = System.getProperty(""line.separator"", ""\n"");
  StringBuffer expected = new StringBuffer();
  int maxSize = 0;
  for (int i = 0; i < expectedTokenSequences.length; i++) {
  if (maxSize < expectedTokenSequences[i].length) {
  maxSize =",C,
73,");
 
  PersistentAuditEvent testUserOtherTypeEvent = new PersistentAuditEvent();
  testUserOtherTypeEvent.setPrincipal(testUserEvent.getPrincipal());
  testUserOtherTypeEvent.setAuditEventType(""test-other-type"");
  testUserOtherTypeEvent.setAuditEventDate(testUserEvent.getAuditEventDate());
  persistenceAuditEventRepository.save(testUserOtherTypeEvent);
 
  List<AuditEvent> events = customAuditEventRepository.find(""test-user"",
  Date.from(testUserEvent.getAuditEventDate().minusSeconds(3600)), ""test-type"");
  assertThat(events).hasSize(1);
  AuditEvent event = events.get(",C,
74,"public static final int GradientColor_android_startColor = 0;
  public static final int GradientColor_android_endColor = 1;
  public static final int GradientColor_android_type = 2;
  public static final int GradientColor_android_centerX = 3;
  public static final int GradientColor_android_centerY = 4;
  public static final int GradientColor_android_gradientRadius = 5;
  public static final int GradientColor_android_tileMode = 6;
  public static final int GradientColor_android_centerColor = 7;
  public static final int GradientColor_android_startX = 8;
  public static final int GradientColor_",DI,
75,"}
  }
  },
  RawtextEndTagOpen {
  void read(Tokeniser t, CharacterReader r) {
  readEndTag(t, r, RawtextEndTagName, Rawtext);
  }
  },
  RawtextEndTagName {
  void read(Tokeniser t, CharacterReader r) {
  handleDataEndTag(t, r, Rawtext);
  }
  },
  ScriptDataLessthanSign {
  void read(Tokeniser t, CharacterReader r) {
  switch (r.consume()) {
  case '/':
  t.createTempBuffer();
  t.transition(ScriptDataEndTagOpen);
  break;
  case '!':
  t.emit(""<!"");
  t.",C,
76,"}
 
  @Test
  @Transactional
  public void assertThatUserCanBeFoundByLogin() {
  UserDetails userDetails = domainUserDetailsService.loadUserByUsername(USER_ONE_LOGIN);
  assertThat(userDetails).isNotNull();
  assertThat(userDetails.getUsername()).isEqualTo(USER_ONE_LOGIN);
  }
 
  @Test
  @Transactional
  public void assertThatUserCanBeFoundByLoginIgnoreCase() {
  UserDetails userDetails = domainUserDetailsService.loadUserByUsername(USER_ONE_LOGIN.toUpperCase(Locale.ENGLISH));
  assertThat(userDetails).isNotNull();
  assertThat(userDetails.getUsername()).isEqualTo(USER_ONE_LOGIN);
  }
 
  @Test
  @Transactional
  public void",T,
77,";
  public static final int arrowShaftLength = 0x7f02002a;
  public static final int autoCompleteTextViewStyle = 0x7f02002b;
  public static final int autoSizeMaxTextSize = 0x7f02002c;
  public static final int autoSizeMinTextSize = 0x7f02002d;
  public static final int autoSizePresetSizes = 0x7f02002e;
  public static final int autoSizeStepGranularity = 0x7f02002f;
  public static final int autoSizeTextType = 0x7",DI,
78,"}
  }
  return _jsp_instancemanager;
  }
 
  public void _jspInit() {
  }
 
  public void _jspDestroy() {
  }
 
  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
  throws java.io.IOException, javax.servlet.ServletException {
 
  if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
  final java.lang.String _jspx_method = request.getMethod();
  if (""OPTIONS"".equals(_jspx_method)) {
  response.setHeader(""Allow"",""GET, HEAD, POST, OPTIONS"");
  return;
  }
  if (!""GET"".",C,
79,"instanceof RingtonePreference) {
  // For ringtone preferences, look up the correct display value
  // using RingtoneManager.
  if (TextUtils.isEmpty(stringValue)) {
  // Empty values correspond to'silent' (no ringtone).
  preference.setSummary(R.string.pref_ringtone_silent);
 
  } else {
  Ringtone ringtone = RingtoneManager.getRingtone(
  preference.getContext(), Uri.parse(stringValue));
 
  if (ringtone == null) {
  // Clear the summary if there was a lookup error.
  preference.setSummary(null);
  } else {
  // Set the summary to reflect the new ringtone display
  // name.
  String name = ring",C,
80,"Type);
  }
 
  @Override
  public void setEntityAudit(int customerId, String userId) {
  if (entityAudit == null) {
  entityAudit = new EntityAudit();
  }
  if (getPrimaryKey() == null) {
  this.entityAudit.setCreatedBy(userId);
  this.systemInfo.setActiveStatus(1);
  } else {
  this.entityAudit.setUpdatedBy(userId);
  }
  }
 
  @JsonIgnore
  public String getLoggedInUserInfo() {
  String auditInfo = """";
  if (this.entityAudit!= null) {
  auditInfo = entityAudit.toString();
  }
  return auditInfo;
  }
 
  @Override
  @JsonIgnore
  public void setSystemInformation",C,
81,"if (shouldShowRequestPermissionRationale(READ_CONTACTS)) {
  Snackbar.make(mEmailView, R.string.permission_rationale, Snackbar.LENGTH_INDEFINITE)
  .setAction(android.R.string.ok, new View.OnClickListener() {
  @Override
  @TargetApi(Build.VERSION_CODES.M)
  public void onClick(View v) {
  requestPermissions(new String[]{READ_CONTACTS}, REQUEST_READ_CONTACTS);
  }
  });
  } else {
  requestPermissions(new String[]{READ_CONTACTS}, REQUEST_READ_CONTACTS);
  }
  return false;
  }
 
  /**
  * Callback received when a permissions request",C,
82,"null;
  java.lang.String namespace = null;
  
 
  prefix = parentQName.getPrefix();
  namespace = parentQName.getNamespaceURI();
 
  if ((namespace!= null) && (namespace.trim().length() > 0)) {
  java.lang.String writerPrefix = xmlWriter.getPrefix(namespace);
  if (writerPrefix!= null) {
  xmlWriter.writeStartElement(namespace, parentQName.getLocalPart());
  } else {
  if (prefix == null) {
  prefix = generatePrefix(namespace);
  }
 
  xmlWriter.writeStartElement(prefix, parentQName.getLocalPart(), namespace);
  xmlWriter.writeNamespace(prefix, namespace);
  xmlWriter.set",C,
83,"2];
 
  // Check some special cases
  if (s.equals(POS_INFINITY_STRING)) {
  sign = (byte) 1;
  nans = INFINITE;
  return;
  }
 
  if (s.equals(NEG_INFINITY_STRING)) {
  sign = (byte) -1;
  nans = INFINITE;
  return;
  }
 
  if (s.equals(NAN_STRING)) {
  sign = (byte) 1;
  nans = QNAN;
  return;
  }
 
  // Check for scientific notation
  int p = s.indexOf(""e"");
  if (p == -1) { // try upper case?
  p = s.indexOf(""",C,
84,"A; sem mesmo a garantia implícita de
 * COMERCIALIZAÇÃO ou de ADEQUAÇÃO A QUALQUER PROPÓSITO EM
 * PARTICULAR. Consulte a Licença Pública Geral GNU para obter mais
 * detalhes.
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU
 * junto com este programa; se não, escreva para Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA
 * 02111-1307, USA.",L,
85,"i></code>"".
  */
  public static final int actionModeCloseButtonStyle=0x7f030011;
  /**
  * Drawable to use for the close action mode button
  * <p>May be a reference to another resource, in the form
  * ""<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>"" or a theme
  * attribute in the form
  * ""<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>"".
  */
  public static final int actionModeCloseDrawable=0x7f030012;
  /**
  * Drawable to use for the Copy action button",DO,
86,"* - Capital Estimation Analytics
  * - Exposure Analytics
  * - Margin Analytics
  * - XVA Analytics
  * 
  * DROP Computational Core implements libraries for the following:
  * - Algorithm Support
  * - Computation Support
  * - Function Analysis
  * - Graph Algorithm
  * - Model Validation
  * - Numerical Analysis
  * - Numerical Optimizer
  * - Spline Builder
  * - Statistical Learning
  * 
  * Documentation for DROP is Spread Over:
  * 
  * - Main => https://lakshmidrip.github.io/",DO,
87,"Free Software
  * Foundation, Inc., 59 Temple Place – Suite 330, Boston, MA 02111-1307, USA
  */
 
 /*
  * GSAN – Sistema Integrado de Gestão de Serviços de Saneamento
  * Copyright (C) <2007> 
  * Adriano Britto Siqueira
  * Alexandre Santos Cabral
  * Ana Carolina Alves Breda
  * Ana Maria Andrade Cavalcante
  * Aryed Lins de Araújo
  * Bruno Leonardo Rodrigues Barros
  * Carlos Elmano Rodrig",L,
88,"可
 * 做点其他的事情，包括根本不打开任何页面
 */
 public void onGetMessageFromWXReq(WXMediaMessage msg) {
 Intent iLaunchMyself = getPackageManager().getLaunchIntentForPackage(getPackageName());
 startActivity(iLaunchMyself);
 }
 
 /**
 * 处理微信向第三方应用发起的消息
 * <p>
 * 此处用来接收从微信发送过来的消息，比方说本demo在wechatpage里面分享
 * 应用时可以不分享应用文件，而分享一段应用的自定义信息。接受方的微信
 * 客户端会通过这个方法，将这个信息发送",DO,
89,"DATA FILES AND SOFTWARE ARE PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY
  * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF
  * THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR HOLDERS
  * INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL INDIRECT OR
  * CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
  * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
  * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE
  * OF THE DATA FILES OR SOFTWARE.
  *
  * Except as",L,
90,"50064;
  public static final int notification_media_narrow_margin = 0x7f050065;
  public static final int notification_right_icon_size = 0x7f050066;
  public static final int notification_right_side_padding_top = 0x7f050067;
  public static final int notification_small_icon_background_padding = 0x7f050068;
  public static final int notification_small_icon_size_as_large = 0x7f050069;
  public static final int notification_subtext_size",DI,
91,"1;
  }
  mantissa &= 0x000fffffffffffffL;
  }
 
  if (exponent == 1024) {
  // infinity or NAN
  if (x!= x) {
  sign = (byte) 1;
  nans = QNAN;
  } else if (x < 0) {
  sign = (byte) -1;
  nans = INFINITE;
  } else {
  sign = (byte) 1;
  nans = INFINITE;
  }
  return;
  }
 
  Dfp xdfp = new Dfp(field, mantissa);
  xdfp = xdfp.divide(new Dfp",C,
92,"_COPY_HOST_PTR MEM_COPY_HOST_PTR} are set in flags or if {@code host_ptr} is not {@code NULL} but
  * {@link CL10#CL_MEM_COPY_HOST_PTR MEM_COPY_HOST_PTR} or {@link CL10#CL_MEM_USE_HOST_PTR MEM_USE_HOST_PTR} are not set in flags.</li>
  * <li>{@link CL10#CL_MEM_OBJECT_ALLOCATION_FAILURE MEM_OBJECT_ALLOCATION_FAILURE} if there is a failure to allocate memory for buffer object.</li>
  * <li>{@link CL10#CL_OUT_",DO,
93,"exp = 0;
  nans = FINITE;
  this.field = field;
 
  long bits = Double.doubleToLongBits(x);
  long mantissa = bits & 0x000fffffffffffffL;
  int exponent = (int) ((bits & 0x7ff0000000000000L) >> 52) - 1023;
 
  if (exponent == -1023) {
  // Zero or sub-normal
  if (x == 0) {
  // make sure 0 has the right sign
  if ((bits & 0x80000000000",C,
94,"@Override
  public void onAnimationEnd(Animator animation) {
  mLoginFormView.setVisibility(show? View.GONE : View.VISIBLE);
  }
  });
 
  mProgressView.setVisibility(show? View.VISIBLE : View.GONE);
  mProgressView.animate().setDuration(shortAnimTime).alpha(
  show? 1 : 0).setListener(new AnimatorListenerAdapter() {
  @Override
  public void onAnimationEnd(Animator animation) {
  mProgressView.setVisibility(show? View.VISIBLE : View.GONE);
  }
  });
  } else {
  // The ViewPropertyAnimator APIs are not available, so simply show
  // and hide the relevant UI components.",C,
95,"the JWT of the current user.
  *
  * @return the JWT of the current user
  */
  public static Optional<String> getCurrentUserJWT() {
  SecurityContext securityContext = SecurityContextHolder.getContext();
  return Optional.ofNullable(securityContext.getAuthentication())
  .filter(authentication -> authentication.getCredentials() instanceof String)
  .map(authentication -> (String) authentication.getCredentials());
  }
 
  /**
  * Check if a user is authenticated.
  *
  * @return true if the user is authenticated, false otherwise
  */
  public static boolean isAuthenticated() {
  SecurityContext securityContext = SecurityContextHolder.getContext();
  return Optional.ofNullable(securityContext.getAuthentication())",C,
96,"Event);
 
  List<AuditEvent> events = customAuditEventRepository.find(""test-user"",
  Date.from(testUserEvent.getAuditEventDate().minusSeconds(3600)), ""test-type"");
  assertThat(events).hasSize(1);
  AuditEvent event = events.get(0);
  assertThat(event.getPrincipal()).isEqualTo(testUserEvent.getPrincipal());
  assertThat(event.getType()).isEqualTo(testUserEvent.getAuditEventType());
  assertThat(event.getData()).containsKey(""test-key"");
  assertThat(event.getData().get(""test-key"").toString()).isEqualTo(""test-value"");
  assertThat(event.getTimestamp()).isEqualTo(Date.from(",T,
97,"Lopes
  * Kássia Regina Silvestre de Albuquerque
  * Leonardo Luiz Vieira da Silva
  * Márcio Roberto Batista da Silva
  * Maria de Fátima Sampaio Leite
  * Micaela Maria Coelho de Araújo
  * Nelson Mendonça de Carvalho
  * Newton Morais e Silva
  * Pedro Alexandre Santos da Silva Filho
  * Rafael Corrêa Lima e Silva
  * Rafael Francisco Pinto
  * Rafael Koury Monteiro
  * Rafael Paler",DO,
98,"margin_start = 0x7f060131;
  public static final int notification_large_icon_height = 0x7f060132;
  public static final int notification_large_icon_width = 0x7f060133;
  public static final int notification_main_column_padding_top = 0x7f060134;
  public static final int notification_media_narrow_margin = 0x7f060135;
  public static final int notification_right_icon_size = 0x7f060136;
  public static final int notification_",DI,
99,"0;
 
  /** Indicator value for Infinity. */
  public static final byte INFINITE = 1;
 
  /** Indicator value for signaling NaN. */
  public static final byte SNAN = 2;
 
  /** Indicator value for quiet NaN. */
  public static final byte QNAN = 3;
 
  /** String for NaN representation. */
  private static final String NAN_STRING = ""NaN"";
 
  /** String for positive infinity representation. */
  private static final String POS_INFINITY_STRING = ""Infinity"";
 
  /** String for negative infinity representation. */
  private static final String NEG_INFINITY_STRING = ""-Infinity"";
 
  /** Name for traps triggered by addition. */
  private static final String ADD_",C,
100,"shift added for Long.MIN_VALUE
  // we know in this case that fixing the last digit is sufficient
  for (int i = 0; i < mant.length - 1; i++) {
  if (mant[i]!= 0) {
  mant[i]++;
  break;
  }
  }
  }
  }
 
  /** Create an instance from a double value.
  * @param field field to which this instance belongs
  * @param x value to convert to an instance
  */
  protected Dfp(final DfpField field, double x) {
 
  // initialize as if 0
  mant = new int[field.getRadixDigits()];
  sign = 1;",C,
101,"></code>"") or
 theme attribute (in the form
 ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"")
 containing a value of this type.
  */
  public static final int actionViewClass=0x7f01004f;
  /** Default ActivityChooserView style. 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final",C,
102,", ""updated"");
  return (Criteria) this;
  }
  }
 
  public static class Criteria extends GeneratedCriteria {
 
  protected Criteria() {
  super();
  }
  }
 
  public static class Criterion {
  private String condition;
 
  private Object value;
 
  private Object secondValue;
 
  private boolean noValue;
 
  private boolean singleValue;
 
  private boolean betweenValue;
 
  private boolean listValue;
 
  private String typeHandler;
 
  public String getCondition() {
  return condition;
  }
 
  public Object getValue() {
  return value;
  }
 
  public Object getSecondValue() {
  return secondValue;
  }
 
  public boolean isNoValue() {
  return noValue;
  }
 
  public boolean isSingleValue",C,
103,", InHead);
  } else if (name.equals(""body"")) {
  tb.error(this);
  LinkedList<Element> stack = tb.getStack();
  if (stack.size() == 1 || (stack.size() > 2 &&!stack.get(1).nodeName().equals(""body""))) {
  // only in fragment case
  return false; // ignore
  } else {
  tb.framesetOk(false);
  Element body = stack.get(1);
  for (Attribute attribute : startTag.getAttributes()) {
  if (!body.hasAttr(attribute.getKey()))
  body.attributes().put(attribute);
  }
  }
  } else if (name.equals(""",C,
104,";
  }
 
  if (decimalFound && fpdecimal.charAt(p) == '0') {
  decimalPos--;
  }
 
  if (fpdecimal.charAt(p) == '.') {
  decimalFound = true;
  }
 
  p++;
 
  if (p == fpdecimal.length()) {
  break;
  }
  }
 
  // Copy the string onto Stripped
  int q = offset;
  striped[0] = '0';
  striped[1] = '0';
  striped[2] = '0';
  striped[3] = '0';
  int significantDigits=0;
  for(;;) {
  if (p == (fpdecimal.length())) {
  break;",C,
105,"(String value) {
  addCriterion(""username not like"", value, ""username"");
  return (Criteria) this;
  }
 
  public Criteria andUsernameIn(List<String> values) {
  addCriterion(""username in"", values, ""username"");
  return (Criteria) this;
  }
 
  public Criteria andUsernameNotIn(List<String> values) {
  addCriterion(""username not in"", values, ""username"");
  return (Criteria) this;
  }
 
  public Criteria andUsernameBetween(String value1, String value2) {
  addCriterion(""username between"", value1, value2, ""username"");
  return (Criteria) this;
  }
 
  public Criteria andUsernameNotBetween(String value1, String value2",C,
106,"code>"".
  */
  public static final int actionBarTabTextStyle=0x7f010009;
  /** Reference to a theme that should be used to inflate widgets
  and layouts destined for the action bar. Most of the time
  this will be a reference to the current theme, but when
  the action bar has a significantly different contrast
  profile than the rest of the activity the difference
  can become important. If this is set to @null the current
  theme will be used.
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute",DO,
107,"() throws Exception {
  // Initialize the database
  userRepository.saveAndFlush(user);
  int databaseSizeBeforeUpdate = userRepository.findAll().size();
 
  // Update the user
  User updatedUser = userRepository.findById(user.getId()).get();
 
  ManagedUserVM managedUserVM = new ManagedUserVM();
  managedUserVM.setId(updatedUser.getId());
  managedUserVM.setLogin(UPDATED_LOGIN);
  managedUserVM.setPassword(UPDATED_PASSWORD);
  managedUserVM.setFirstName(UPDATED_FIRSTNAME);
  managedUserVM.setLastName(UPDATED_LASTNAME);
  managedUserVM.setEmail(UPDATED_EMAIL);
  managedUserVM.setActivated(updated",C,
108,"aio Cavalcanti
  * Ivan Sérgio da Silva Júnior
  * José Edmar de Siqueira
  * José Thiago Tenório Lopes
  * Kássia Regina Silvestre de Albuquerque
  * Leonardo Luiz Vieira da Silva
  * Márcio Roberto Batista da Silva
  * Maria de Fátima Sampaio Leite
  * Micaela Maria Coelho de Araújo
  * Nelson Mendonça de Carvalho
  * Newton Morais e Silva
  * Pedro Alexandre Santos da Silva Fil",DO,
109,"THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
  * CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES,
  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
  * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  * ARISING IN ANY WAY OUT OF THE USE",L,
110,"Files or Software are furnished to do so,
  * provided that (a) the above copyright notice(s) and this permission notice
  * appear with all copies of the Data Files or Software, (b) both the above
  * copyright notice(s) and this permission notice appear in associated
  * documentation, and (c) there is clear notice in each modified Data File or
  * in the Software as well as in the documentation associated with the Data
  * File(s) or Software that the data or software has been modified.
  *
  * THE DATA FILES AND SOFTWARE ARE PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY
  * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  * MERCHANTABILITY,",L,
111,">May be a color value, in the form of ""<code>#<i>rgb</i></code>"", ""<code>#<i>argb</i></code>"",
 ""<code>#<i>rrggbb</i></code>"", or ""<code>#<i>aarrggbb</i></code>"".
  */
  public static final int actionMenuTextColor=0x7f010012;
  /** Background drawable to use for action mode UI 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</",DO,
112,"anythingElse(t, r);
  break;
  default:
  anythingElse(t, r);
  }
  }
 
  private void anythingElse(Tokeniser t, CharacterReader r) {
  t.emit(""</"" + t.dataBuffer.toString());
  r.unconsume();
  t.transition(Rcdata);
  }
  },
  RawtextLessthanSign {
  void read(Tokeniser t, CharacterReader r) {
  if (r.matches('/')) {
  t.createTempBuffer();
  t.advanceTransition(RawtextEndTagOpen);
  } else {
  t.emit('<');
  t.transition(Rawtext);
  }
  }
  },
  RawtextEnd",C,
113,"Plugin needs to ensure that ImagePipelineFactory is initialized
  // Hence we run if after all native modules have been initialized
  ReactContext reactContext = reactInstanceManager.getCurrentReactContext();
  if (reactContext == null) {
  reactInstanceManager.addReactInstanceEventListener(
  new ReactInstanceManager.ReactInstanceEventListener() {
  @Override
  public void onReactContextInitialized(ReactContext reactContext) {
  reactInstanceManager.removeReactInstanceEventListener(this);
  reactContext.runOnNativeModulesQueueThread(
  new Runnable() {
  @Override
  public void run() {
  client.addPlugin(new FrescoFlipperPlugin());
  }
  });
  }
  });
  } else {
  client.add",C,
114,"(""name not like"", value, ""name"");
  return (Criteria) this;
  }
 
  public Criteria andNameIn(List<String> values) {
  addCriterion(""name in"", values, ""name"");
  return (Criteria) this;
  }
 
  public Criteria andNameNotIn(List<String> values) {
  addCriterion(""name not in"", values, ""name"");
  return (Criteria) this;
  }
 
  public Criteria andNameBetween(String value1, String value2) {
  addCriterion(""name between"", value1, value2, ""name"");
  return (Criteria) this;
  }
 
  public Criteria andNameNotBetween(String value1, String value2) {
  addCriterion(""name not",C,
115,"0x7f050067;
  public static final int notification_small_icon_background_padding = 0x7f050068;
  public static final int notification_small_icon_size_as_large = 0x7f050069;
  public static final int notification_subtext_size = 0x7f05006a;
  public static final int notification_top_pad = 0x7f05006b;
  public static final int notification_top_pad_large_text = 0x7f05006c;
  }
  public static final class drawable {",DI,
116,"if (s.equals(POS_INFINITY_STRING)) {
  sign = (byte) 1;
  nans = INFINITE;
  return;
  }
 
  if (s.equals(NEG_INFINITY_STRING)) {
  sign = (byte) -1;
  nans = INFINITE;
  return;
  }
 
  if (s.equals(NAN_STRING)) {
  sign = (byte) 1;
  nans = QNAN;
  return;
  }
 
  // Check for scientific notation
  int p = s.indexOf(""e"");
  if (p == -1) { // try upper case?
  p = s.indexOf(""E"");
  }
 
  final String fp",C,
117,"public static final int actionBarTheme = 0x7f040009;
  public static final int actionBarWidgetTheme = 0x7f04000a;
  public static final int actionButtonStyle = 0x7f04000b;
  public static final int actionDropDownStyle = 0x7f04000c;
  public static final int actionLayout = 0x7f04000d;
  public static final int actionMenuTextAppearance = 0x7f04000e;
  public static final int actionMenuTextColor = 0x7f04000f;
  public static final int",DI,
118,"Style = 0x7f020047;
  public static final int checkedTextViewStyle = 0x7f020048;
  public static final int closeIcon = 0x7f020049;
  public static final int closeItemLayout = 0x7f02004a;
  public static final int collapseContentDescription = 0x7f02004b;
  public static final int collapseIcon = 0x7f02004c;
  public static final int color = 0x7f02004d;
  public static final int colorAccent = 0x7f0",DI,
119,"7f020049;
  public static final int closeItemLayout = 0x7f02004a;
  public static final int collapseContentDescription = 0x7f02004b;
  public static final int collapseIcon = 0x7f02004c;
  public static final int color = 0x7f02004d;
  public static final int colorAccent = 0x7f02004e;
  public static final int colorBackgroundFloating = 0x7f02004f;
  public static final int colorButtonNormal = 0x7f02005",DI,
120,"Background drawable to use for action mode UI 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionModeBackground=0x7f01003c;
  /** <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code",DO,
121,"Override
  public void setEntityAudit(int customerId, String userId) {
  if (entityAudit == null) {
  entityAudit = new EntityAudit();
  }
  if (getPrimaryKey() == null) {
  this.entityAudit.setCreatedBy(userId);
  this.systemInfo.setActiveStatus(1);
  } else {
  this.entityAudit.setUpdatedBy(userId);
  }
  }
 
  @JsonIgnore
  public String getLoggedInUserInfo() {
  String auditInfo = """";
  if (this.entityAudit!= null) {
  auditInfo = entityAudit.toString();
  }
  return auditInfo;
  }
 
  @Override
  @JsonIgnore
  public void setSystemInformation(RECORD_TYPE recordType",C,
122,"exolab.org.
  *
  * 4. Products derived from this Software may not be called ""Exolab""
  * nor may ""Exolab"" appear in their names without prior written
  * permission of Intalio, Inc. Exolab is a registered
  * trademark of Intalio, Inc.
  *
  * 5. Due credit should be given to the Exolab Project
  * (http://www.exolab.org/).
  *
  * THIS SOFTWARE IS PROVIDED BY INTALIO, INC. AND CONTRIBUTORS
  * ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT
  * NOT LIMITED TO, THE IMPLIED WARRANTIES OF",L,
123,",-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9, // Decimal 140 - 152
  -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9, // Decimal 153 - 165
  -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9, // Decimal 166 - 178
  -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9, // Decimal 179",DI,
124,"int ConstraintLayout_Layout_layout_constraintVertical_bias = 44;
  public static final int ConstraintLayout_Layout_layout_constraintVertical_chainStyle = 45;
  public static final int ConstraintLayout_Layout_layout_constraintVertical_weight = 46;
  public static final int ConstraintLayout_Layout_layout_constraintWidth_default = 47;
  public static final int ConstraintLayout_Layout_layout_constraintWidth_max = 48;
  public static final int ConstraintLayout_Layout_layout_constraintWidth_min = 49;
  public static final int ConstraintLayout_Layout_layout_constraintWidth_percent = 50;
  public static final int Constraint",DI,
125,"authorship, including
  * the original version of the Work and any modifications or additions
  * to that Work or Derivative Works thereof, that is intentionally
  * submitted to Licensor for inclusion in the Work by the copyright owner
  * or by an individual or Legal Entity authorized to submit on behalf of
  * the copyright owner. For the purposes of this definition, ""submitted""
  * means any form of electronic, verbal, or written communication sent
  * to the Licensor or its representatives, including but not limited to
  * communication on electronic mailing lists, source code control systems,
  * and issue tracking systems that are managed by, or on behalf of,",L,
126,"public Criteria andIdGreaterThanOrEqualTo(Long value) {
  addCriterion(""id >="", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdLessThan(Long value) {
  addCriterion(""id <"", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdLessThanOrEqualTo(Long value) {
  addCriterion(""id <="", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdIn(List<Long> values) {
  addCriterion(""id in"", values, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdNotIn(List<Long> values) {
  addCriterion(""id not in"", values",C,
127,"* communication on electronic mailing lists, source code control systems,
  * and issue tracking systems that are managed by, or on behalf of, the
  * Licensor for the purpose of discussing and improving the Work, but
  * excluding communication that is conspicuously marked or otherwise
  * designated in writing by the copyright owner as ""Not a Contribution.""
  *
  * ""Contributor"" shall mean Licensor and any individual or Legal Entity
  * on behalf of whom a Contribution has been received by Licensor and
  * subsequently incorporated within the Work.
  *
  * 2. Grant of Copyright License. Subject to the terms and conditions of
  * this",L,
128,"SizeMaxTextSize = 0x7f03002c;
  public static final int autoSizeMinTextSize = 0x7f03002d;
  public static final int autoSizePresetSizes = 0x7f03002e;
  public static final int autoSizeStepGranularity = 0x7f03002f;
  public static final int autoSizeTextType = 0x7f030030;
  public static final int background = 0x7f030031;
  public static final int backgroundSplit = 0x7f030032;
  public static final",DI,
129,"EventDate()));
  }
 
  @Test
  public void testFindByPrincipal() {
  persistenceAuditEventRepository.save(testUserEvent);
  persistenceAuditEventRepository.save(testOldUserEvent);
  persistenceAuditEventRepository.save(testOtherUserEvent);
 
  List<AuditEvent> events = customAuditEventRepository
  .find(""test-user"", Date.from(testUserEvent.getAuditEventDate().minusSeconds(3600)));
  assertThat(events).hasSize(1);
  AuditEvent event = events.get(0);
  assertThat(event.getPrincipal()).isEqualTo(testUserEvent.getPrincipal());
  assertThat(event.getType()).isEqualTo(testUserEvent.getAuditEventType",T,
130,"revocable
  * (except as stated in this section) patent license to make, have made,
  * use, offer to sell, sell, import, and otherwise transfer the Work,
  * where such license applies only to those patent claims licensable
  * by such Contributor that are necessarily infringed by their
  * Contribution(s) alone or by combination of their Contribution(s)
  * with the Work to which such Contribution(s) was submitted. If You
  * institute patent litigation against any entity (including a
  * cross-claim or counterclaim in a lawsuit) alleging that the Work
  * or",L,
131,"}
 
  private boolean anythingElse(Token t, HtmlTreeBuilder tb) {
  tb.insert(""html"");
  tb.transition(BeforeHead);
  return tb.process(t);
  }
  },
  BeforeHead {
  boolean process(Token t, HtmlTreeBuilder tb) {
  if (isWhitespace(t)) {
  return true;
  } else if (t.isComment()) {
  tb.insert(t.asComment());
  } else if (t.isDoctype()) {
  tb.error(this);
  return false;
  } else if (t.isStartTag() && t.asStartTag().name().equals(""html"")) {
  return InBody.process(t",C,
132,"DRIP Statistical Learning: Library for Statistical Evaluation and Machine Learning.
  * 
  * Licensed under the Apache License, Version 2.0 (the ""License"");
  *  you may not use this file except in compliance with the License.
  * 
  * You may obtain a copy of the License at
  *  http://www.apache.org/licenses/LICENSE-2.0
  * 
  * Unless required by applicable law or agreed to in writing, software
  *  distributed under the License is distributed on an ""AS IS"" BASIS,
  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * 
  * See the License for the specific language",L,
133,"or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionModeWebSearchDrawable=0x7f010045;
  /** <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionOverflowButtonStyle=0x7f01000a;",DO,
134,"ScriptDataEndTagOpen {
  void read(Tokeniser t, CharacterReader r) {
  readEndTag(t, r, ScriptDataEndTagName, ScriptData);
  }
  },
  ScriptDataEndTagName {
  void read(Tokeniser t, CharacterReader r) {
  handleDataEndTag(t, r, ScriptData);
  }
  },
  ScriptDataEscapeStart {
  void read(Tokeniser t, CharacterReader r) {
  if (r.matches('-')) {
  t.emit('-');
  t.advanceTransition(ScriptDataEscapeStartDash);
  } else {
  t.transition(ScriptData);
  }
  }
  },
  ScriptDataEscapeStartDash {
  void",C,
135,"constraintStart_toStartOf = 40;
  public static final int ConstraintLayout_Layout_layout_constraintTop_creator = 41;
  public static final int ConstraintLayout_Layout_layout_constraintTop_toBottomOf = 42;
  public static final int ConstraintLayout_Layout_layout_constraintTop_toTopOf = 43;
  public static final int ConstraintLayout_Layout_layout_constraintVertical_bias = 44;
  public static final int ConstraintLayout_Layout_layout_constraintVertical_chainStyle = 45;
  public static final int ConstraintLayout_Layout_layout_constraintVertical_weight = 46;
  public static final int ConstraintLayout_",DI,
136,"f03001d;
  public static final int actionOverflowMenuStyle = 0x7f03001e;
  public static final int actionProviderClass = 0x7f03001f;
  public static final int actionViewClass = 0x7f030020;
  public static final int activityChooserViewStyle = 0x7f030021;
  public static final int alertDialogButtonGroupStyle = 0x7f030022;
  public static final int alertDialogCenterButtons = 0x7f030023;
  public static final int alertDialogStyle = 0",DI,
137,"i>package</i>:]<i>type</i>/<i>name</i></code>"".
  */
  public static final int actionBarTabTextStyle=0x7f030008;
  /**
  * Reference to a theme that should be used to inflate the
  * action bar. This will be inherited by any widget inflated
  * into the action bar.
  * <p>May be a reference to another resource, in the form
  * ""<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>"" or a theme
  * attribute in the form
  * ""<code>?[<i>package</i>:]<i>type</i>/<i>name",L,
138,""");
  if (pieces[0].equals(mEmail)) {
  // Account exists, return true if the password matches.
  return pieces[1].equals(mPassword);
  }
  }
 
  // TODO: register the new account here.
  return true;
  }
 
  @Override
  protected void onPostExecute(final Boolean success) {
  mAuthTask = null;
  showProgress(false);
 
  if (success) {
  finish();
  } else {
  mPasswordView.setError(getString(R.string.error_incorrect_password));
  mPasswordView.requestFocus();
  }
  }
 
  @Override
  protected void onCancelled() {
  mAuthTask = null;
  showProgress(",C,
139,#ERROR!,T,
140,");
  user.setLastName(DEFAULT_LASTNAME);
  user.setImageUrl(DEFAULT_IMAGEURL);
  user.setLangKey(DEFAULT_LANGKEY);
  return user;
  }
 
  @Before
  public void initTest() {
  user = createEntity(em);
  user.setLogin(DEFAULT_LOGIN);
  user.setEmail(DEFAULT_EMAIL);
  }
 
  @Test
  @Transactional
  public void createUser() throws Exception {
  int databaseSizeBeforeCreate = userRepository.findAll().size();
 
  // Create the User
  ManagedUserVM managedUserVM = new ManagedUserVM();
  managedUserVM.setLogin(DEFAULT_LOGIN);
  managedUserVM.setPassword(DEFAULT_",T,
141,"i></code>"".
  */
  public static final int activityChooserViewStyle=0x7f01006c;
  /** Specifies a background drawable for the action bar. 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int background=0x7f01002f;
  /** Specifies a background drawable for the bottom component of a split action bar. 
  <p>",DO,
142,"com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
  * </li>
  * </ul>
  * @param jsonFactory JSON factory, which may be:
  * <ul>
  * <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
  * <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
  * <li>Android Honeycomb or higher:
  * {@code com.google.api.client.extensions.android.json.AndroidJsonFactory}</li",DO,
143,"0x7f02000d;
  public static final int actionMenuTextAppearance = 0x7f02000e;
  public static final int actionMenuTextColor = 0x7f02000f;
  public static final int actionModeBackground = 0x7f020010;
  public static final int actionModeCloseButtonStyle = 0x7f020011;
  public static final int actionModeCloseDrawable = 0x7f020012;
  public static final int actionModeCopyDrawable = 0x7f020013;
  public static final int actionModeCutDrawable =",DI,
144,"199, 0x1010449, 0x101044a, 0x101044b };
  public static final int AnimatedStateListDrawableTransition_android_drawable = 0;
  public static final int AnimatedStateListDrawableTransition_android_toId = 1;
  public static final int AnimatedStateListDrawableTransition_android_fromId = 2;
  public static final int AnimatedStateListDrawableTransition_android_reversible = 3;
  public static final int[] ColorStateListItem = { 0x10101a5, 0x101031f, 0x7",DI,
145,"writeStartElement(prefix, localPart, namespace);
  xmlWriter.writeNamespace(prefix, namespace);
  xmlWriter.setPrefix(prefix, namespace);
  }
  }
  
  /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
  java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
  if (xmlWriter.getPrefix(namespace) == null) {
  xmlWriter.writeNamespace(prefix, namespace);
  xmlWriter.setPrefix(prefix, namespace);",C,
146,"*/
  protected Dfp(final DfpField field, long x) {
 
  // initialize as if 0
  mant = new int[field.getRadixDigits()];
  nans = FINITE;
  this.field = field;
 
  boolean isLongMin = false;
  if (x == Long.MIN_VALUE) {
  // special case for Long.MIN_VALUE (-9223372036854775808)
  // we must shift it before taking its absolute value
  isLongMin = true;
  ++x;
  }
 
  // set the sign
  if (x < 0) {
  sign = -1;
  x = -",C,
147,"close);
  drawer.setDrawerListener(toggle);
  toggle.syncState();
 
  NavigationView navigationView = (NavigationView) findViewById(R.id.nav_view);
  navigationView.setNavigationItemSelectedListener(this);
  }
 
  @Override
  public void onBackPressed() {
  DrawerLayout drawer = (DrawerLayout) findViewById(R.id.drawer_layout);
  if (drawer.isDrawerOpen(GravityCompat.START)) {
  drawer.closeDrawer(GravityCompat.START);
  } else {
  super.onBackPressed();
  }
  }
 
  @Override
  public boolean onCreateOptionsMenu(Menu menu) {
  // Inflate the menu; this adds items to the action bar",C,
148,">:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionModeCopyDrawable=0x7f010040;
  /** Drawable to use for the Cut action button in Contextual Action Bar 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>",DO,
149,"Save$0(JadxDecompiler.java:200)
  Caused by: java.lang.IllegalArgumentException: bogus opcode: 00e8
   at com.android.dx.io.OpcodeInfo.get(OpcodeInfo.java:1227)
   at com.android.dx.io.OpcodeInfo.getName(OpcodeInfo.java:1234)
   at jadx.core.dex.instructions.InsnDecoder.decode(InsnDecoder.java:581)
   at jadx.core.dex.instructions.InsnDecoder.process(InsnDecoder.java:74)
   at jadx.core",DI,
150,"-':
  t.emit(c);
  t.transition(ScriptDataDoubleEscapedDashDash);
  break;
  case '<':
  t.emit(c);
  t.transition(ScriptDataDoubleEscapedLessthanSign);
  break;
  case nullChar:
  t.error(this);
  t.emit(replacementChar);
  t.transition(ScriptDataDoubleEscaped);
  break;
  case eof:
  t.eofError(this);
  t.transition(Data);
  break;
  default:
  t.emit(c);
  t.transition(ScriptDataDoubleEscaped);
  }
  }
  },
  ScriptDataDoubleEscapedDashDash {
  void read(",C,
151,"as in the documentation associated with the Data File(s) or
  * Software that the data or software has been modified.
  *
  * THE DATA FILES AND SOFTWARE ARE PROVIDED ""AS IS"", WITHOUT WARRANTY OF
  * ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
  * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  * NONINFRINGEMENT OF THIRD PARTY RIGHTS.
  * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR HOLDERS INCLUDED IN THIS
  * NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL INDIRECT OR CONSEQUENTIAL
  * DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
  * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
  * TORTI",L,
152,"Derivative Works thereof, You may choose to offer,
  * and charge a fee for, acceptance of support, warranty, indemnity,
  * or other liability obligations and/or rights consistent with this
  * License. However, in accepting such obligations, You may act only
  * on Your own behalf and on Your sole responsibility, not on behalf
  * of any other Contributor, and only if You agree to indemnify,
  * defend, and hold each Contributor harmless for any liability
  * incurred by, or claims asserted against, such Contributor by reason
  * of your accepting any such warranty or additional liability.
  *",L,
153,"util.logging.Level.SEVERE, null, ex);
  } catch (InstantiationException ex) {
  java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
  } catch (IllegalAccessException ex) {
  java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
  } catch (javax.swing.UnsupportedLookAndFeelException ex) {
  java.util.logging.Logger.getLogger(TelaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex",C,
154,"7f030010;
  public static final int actionModeCloseButtonStyle = 0x7f030011;
  public static final int actionModeCloseDrawable = 0x7f030012;
  public static final int actionModeCopyDrawable = 0x7f030013;
  public static final int actionModeCutDrawable = 0x7f030014;
  public static final int actionModeFindDrawable = 0x7f030015;
  public static final int actionModePasteDrawable = 0x7f030016;
  public static final int actionModePopupWindow",DI,
155,"*
  * <p>Trade offs:
  * <ol>
  * <li>Memory foot print. I'm using more memory than necessary to
  * represent numbers to get better performance.</li>
  * <li>Digits are bigger, so rounding is a greater loss. So, if you
  * really need 12 decimal digits, better use 4 base 10000 digits
  * there can be one partially filled.</li>
  * </ol></p>
  *
  * <p>Numbers are represented in the following form:
  * <pre>
  * n = sign &times; mant &",DO,
156,",
 // ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
 // THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
 // SUCH DAMAGE. THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY
 // WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 // MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
 // PROVIDED HEREUNDER IS ON AN ""AS IS"" BASIS, AND THE UNIVERSITY OF
 // CALIFORNIA HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT,
 // UPDATES, ENH",L,
157,"setRequestURI(""/api/test"");
  MockHttpServletResponse response = new MockHttpServletResponse();
  MockFilterChain filterChain = new MockFilterChain();
  jwtFilter.doFilter(request, response, filterChain);
  assertThat(response.getStatus()).isEqualTo(HttpStatus.OK.value());
  assertThat(SecurityContextHolder.getContext().getAuthentication()).isNull();
  }
 
  @Test
  public void testJWTFilterWrongScheme() throws Exception {
  UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(
  ""test-user"",
  ""test-password"",
  Collections.singletonList(new SimpleGrantedAuthority(AuthoritiesConstants.USER))
  );
  String jwt = tokenProvider.createToken(authentication, false);
  MockHttpServletRequest request = new MockHttpServletRequest",T,
158,"}
 
  if (s.equals(NEG_INFINITY_STRING)) {
  sign = (byte) -1;
  nans = INFINITE;
  return;
  }
 
  if (s.equals(NAN_STRING)) {
  sign = (byte) 1;
  nans = QNAN;
  return;
  }
 
  // Check for scientific notation
  int p = s.indexOf(""e"");
  if (p == -1) { // try upper case?
  p = s.indexOf(""E"");
  }
 
  final String fpdecimal;
  int sciexp = 0;
  if (p!= -1) {
  // scientific notation
  fpdecimal = s.substring(0, p",C,
159,"} else if (t.isStartTag() && t.asStartTag().name().equals(""head"")) {
  Element head = tb.insert(t.asStartTag());
  tb.setHeadElement(head);
  tb.transition(InHead);
  } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().name(), ""head"", ""body"", ""html"", ""br""))) {
  tb.process(new Token.StartTag(""head""));
  return tb.process(t);
  } else if (t.isEndTag()) {
  tb.error(this);
  return false;
  } else {
  tb.process(new Token.",C,
160,"Radius = 19;
  public static final int ConstraintLayout_Layout_layout_constraintDimensionRatio = 20;
  public static final int ConstraintLayout_Layout_layout_constraintEnd_toEndOf = 21;
  public static final int ConstraintLayout_Layout_layout_constraintEnd_toStartOf = 22;
  public static final int ConstraintLayout_Layout_layout_constraintGuide_begin = 23;
  public static final int ConstraintLayout_Layout_layout_constraintGuide_end = 24;
  public static final int ConstraintLayout_Layout_layout_constraintGuide_percent = 25;
  public static final int ConstraintLayout_Layout_layout_constraintHeight_default",DI,
161,"log.info(""Filtering metrics logs from all appenders except the {} appender"", LOGSTASH_APPENDER_NAME);
  OnMarkerEvaluator onMarkerMetricsEvaluator = new OnMarkerEvaluator();
  onMarkerMetricsEvaluator.setContext(context);
  onMarkerMetricsEvaluator.addMarker(""metrics"");
  onMarkerMetricsEvaluator.start();
  EvaluatorFilter<ILoggingEvent> metricsFilter = new EvaluatorFilter<>();
  metricsFilter.setContext(context);
  metricsFilter.setEvaluator(onMarkerMetricsEvaluator);
  metricsFilter.setOnMatch(FilterReply.DENY);
  metricsFilter.start();
 
  for (ch.qos.logback.classic.Logger logger : context.getLoggerList()) {",C,
162,"a display generated by the Derivative Works, if and
  * wherever such third-party notices normally appear. The contents
  * of the NOTICE file are for informational purposes only and
  * do not modify the License. You may add Your own attribution
  * notices within Derivative Works that You distribute, alongside
  * or as an addendum to the NOTICE text from the Work, provided
  * that such additional attribution notices cannot be construed
  * as modifying the License.
  *
  * You may add Your own copyright statement to Your modifications and
  * may provide additional or different license terms and conditions
  * for use, reproduction, or distribution of Your",L,
163,"ing for research
  * purposes, typically performed in IMS test-beds.
  *
  * Users of the Open Source IMS Core System have to be aware that IMS
  * technology may be subject of patents and licence terms, as being
  * specified within the various IMS-related IETF, ITU-T, ETSI, and 3GPP
  * standards. Thus all Open IMS Core users have to take notice of this
  * fact and have to agree to check out carefully before installing,
  * using and extending the Open Source IMS Core System, if related
  * patents and licenses may become applicable to the intended usage
  * context. 
  *
  * You should have received",L,
164,"i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionBarTabBarStyle=0x7f010008;
  /** Default style for tabs within an action bar 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionBarTabStyle=0x7f010007;
  /** <",DO,
165,"1, Object value2, String property) {
  if (value1 == null || value2 == null) {
  throw new RuntimeException(""Between values for "" + property + "" cannot be null"");
  }
  criteria.add(new Criterion(condition, value1, value2));
  }
 
  public Criteria andIdIsNull() {
  addCriterion(""id is null"");
  return (Criteria) this;
  }
 
  public Criteria andIdIsNotNull() {
  addCriterion(""id is not null"");
  return (Criteria) this;
  }
 
  public Criteria andIdEqualTo(Long value) {
  addCriterion(""id ="", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdNotEqualTo(",C,
166,"(..)) or execution(* *.junk19(..)) or execution(* *.junk20(..)) or execution(* *.junk21(..)) or execution(* *.junk22(..)) or execution(* *.junk23(..)) or execution(* *.junk24(..)) or execution(* *.junk25(..)) or execution(* *.junk26(..)) or execution(* *.junk27(..)) or execution(* *.junk28(..)) or execution(* *.junk29(..)) or execution(* *.target(..)))"")
  public Object onTarget(ProceedingJoinPoint joinPoint) throws Throwable {
  int res = (int) joinPoint.proceed();
  
  for",C,
167,");
  } else if (isMediaDocument(imageUri)) {
  String docId = DocumentsContract.getDocumentId(imageUri);
  String[] split = docId.split("":"");
  String type = split[0];
  Uri contentUri = null;
  if (""image"".equals(type)) {
  contentUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;
  } else if (""video"".equals(type)) {
  contentUri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI;
  } else if (""audio"".equals(type)) {
  contentUri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;
  }
  String selection = MediaStore.Images.",C,
168,"AuditEventType(""test-type"");
  testOtherUserEvent.setAuditEventDate(oneHourAgo);
  }
 
  @Test
  public void testFindAfter() {
  persistenceAuditEventRepository.save(testUserEvent);
  persistenceAuditEventRepository.save(testOldUserEvent);
 
  List<AuditEvent> events =
  customAuditEventRepository.find(Date.from(testUserEvent.getAuditEventDate().minusSeconds(3600)));
  assertThat(events).hasSize(1);
  AuditEvent event = events.get(0);
  assertThat(event.getPrincipal()).isEqualTo(testUserEvent.getPrincipal());
  assertThat(event.getType()).isEqualTo(testUserEvent.getAudit",T,
169,"a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionModeSplitBackground=0x7f01003d;
  /** <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<",DO,
170,"Start_toStartOf = 40;
  public static final int ConstraintLayout_Layout_layout_constraintTop_creator = 41;
  public static final int ConstraintLayout_Layout_layout_constraintTop_toBottomOf = 42;
  public static final int ConstraintLayout_Layout_layout_constraintTop_toTopOf = 43;
  public static final int ConstraintLayout_Layout_layout_constraintVertical_bias = 44;
  public static final int ConstraintLayout_Layout_layout_constraintVertical_chainStyle = 45;
  public static final int ConstraintLayout_Layout_layout_constraintVertical_weight = 46;
  public static final int ConstraintLayout_Layout",DI,
171,"Layout_Layout_layout_constraintCircleAngle = 18;
  public static final int ConstraintLayout_Layout_layout_constraintCircleRadius = 19;
  public static final int ConstraintLayout_Layout_layout_constraintDimensionRatio = 20;
  public static final int ConstraintLayout_Layout_layout_constraintEnd_toEndOf = 21;
  public static final int ConstraintLayout_Layout_layout_constraintEnd_toStartOf = 22;
  public static final int ConstraintLayout_Layout_layout_constraintGuide_begin = 23;
  public static final int ConstraintLayout_Layout_layout_constraintGuide_end = 24;
  public static final int ConstraintLayout_Layout",DI,
172,"criteria);
  }
  return criteria;
  }
 
  protected Criteria createCriteriaInternal() {
  Criteria criteria = new Criteria();
  return criteria;
  }
 
  public void clear() {
  oredCriteria.clear();
  orderByClause = null;
  distinct = false;
  }
 
  protected abstract static class GeneratedCriteria {
  protected List<Criterion> criteria;
 
  protected GeneratedCriteria() {
  super();
  criteria = new ArrayList<Criterion>();
  }
 
  public boolean isValid() {
  return criteria.size() > 0;
  }
 
  public List<Criterion> getAllCriteria() {
  return criteria;
  }
 
  public List<Criterion> getCriteria() {
  return criteria;
  }
 
  protected void addCriterion(String condition)",C,
173,"x7f020026;
  public static final int alpha = 0x7f020027;
  public static final int alphabeticModifiers = 0x7f020028;
  public static final int arrowHeadLength = 0x7f020029;
  public static final int arrowShaftLength = 0x7f02002a;
  public static final int autoCompleteTextViewStyle = 0x7f02002b;
  public static final int autoSizeMaxTextSize = 0x7f02002c;
  public static final int autoSizeMinTextSize =",DI,
174,"f040009;
  public static int design_bottom_sheet_slide_in=0x7f04000a;
  public static int design_bottom_sheet_slide_out=0x7f04000b;
  public static int design_fab_in=0x7f04000c;
  public static int design_fab_out=0x7f04000d;
  public static int design_snackbar_in=0x7f04000e;
  public static int design_snackbar_out=0x7f04000f;
  }
  public static final",DI,
175,"* Rodrigo Avellar Silveira
 * Rosana Carvalho Barbosa
 * Sávio Luiz de Andrade Cavalcante
 * Tai Mu Shih
 * Thiago Augusto Souza do Nascimento
 * Tiago Moreno Rodrigues
 * Vivianne Barbosa Sousa
 *
 * Este programa é software livre; você pode redistribuí-lo e/ou
 * modificá-lo sob os termos de Licença Pública Geral GNU, conforme
 * publicada pela Free Software Foundation; versão 2 da
 *",DO,
176,"static final int colorButtonNormal = 0x7f020050;
  public static final int colorControlActivated = 0x7f020051;
  public static final int colorControlHighlight = 0x7f020052;
  public static final int colorControlNormal = 0x7f020053;
  public static final int colorError = 0x7f020054;
  public static final int colorPrimary = 0x7f020055;
  public static final int colorPrimaryDark = 0x7f020056;
  public static final int colorSwitch",DI,
177,"10570, 0x7f0300d7, 0x7f0300df, 0x7f0300e0, 0x7f0300e1, 0x7f030208 };
  public static final int FontFamilyFont_android_font = 0;
  public static final int FontFamilyFont_android_fontWeight = 1;
  public static final int FontFamilyFont_android_fontStyle = 2;
  public static final int FontFamilyFont_android_ttcIndex = 3;
  public static final int FontFamilyFont_android_fontVariationSettings = 4",DI,
178,"t.advanceTransition(RawtextEndTagOpen);
  } else {
  t.emit('<');
  t.transition(Rawtext);
  }
  }
  },
  RawtextEndTagOpen {
  void read(Tokeniser t, CharacterReader r) {
  readEndTag(t, r, RawtextEndTagName, Rawtext);
  }
  },
  RawtextEndTagName {
  void read(Tokeniser t, CharacterReader r) {
  handleDataEndTag(t, r, Rawtext);
  }
  },
  ScriptDataLessthanSign {
  void read(Tokeniser t, CharacterReader r) {
  switch (r.consume()) {
  case '/':
  t.createTemp",C,
179,"and (c) there is clear notice in each modified Data File or
  * in the Software as well as in the documentation associated with the Data
  * File(s) or Software that the data or software has been modified.
  *
  * THE DATA FILES AND SOFTWARE ARE PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY
  * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF
  * THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR HOLDERS
  * INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL INDIRECT OR
  * CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,",L,
180,"package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionModeCloseDrawable=0x7f01003e;
  /** Drawable to use for the Copy action button in Contextual Action Bar 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionModeCopyDrawable=0x7f010040;",DO,
181,"action button in Contextual Action Bar
  * <p>May be a reference to another resource, in the form
  * ""<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>"" or a theme
  * attribute in the form
  * ""<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>"".
  */
  public static final int actionModeCutDrawable=0x7f030014;
  /**
  * Drawable to use for the Find action button in WebView selection action modes
  * <p>May be a reference to another resource, in the form
  * ""<code>@[+][<i>package</i>:]<i",DO,
182,"/**
  * Each entry in this array is an array of integers. Each array
  * of integers represents a sequence of tokens (by their ordinal
  * values) that is expected at this point of the parse.
  */
  public int[][] expectedTokenSequences;
 
  /**
  * This is a reference to the ""tokenImage"" array of the generated
  * parser within which the parse error occurred. This array is
  * defined in the generated...Constants interface.
  */
  public String[] tokenImage;
 
  /**
  * It uses ""currentToken"" and ""expectedTokenSequences"" to generate a parse
  * error message and returns it. If this object has been created
  * due to a parse error, and",DO,
183,"{
  readEndTag(t, r, ScriptDataEndTagName, ScriptData);
  }
  },
  ScriptDataEndTagName {
  void read(Tokeniser t, CharacterReader r) {
  handleDataEndTag(t, r, ScriptData);
  }
  },
  ScriptDataEscapeStart {
  void read(Tokeniser t, CharacterReader r) {
  if (r.matches('-')) {
  t.emit('-');
  t.advanceTransition(ScriptDataEscapeStartDash);
  } else {
  t.transition(ScriptData);
  }
  }
  },
  ScriptDataEscapeStartDash {
  void read(Tokeniser t, CharacterReader r) {
  if (r.matches('-'))",C,
184,"User.getEmail()).isEqualTo(DEFAULT_EMAIL);
  assertThat(testUser.getImageUrl()).isEqualTo(DEFAULT_IMAGEURL);
  assertThat(testUser.getLangKey()).isEqualTo(DEFAULT_LANGKEY);
  }
 
  @Test
  @Transactional
  public void createUserWithExistingId() throws Exception {
  int databaseSizeBeforeCreate = userRepository.findAll().size();
 
  ManagedUserVM managedUserVM = new ManagedUserVM();
  managedUserVM.setId(1L);
  managedUserVM.setLogin(DEFAULT_LOGIN);
  managedUserVM.setPassword(DEFAULT_PASSWORD);
  managedUserVM.setFirstName(DEFAULT_FIRSTNAME);
  managedUserVM.setLastName(DEFAULT_LASTNAME);",T,
185,"display, publicly perform, sublicense, and distribute the
  * Work and such Derivative Works in Source or Object form.
  *
  * 3. Grant of Patent License. Subject to the terms and conditions of
  * this License, each Contributor hereby grants to You a perpetual,
  * worldwide, non-exclusive, no-charge, royalty-free, irrevocable
  * (except as stated in this section) patent license to make, have made,
  * use, offer to sell, sell, import, and otherwise transfer the Work,
  * where such license applies only to those patent claims licensable
  * by such Contributor that",L,
186,"LessThanOrEqualTo(String value) {
  addCriterion(""username <="", value, ""username"");
  return (Criteria) this;
  }
 
  public Criteria andUsernameLike(String value) {
  addCriterion(""username like"", value, ""username"");
  return (Criteria) this;
  }
 
  public Criteria andUsernameNotLike(String value) {
  addCriterion(""username not like"", value, ""username"");
  return (Criteria) this;
  }
 
  public Criteria andUsernameIn(List<String> values) {
  addCriterion(""username in"", values, ""username"");
  return (Criteria) this;
  }
 
  public Criteria andUsernameNotIn(List<String> values) {
  addCriterion(""username not in"", values, ""username",C,
187,", ""status"");
  return (Criteria) this;
  }
 
  public Criteria andStatusLessThanOrEqualTo(Integer value) {
  addCriterion(""status <="", value, ""status"");
  return (Criteria) this;
  }
 
  public Criteria andStatusIn(List<Integer> values) {
  addCriterion(""status in"", values, ""status"");
  return (Criteria) this;
  }
 
  public Criteria andStatusNotIn(List<Integer> values) {
  addCriterion(""status not in"", values, ""status"");
  return (Criteria) this;
  }
 
  public Criteria andStatusBetween(Integer value1, Integer value2) {
  addCriterion(""status between"", value1, value2, ""status"");
  return (Criteria)",C,
188,"Litterman Strategy
  *  Incorporator, Holdings Constraint, and Transaction Costs.
  * 
  * - DRIP Numerical Optimizer: Library for Numerical Optimization and Spline Functionality.
  * 
  * - DRIP Statistical Learning: Library for Statistical Evaluation and Machine Learning.
  * 
  * Licensed under the Apache License, Version 2.0 (the ""License"");
  *  you may not use this file except in compliance with the License.
  * 
  * You may obtain a copy of the License at
  *  http://www.apache.org/licenses/LICENSE-2.0
  * 
  * Unless required by applicable law or agreed to",L,
189,"this.implements_rules; }
  /** @see #implements_rules */ @JsonProperty(""implements_rules"") public void setImplementsRules(ReferenceList implements_rules) { this.implements_rules = implements_rules; }
 
  /** @see #governed_by_rules */ @JsonProperty(""governed_by_rules"") public ReferenceList getGovernedByRules() { return this.governed_by_rules; }
  /** @see #governed_by_rules */ @JsonProperty(""governed_by_rules"") public void setGovernedByRules(ReferenceList governed_by_rules) { this.governed_by_rules = governed",DO,
190,"5;
  public static final int[] FontFamilyFont = { 0x1010532, 0x1010533, 0x101053f, 0x101056f, 0x1010570, 0x7f0300d7, 0x7f0300df, 0x7f0300e0, 0x7f0300e1, 0x7f030208 };
  public static final int FontFamilyFont_android_font = 0;
  public static final int Font",DI,
191,"math3.exception.DimensionMismatchException;
 import org.apache.commons.math3.util.FastMath;
 
 /**
  * Decimal floating point library for Java
  *
  * <p>Another floating point class. This one is built using radix 10000
  * which is 10<sup>4</sup>, so its almost decimal.</p>
  *
  * <p>The design goals here are:
  * <ol>
  * <li>Decimal math, or close to it</li>
  * <li>Settable precision (but no mix between numbers using different settings)</li>
  * <li>Portability",DO,
192,"s 'profile' contact.
  Uri.withAppendedPath(ContactsContract.Profile.CONTENT_URI,
  ContactsContract.Contacts.Data.CONTENT_DIRECTORY), ProfileQuery.PROJECTION,
 
  // Select only email addresses.
  ContactsContract.Contacts.Data.MIMETYPE +
  "" =?"", new String[]{ContactsContract.CommonDataKinds.Email
  .CONTENT_ITEM_TYPE},
 
  // Show primary email addresses first. Note that there won't be
  // a primary email address if the user hasn't specified one.
  ContactsContract.Contacts.Data.IS_PRIMARY + "" DESC"");
  }
 
  @Override
  public void onLoadFinished(Loader<Cursor> cursorLoader, Cursor cursor) {",C,
193,"* limitations under the License.
  */
 
 package org.apache.commons.math3.dfp;
 
 import java.util.Arrays;
 
 import org.apache.commons.math3.RealFieldElement;
 import org.apache.commons.math3.exception.DimensionMismatchException;
 import org.apache.commons.math3.util.FastMath;
 
 /**
  * Decimal floating point library for Java
  *
  * <p>Another floating point class. This one is built using radix 10000
  * which is 10<sup>4</sup>, so its almost decimal.</p>
  *
  * <p>The",C,
194,"the Copy action button in Contextual Action Bar 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionModeCopyDrawable=0x7f010040;
  /** Drawable to use for the Cut action button in Contextual Action Bar 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>",DO,
195,"MenuTextAppearance = 0x7f04000e;
  public static final int actionMenuTextColor = 0x7f04000f;
  public static final int actionModeBackground = 0x7f040010;
  public static final int actionModeCloseButtonStyle = 0x7f040011;
  public static final int actionModeCloseDrawable = 0x7f040012;
  public static final int actionModeCopyDrawable = 0x7f040013;
  public static final int actionModeCutDrawable = 0x7f040014;
  public static final int",DI,
196,"07;
  public static final int actionBarTabTextStyle = 0x7f030008;
  public static final int actionBarTheme = 0x7f030009;
  public static final int actionBarWidgetTheme = 0x7f03000a;
  public static final int actionButtonStyle = 0x7f03000b;
  public static final int actionDropDownStyle = 0x7f03000c;
  public static final int actionLayout = 0x7f03000d;
  public static final int actionMenuTextAppearance = 0x7f03000e;",DI,
197,"* GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA
 */
 
 /*
 * GSAN - Sistema Integrado de Gestão de Serviços de Saneamento
 * Copyright (C) <2007> 
 * Adriano Britto Siqueira
 * Alexandre Santos Cabral
 * Ana Carolina Alves Bred",L,
198,",attName,attValue);
  }
  }
 
 
  /**
  * Util method to write an attribute without the ns prefix
  */
  private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 
  java.lang.String attributeNamespace = qname.getNamespaceURI();
  java.lang.String attributePrefix = xmlWriter.getPrefix(attributeNamespace);
  if (attributePrefix == null) {
  attributePrefix = registerPrefix(xmlWriter, attributeNamespace);
  }
  java.lang.String attributeValue",C,
199,"(eol).append("" "");
  }
  String retval = ""Encountered \"""";
  Token tok = currentToken.next;
  for (int i = 0; i < maxSize; i++) {
  if (i!= 0) retval += "" "";
  if (tok.kind == 0) {
  retval += tokenImage[0];
  break;
  }
  retval += "" "" + tokenImage[tok.kind];
  retval += "" \"""";
  retval += add_escapes(tok.image);
  retval += "" \"""";
  tok = tok.next;
  }
  retval += ""\"" at line "" + currentToken.next.beginLine + "", column "" + currentToken.next",C,
200,"isEqualTo(UPDATED_EMAIL);
  assertThat(testUser.getImageUrl()).isEqualTo(UPDATED_IMAGEURL);
  assertThat(testUser.getLangKey()).isEqualTo(UPDATED_LANGKEY);
  }
 
  @Test
  @Transactional
  public void updateUserLogin() throws Exception {
  // Initialize the database
  userRepository.saveAndFlush(user);
  int databaseSizeBeforeUpdate = userRepository.findAll().size();
 
  // Update the user
  User updatedUser = userRepository.findById(user.getId()).get();
 
  ManagedUserVM managedUserVM = new ManagedUserVM();
  managedUserVM.setId(updatedUser.getId());
  managedUserVM.setLogin(UPDATED_LOGIN);
  managedUserVM.set",T,
201,"@TargetApi(Build.VERSION_CODES.HONEYCOMB)
  public static class DataSyncPreferenceFragment extends PreferenceFragment {
  @Override
  public void onCreate(Bundle savedInstanceState) {
  super.onCreate(savedInstanceState);
  addPreferencesFromResource(R.xml.pref_data_sync);
  setHasOptionsMenu(true);
 
  // Bind the summaries of EditText/List/Dialog/Ringtone preferences
  // to their values. When their values change, their summaries are
  // updated to reflect the new value, per the Android Design
  // guidelines.
  bindPreferenceSummaryToValue(findPreference(""sync_frequency""));
  }
 
  @Override
  public boolean onOptionsItemSelected(MenuItem item) {",C,
202,"Este programa é distribuído na expectativa de ser útil, mas SEM
 * QUALQUER GARANTIA; sem mesmo a garantia implícita de
 * COMERCIALIZAÇÃO ou de ADEQUAÇÃO A QUALQUER PROPÓSITO EM
 * PARTICULAR. Consulte a Licença Pública Geral GNU para obter mais
 * detalhes.
 * Você deve ter recebido uma cópia da Licença Pública Geral GNU
 * junto com este programa; se não, escreva para Free Software
 * Foundation, Inc., 59 Temple Place",DO,
203,"code>vpc</code>).
  * </p>
  * </li>
  * <li>
  * <p>
  * <code>instance-id</code> - The ID of the instance the address is
  * associated with, if any.
  * </p>
  * </li>
  * <li>
  * <p>
  * <code>network-interface-id</code> - [EC2-VPC] The ID of the network
  * interface that the address is associated with, if any.
  * </p>
  * </li>
  * <li>
  * <p>
  * <code>network-interface-owner-id</code> - The AWS",DO,
204,"return (Criteria) this;
  }
 
  public Criteria andUsernameNotLike(String value) {
  addCriterion(""userName not like"", value, ""username"");
  return (Criteria) this;
  }
 
  public Criteria andUsernameIn(List<String> values) {
  addCriterion(""userName in"", values, ""username"");
  return (Criteria) this;
  }
 
  public Criteria andUsernameNotIn(List<String> values) {
  addCriterion(""userName not in"", values, ""username"");
  return (Criteria) this;
  }
 
  public Criteria andUsernameBetween(String value1, String value2) {
  addCriterion(""userName between"", value1, value2, ""username"");
  return (Criteria) this;
  }",C,
205,"does not transition
  } else if (t.isStartTag() && t.asStartTag().name().equals(""head"")) {
  Element head = tb.insert(t.asStartTag());
  tb.setHeadElement(head);
  tb.transition(InHead);
  } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().name(), ""head"", ""body"", ""html"", ""br""))) {
  tb.process(new Token.StartTag(""head""));
  return tb.process(t);
  } else if (t.isEndTag()) {
  tb.error(this);
  return false;
  } else {
  tb.process(",C,
206,"OrEqualTo(String value) {
  addCriterion(""id >="", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdLessThan(String value) {
  addCriterion(""id <"", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdLessThanOrEqualTo(String value) {
  addCriterion(""id <="", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdLike(String value) {
  addCriterion(""id like"", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdNotLike(String value) {
  addCriterion(""id not like"", value, ""id"");
  return (Criteria) this",C,
207,"CriteriaInternal();
  if (oredCriteria.size() == 0) {
  oredCriteria.add(criteria);
  }
  return criteria;
  }
 
  protected Criteria createCriteriaInternal() {
  Criteria criteria = new Criteria();
  return criteria;
  }
 
  public void clear() {
  oredCriteria.clear();
  orderByClause = null;
  distinct = false;
  }
 
  protected abstract static class GeneratedCriteria {
  protected List<Criterion> criteria;
 
  protected GeneratedCriteria() {
  super();
  criteria = new ArrayList<Criterion>();
  }
 
  public boolean isValid() {
  return criteria.size() > 0;
  }
 
  public List<Criterion> getAllCriteria() {
  return criteria;
  }",C,
208,".facebook.react.ReactInstanceManager;
 import com.facebook.react.bridge.ReactContext;
 import com.facebook.react.modules.network.NetworkingModule;
 import okhttp3.OkHttpClient;
 
 public class ReactNativeFlipper {
  public static void initializeFlipper(Context context, ReactInstanceManager reactInstanceManager) {
  if (FlipperUtils.shouldEnableFlipper(context)) {
  final FlipperClient client = AndroidFlipperClient.getInstance(context);
 
  client.addPlugin(new InspectorFlipperPlugin(context, DescriptorMapping.withDefaults()));
  client.addPlugin(new ReactFlipperPlugin());
  client.addPlugin(new DatabasesFlipperPlugin(",C,
209,"MockFilterChain filterChain = new MockFilterChain();
  jwtFilter.doFilter(request, response, filterChain);
  assertThat(response.getStatus()).isEqualTo(HttpStatus.OK.value());
  assertThat(SecurityContextHolder.getContext().getAuthentication()).isNull();
  }
 
  @Test
  public void testJWTFilterMissingAuthorization() throws Exception {
  MockHttpServletRequest request = new MockHttpServletRequest();
  request.setRequestURI(""/api/test"");
  MockHttpServletResponse response = new MockHttpServletResponse();
  MockFilterChain filterChain = new MockFilterChain();
  jwtFilter.doFilter(request, response, filterChain);
  assertThat(response.getStatus()).isEqualTo(HttpStatus.OK.value());
  assertThat(SecurityContextHolder.getContext().getAuthentication()).isNull();",T,
210,".setId(1L);
  managedUserVM.setLogin(DEFAULT_LOGIN);
  managedUserVM.setPassword(DEFAULT_PASSWORD);
  managedUserVM.setFirstName(DEFAULT_FIRSTNAME);
  managedUserVM.setLastName(DEFAULT_LASTNAME);
  managedUserVM.setEmail(DEFAULT_EMAIL);
  managedUserVM.setActivated(true);
  managedUserVM.setImageUrl(DEFAULT_IMAGEURL);
  managedUserVM.setLangKey(DEFAULT_LANGKEY);
  managedUserVM.setAuthorities(Collections.singleton(AuthoritiesConstants.USER));
 
  // An entity with an existing ID cannot be created, so this API call must fail
  restUserMockMvc.perform(post",C,
211,"Your modifications, or
  * for any such Derivative Works as a whole, provided Your use,
  * reproduction, and distribution of the Work otherwise complies with
  * the conditions stated in this License.
  *
  * 5. Submission of Contributions. Unless You explicitly state otherwise,
  * any Contribution intentionally submitted for inclusion in the Work
  * by You to the Licensor shall be under the terms and conditions of
  * this License, without any additional terms or conditions.
  * Notwithstanding the above, nothing herein shall supersede or modify
  * the terms of any separate license agreement you may have executed
  * with Licensor regarding such Contributions.",L,
212,"transition(SelfClosingStartTag);
  break;
  case '>':
  t.emitTagPending();
  t.transition(Data);
  break;
  case nullChar:
  t.error(this);
  t.tagPending.newAttribute();
  r.unconsume();
  t.transition(AttributeName);
  break;
  case eof:
  t.eofError(this);
  t.transition(Data);
  break;
  case '""':
  case '\'':
  case '<':
  case '=':
  t.error(this);
  t.tagPending.newAttribute();
  t.tagPending.appendAttributeName(c);
  t.transition(AttributeName);
  break;
  default: // A-Z",C,
213,"a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionOverflowButtonStyle=0x7f01000a;
  /** The name of an optional ActionProvider class to instantiate an action view
  and perform operations such as default action for that menu item.
  See {@link android.view.MenuItem#setActionProvider(android.view.ActionProvider)}
  for more info. 
  <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
 <p>This may also be a reference to a resource (",DO,
214,"IMS-related IETF, ITU-T, ETSI, and 3GPP
  * standards. Thus all Open IMS Core users have to take notice of this
  * fact and have to agree to check out carefully before installing,
  * using and extending the Open Source IMS Core System, if related
  * patents and licenses may become applicable to the intended usage
  * context. 
  *
  * You should have received a copy of the GNU General Public License
  * along with this program; if not, write to the Free Software
  * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA",L,
215,"</i>:]<i>name</i></code>"".
  */
  public static final int actionBarWidgetTheme=0x7f01000d;
  /** Default action button style. 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionButtonStyle=0x7f010016;
  /** Default ActionBar dropdown style. 
  <p>Must be a reference",DO,
216,"constraintDimensionRatio = 20;
  public static final int ConstraintLayout_Layout_layout_constraintEnd_toEndOf = 21;
  public static final int ConstraintLayout_Layout_layout_constraintEnd_toStartOf = 22;
  public static final int ConstraintLayout_Layout_layout_constraintGuide_begin = 23;
  public static final int ConstraintLayout_Layout_layout_constraintGuide_end = 24;
  public static final int ConstraintLayout_Layout_layout_constraintGuide_percent = 25;
  public static final int ConstraintLayout_Layout_layout_constraintHeight_default = 26;
  public static final int ConstraintLayout_Layout_layout_constraint",DI,
217,");
  }
 
  /**
  * If the current user has a specific authority (security role).
  * <p>
  * The name of this method comes from the isUserInRole() method in the Servlet API
  *
  * @param authority the authority to check
  * @return true if the current user has the authority, false otherwise
  */
  public static boolean isCurrentUserInRole(String authority) {
  SecurityContext securityContext = SecurityContextHolder.getContext();
  return Optional.ofNullable(securityContext.getAuthentication())
  .map(authentication -> authentication.getAuthorities().stream()
  .anyMatch(grantedAuthority -> grantedAuthority.getAuthority().equals(authority)))
  .orElse(false);",C,
218,".VISIBLE : View.GONE);
  mLoginFormView.setVisibility(show? View.GONE : View.VISIBLE);
  }
  }
 
  @Override
  public Loader<Cursor> onCreateLoader(int i, Bundle bundle) {
  return new CursorLoader(this,
  // Retrieve data rows for the device user's 'profile' contact.
  Uri.withAppendedPath(ContactsContract.Profile.CONTENT_URI,
  ContactsContract.Contacts.Data.CONTENT_DIRECTORY), ProfileQuery.PROJECTION,
 
  // Select only email addresses.
  ContactsContract.Contacts.Data.MIMETYPE +
  "" =?"", new String[]{ContactsContract.CommonDataKinds.Email
  .CONTENT_ITEM_TYPE},",C,
219,".substring(0, p);
  String fpexp = s.substring(p+1);
  boolean negative = false;
 
  for (int i=0; i<fpexp.length(); i++)
  {
  if (fpexp.charAt(i) == '-')
  {
  negative = true;
  continue;
  }
  if (fpexp.charAt(i) >= '0' && fpexp.charAt(i) <= '9') {
  sciexp = sciexp * 10 + fpexp.charAt(i) - '0';
  }
  }
 
  if (negative) {
  sciexp = -sciexp;
  }
  } else {
  // normal case
  fpdecimal =",C,
220,"02004d;
  public static final int colorAccent = 0x7f02004e;
  public static final int colorBackgroundFloating = 0x7f02004f;
  public static final int colorButtonNormal = 0x7f020050;
  public static final int colorControlActivated = 0x7f020051;
  public static final int colorControlHighlight = 0x7f020052;
  public static final int colorControlNormal = 0x7f020053;
  public static final int colorError = 0x7f02005",DI,
221,"code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionModePopupWindowStyle=0x7f010046;
  /** Drawable to use for the Select all action button in Contextual Action Bar 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static",DO,
222,"PARTICULAR PURPOSE. See the
  * GNU General Public License for more details.
  *
  * It has to be noted that this Open Source IMS Core System is not
  * intended to become or act as a product in a commercial context! Its
  * sole purpose is to provide an IMS core reference implementation for
  * IMS technology testing and IMS application prototyping for research
  * purposes, typically performed in IMS test-beds.
  *
  * Users of the Open Source IMS Core System have to be aware that IMS
  * technology may be subject of patents and licence terms, as being
  * specified within the various IMS-related IETF, ITU-T, ET",L,
223,";
  public static final int actionLayout = 0x7f02000d;
  public static final int actionMenuTextAppearance = 0x7f02000e;
  public static final int actionMenuTextColor = 0x7f02000f;
  public static final int actionModeBackground = 0x7f020010;
  public static final int actionModeCloseButtonStyle = 0x7f020011;
  public static final int actionModeCloseDrawable = 0x7f020012;
  public static final int actionModeCopyDrawable = 0x7f020013;",DI,
224,"* Open IMS Core is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  * GNU General Public License for more details.
  *
  * It has to be noted that this Open Source IMS Core System is not
  * intended to become or act as a product in a commercial context! Its
  * sole purpose is to provide an IMS core reference implementation for
  * IMS technology testing and IMS application prototyping for research
  * purposes, typically performed in IMS test-beds.
  *
  * Users of the Open Source IMS Core System have to be aware that",L,
225,"focusView.requestFocus();
  } else {
  // Show a progress spinner, and kick off a background task to
  // perform the user login attempt.
  showProgress(true);
  mAuthTask = new UserLoginTask(email, password);
  mAuthTask.execute((Void) null);
  }
  }
 
  private boolean isEmailValid(String email) {
  //TODO: Replace this with your own logic
  return email.contains(""@"");
  }
 
  private boolean isPasswordValid(String password) {
  //TODO: Replace this with your own logic
  return password.length() > 4;
  }
 
  /**
  * Shows the progress UI and hides the login form.
  */
  @",C,
226,"t.transition(Data);
  break;
  default:
  t.emit(c);
  t.transition(ScriptDataDoubleEscaped);
  }
  }
  },
  ScriptDataDoubleEscapedLessthanSign {
  void read(Tokeniser t, CharacterReader r) {
  if (r.matches('/')) {
  t.emit('/');
  t.createTempBuffer();
  t.advanceTransition(ScriptDataDoubleEscapeEnd);
  } else {
  t.transition(ScriptDataDoubleEscaped);
  }
  }
  },
  ScriptDataDoubleEscapeEnd {
  void read(Tokeniser t, CharacterReader r) {
  handleDataDoubleEscapeTag(t,r, ScriptDataEscaped,",C,
227,"attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionModeCloseButtonStyle=0x7f01003b;
  /** Drawable to use for the close action mode button 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionModeCloseDrawable=0x7f01",C,
228,"(field, (long) x);
  }
 
  /** Create an instance from a long value.
  * @param field field to which this instance belongs
  * @param x value to convert to an instance
  */
  protected Dfp(final DfpField field, long x) {
 
  // initialize as if 0
  mant = new int[field.getRadixDigits()];
  nans = FINITE;
  this.field = field;
 
  boolean isLongMin = false;
  if (x == Long.MIN_VALUE) {
  // special case for Long.MIN_VALUE (-9223372036854775808)
  // we must shift",C,
229,"20022;
  public static final int actualImageScaleType = 0x7f020023;
  public static final int actualImageUri = 0x7f020024;
  public static final int alertDialogButtonGroupStyle = 0x7f020025;
  public static final int alertDialogCenterButtons = 0x7f020026;
  public static final int alertDialogStyle = 0x7f020027;
  public static final int alertDialogTheme = 0x7f020028;
  public static final int allowStacking = 0x7f",DI,
230,"this);
  t.emit('<'); // char that got us here
  t.transition(Data);
  }
  break;
  }
  }
  },
  EndTagOpen {
  void read(Tokeniser t, CharacterReader r) {
  if (r.isEmpty()) {
  t.eofError(this);
  t.emit(""</"");
  t.transition(Data);
  } else if (r.matchesLetter()) {
  t.createTagPending(false);
  t.transition(TagName);
  } else if (r.matches('>')) {
  t.error(this);
  t.advanceTransition(Data);
  } else {
  t.error(this);
  t.advanceTransition(",C,
231,"Async
 @EnableScheduling
 public class AsyncConfiguration implements AsyncConfigurer {
 
  private final Logger log = LoggerFactory.getLogger(AsyncConfiguration.class);
 
  private final TaskExecutionProperties taskExecutionProperties;
 
  public AsyncConfiguration(TaskExecutionProperties taskExecutionProperties) {
  this.taskExecutionProperties = taskExecutionProperties;
  }
 
  @Override
  @Bean(name = ""taskExecutor"")
  public Executor getAsyncExecutor() {
  log.debug(""Creating Async Task Executor"");
  ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();
  executor.setCorePoolSize(taskExecutionProperties.getPool().getCoreSize());
  executor.setMaxPoolSize(taskExecutionProperties.getPool().getMaxSize());
  executor.setQueueCapacity(taskExecution",C,
232,"Batista da Silva
 * Maria de Fátima Sampaio Leite
 * Micaela Maria Coelho de Araújo
 * Nelson Mendonça de Carvalho
 * Newton Morais e Silva
 * Pedro Alexandre Santos da Silva Filho
 * Rafael Corrêa Lima e Silva
 * Rafael Francisco Pinto
 * Rafael Koury Monteiro
 * Rafael Palermo de Araújo
 * Raphael Veras Rossiter
 * Roberto Sobreira Barbalho",DO,
233,"it/50x50"";
  private static final String UPDATED_IMAGEURL = ""http://placehold.it/40x40"";
 
  private static final String DEFAULT_LANGKEY = ""en"";
  private static final String UPDATED_LANGKEY = ""fr"";
 
  @Autowired
  private UserRepository userRepository;
 
  @Autowired
  private MailService mailService;
 
  @Autowired
  private UserService userService;
 
  @Autowired
  private UserMapper userMapper;
 
  @Autowired
  private MappingJackson2HttpMessageConverter jacksonMessageConverter;
 
  @Autowired
  private PageableHandlerMethodArgumentResolver pageableArgumentResolver;
 
  @Autowired
  private ExceptionTranslator exceptionTranslator;
 
  @Autowired
  private EntityManager",T,
234,"0x7f040008;
  public static final int abc_slide_out_top=0x7f040009;
  public static final int design_bottom_sheet_slide_in=0x7f04000a;
  public static final int design_bottom_sheet_slide_out=0x7f04000b;
  public static final int design_fab_in=0x7f04000c;
  public static final int design_fab_out=0x7f04000d;
  public static final int design_snackbar_in=0x7f040",DI,
235,"(userTwo);
 
  userThree = new User();
  userThree.setLogin(USER_THREE_LOGIN);
  userThree.setPassword(RandomStringUtils.random(60));
  userThree.setActivated(false);
  userThree.setEmail(USER_THREE_EMAIL);
  userThree.setFirstName(""userThree"");
  userThree.setLastName(""doe"");
  userThree.setLangKey(""en"");
  userRepository.save(userThree);
  }
 
  @Test
  @Transactional
  public void assertThatUserCanBeFoundByLogin() {
  UserDetails userDetails = domainUserDetailsService.loadUserByUsername(USER_ONE_LOGIN);
  assertThat(userDetails).isNotNull();",T,
236,"ModeCloseButtonStyle=0x7f030011;
  /**
  * Drawable to use for the close action mode button
  * <p>May be a reference to another resource, in the form
  * ""<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>"" or a theme
  * attribute in the form
  * ""<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>"".
  */
  public static final int actionModeCloseDrawable=0x7f030012;
  /**
  * Drawable to use for the Copy action button in Contextual Action Bar
  * <p>May be",DO,
237,"request, response, filterChain);
  assertThat(response.getStatus()).isEqualTo(HttpStatus.OK.value());
  assertThat(SecurityContextHolder.getContext().getAuthentication().getName()).isEqualTo(""test-user"");
  assertThat(SecurityContextHolder.getContext().getAuthentication().getCredentials().toString()).isEqualTo(jwt);
  }
 
  @Test
  public void testJWTFilterInvalidToken() throws Exception {
  String jwt = ""wrong_jwt"";
  MockHttpServletRequest request = new MockHttpServletRequest();
  request.addHeader(JWTFilter.AUTHORIZATION_HEADER, ""Bearer "" + jwt);
  request.setRequestURI(""/api/test"");
  MockHttpServletResponse response = new MockHttpServletResponse();
  MockFilterChain filterChain = new MockFilterChain();
  jwtFilter.doFilter",T,
238,"The following constructors are for use by you for whatever
  * purpose you can think of. Constructing the exception in this
  * manner makes the exception behave in the normal way - i.e., as
  * documented in the class ""Throwable"". The fields ""errorToken"",
  * ""expectedTokenSequences"", and ""tokenImage"" do not contain
  * relevant information. The JavaCC generated code does not use
  * these constructors.
  */
 
  public ParseException() {
  super();
  }
 
  /** Constructor with message. */
  public ParseException(String message) {
  super(message);
  }
 
 
  /**
  * This is the last token that has been consumed successfully. If
  * this object has been created",DO,
239,"USA
  * or visit www.oracle.com if you need additional information or have any
  * questions.
  */
 
 /*
  * COPYRIGHT AND PERMISSION NOTICE
  *
  * Copyright (C) 1991-2012 Unicode, Inc. All rights reserved. Distributed under
  * the Terms of Use in http://www.unicode.org/copyright.html.
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of the Unicode data files and any associated documentation (the ""Data
  * Files"") or Unicode software and any associated documentation (the
  * ""Software"") to deal in the Data Files or Software without restriction,
  * including without limitation the",L,
240,"{
  UpdatesController.initialize(this);
  }
 
  initializeFlipper(this, getReactNativeHost().getReactInstanceManager());
  }
 
  /**
  * Loads Flipper in React Native templates. Call this in the onCreate method with something like
  * initializeFlipper(this, getReactNativeHost().getReactInstanceManager());
  *
  * @param context
  * @param reactInstanceManager
  */
  private static void initializeFlipper(
  Context context, ReactInstanceManager reactInstanceManager) {
  if (BuildConfig.DEBUG) {
  try {
  /*
  We use reflection here to pick up the class that initializes Flipper,
  since Flipper library is not available in release mode
  */
  Class<?>",C,
241,"name</i></code>"")
 containing a value of this type.
  */
  public static final int actionBarSize=0x7f01000e;
  /** Reference to a theme that should be used to inflate widgets
  and layouts destined for the action bar. Most of the time
  this will be a reference to the current theme, but when
  the action bar has a significantly different contrast
  profile than the rest of the activity the difference
  can become important. If this is set to @null the current
  theme will be used.
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name",DO,
242,"{
  returnList.add( onePossibleMove( nextRow, currentCol ) );
  }
  }
  if (this.getRow() == 6) {
  int nextNextRow = this.getRow() - 2;
  if (board.getPiece( onePossibleMove( nextRow, currentCol ) ) == null && board.getPiece( onePossibleMove( nextNextRow, currentCol ) ) == null) {
  returnList.add( onePossibleMove( nextNextRow, currentCol ) );
  }
  }
  int leftColumn = currentCol - 1;
  int rightColumn = currentCol + 1;
  if (leftColumn >= 0) {
  if (board.",C,
243,"* You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA
 */
 
 /*
 * GSAN - Sistema Integrado de Gestão de Serviços de Saneamento
 * Copyright (C) <2007> 
 * Adriano Britto Siqueira
 * Alexandre Santos Cabral
 * Ana Carolina Alves Breda
 * Ana Maria Andrade Cavalcan",L,
244,"Pending();
  t.transition(Data);
  break;
  case nullChar:
  t.error(this);
  t.tagPending.newAttribute();
  r.unconsume();
  t.transition(AttributeName);
  break;
  case eof:
  t.eofError(this);
  t.transition(Data);
  break;
  case '""':
  case '\'':
  case '<':
  case '=':
  t.error(this);
  t.tagPending.newAttribute();
  t.tagPending.appendAttributeName(c);
  t.transition(AttributeName);
  break;
  default: // A-Z, anything else
  t.tagPending.newAttribute();
  r.unconsume();",C,
245,"x7f030017;
  public static final int actionModeSelectAllDrawable = 0x7f030018;
  public static final int actionModeShareDrawable = 0x7f030019;
  public static final int actionModeSplitBackground = 0x7f03001a;
  public static final int actionModeStyle = 0x7f03001b;
  public static final int actionModeWebSearchDrawable = 0x7f03001c;
  public static final int actionOverflowButtonStyle = 0x7f03001d;
  public static final int actionOverflowMenu",DI,
246,"_box_inner_merged_animation = 0x7f01000c;
  public static final int btn_checkbox_to_checked_box_outer_merged_animation = 0x7f01000d;
  public static final int btn_checkbox_to_checked_icon_null_animation = 0x7f01000e;
  public static final int btn_checkbox_to_unchecked_box_inner_merged_animation = 0x7f01000f;
  public static final int btn_checkbox_to_unchecked_check_path_merged_animation = 0x7f010010",DI,
247,"0;
  public static final int activityChooserViewStyle = 0x7f020021;
  public static final int alertDialogButtonGroupStyle = 0x7f020022;
  public static final int alertDialogCenterButtons = 0x7f020023;
  public static final int alertDialogStyle = 0x7f020024;
  public static final int alertDialogTheme = 0x7f020025;
  public static final int allowStacking = 0x7f020026;
  public static final int alpha = 0x7f020027",DI,
248,"101a1, 0x010101a2, 0x010101a3, 0x010101a4, 0x01010201, 0x0101020b, 0x01010510, 0x01010511, 0x01010512, 0x01010513 };
  public static final int GradientColor_android_startColor = 0;
  public static final int GradientColor_android_endColor = 1;
  public static final",DI,
249,"íbulas, mientras que sus extremidades anteriores, con dos dedos, eran relativamente cortas. El género Gorgosaurus está íntimamente emparentado con Albertosaurus y, en menor proporción, con Tyrannosaurus. Los fósiles de Gorgosaurus y Albertosaurus, de hecho, son extremadamente similares, distinguiéndose sutilmente por pequeñas diferencias en los huesos del cráneo y los dientes, lo que hace que algunos expertos consideren a G. libratus como una de las especies",DO,
250,"called ""Apache"",
  * ""Apache BCEL"", nor may ""Apache"" appear in their name, without
  * prior written permission of the Apache Software Foundation.
  *
  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
  * USE, DATA, OR PROFITS; OR BUSINESS",L,
251,"exp;
  nans = d.nans;
  field = d.field;
  }
 
  /** Create an instance from a String representation.
  * @param field field to which this instance belongs
  * @param s string representation of the instance
  */
  protected Dfp(final DfpField field, final String s) {
 
  // initialize as if 0
  mant = new int[field.getRadixDigits()];
  sign = 1;
  exp = 0;
  nans = FINITE;
  this.field = field;
 
  boolean decimalFound = false;
  final int rsize = 4; // size of radix in decimal digits
  final int offset = 4;",C,
252,"1023;
 
  if (exponent == -1023) {
  // Zero or sub-normal
  if (x == 0) {
  // make sure 0 has the right sign
  if ((bits & 0x8000000000000000L)!= 0) {
  sign = -1;
  }
  return;
  }
 
  exponent++;
 
  // Normalize the subnormal number
  while ( (mantissa & 0x0010000000000000L) == 0) {
  exponent--;
  mantissa <<= 1;
  }
  mantissa &=",C,
253,"_to_checked_box_inner_merged_animation = 0x7f01000c;
  public static final int btn_checkbox_to_checked_box_outer_merged_animation = 0x7f01000d;
  public static final int btn_checkbox_to_checked_icon_null_animation = 0x7f01000e;
  public static final int btn_checkbox_to_unchecked_box_inner_merged_animation = 0x7f01000f;
  public static final int btn_checkbox_to_unchecked_check_path_merged_animation = 0x7f01",DI,
254,"mant = new int[field.getRadixDigits()];
  sign = 1;
  exp = 0;
  nans = FINITE;
  this.field = field;
 
  boolean decimalFound = false;
  final int rsize = 4; // size of radix in decimal digits
  final int offset = 4; // Starting offset into Striped
  final char[] striped = new char[getRadixDigits() * rsize + offset * 2];
 
  // Check some special cases
  if (s.equals(POS_INFINITY_STRING)) {
  sign = (byte) 1;
  nans = INFINITE;
  return;
  }
 
  if (s.equals",C,
255,"000a;
  public static final int design_bottom_sheet_slide_out=0x7f04000b;
  public static final int design_fab_in=0x7f04000c;
  public static final int design_fab_out=0x7f04000d;
  public static final int design_snackbar_in=0x7f04000e;
  public static final int design_snackbar_out=0x7f04000f;
  }
  public static final class animator {
  public static final int design_appbar_state_list_animator=0x",DI,
256,"https://lakshmidrip.github.io/DROP/credits.html
  * - Issues Catalog => https://github.com/lakshmiDRIP/DROP/issues
  * - JUnit => https://lakshmidrip.github.io/DROP/junit/index.html
  * - Jacoco => https://lakshmidrip.github.io/DROP/jacoco/index.html
  * 
  * Licensed under the Apache License, Version 2.0 (the ""License"");
  *  you may not use this file except in compliance with the License.
  * 
  * You may obtain a copy of the",L,
257,"of its
  * distribution, then any Derivative Works that You distribute must
  * include a readable copy of the attribution notices contained
  * within such NOTICE file, excluding those notices that do not
  * pertain to any part of the Derivative Works, in at least one
  * of the following places: within a NOTICE text file distributed
  * as part of the Derivative Works; within the Source form or
  * documentation, if provided along with the Derivative Works; or,
  * within a display generated by the Derivative Works, if and
  * wherever such third-party notices normally appear. The contents
  * of the NOTICE file are",L,
258,"""Bearer "" + jwt);
  request.setRequestURI(""/api/test"");
  MockHttpServletResponse response = new MockHttpServletResponse();
  MockFilterChain filterChain = new MockFilterChain();
  jwtFilter.doFilter(request, response, filterChain);
  assertThat(response.getStatus()).isEqualTo(HttpStatus.OK.value());
  assertThat(SecurityContextHolder.getContext().getAuthentication()).isNull();
  }
 
  @Test
  public void testJWTFilterMissingAuthorization() throws Exception {
  MockHttpServletRequest request = new MockHttpServletRequest();
  request.setRequestURI(""/api/test"");
  MockHttpServletResponse response = new MockHttpServletResponse();
  MockFilterChain filterChain = new MockFilterChain();
  jwtFilter.doFilter(request, response, filterChain);
  assertThat(response",T,
259,"fer FOKUS by e-mail at the following
  * addresses:
  * info@open-ims.org
  *
  * Open IMS Core is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
  * GNU General Public License for more details.
  *
  * It has to be noted that this Open Source IMS Core System is not
  * intended to become or act as a product in a commercial context! Its
  * sole purpose is to provide an IMS core reference implementation for
  * IMS technology testing and IMS application prototyping for research
  * purposes, typically",L,
260,"in the form
  * ""<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>"".
  */
  public static final int actionDropDownStyle=0x7f03000c;
  /**
  * An optional layout to be used as an action view.
  * See {@link android.view.MenuItem#setActionView(android.view.View)}
  * for more info.
  * <p>May be a reference to another resource, in the form
  * ""<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>"" or a theme
  * attribute in the form
  * ""<code>?[<i>package</",DO,
261,"License for that Work shall terminate
  * as of the date such litigation is filed.
  *
  * 4. Redistribution. You may reproduce and distribute copies of the
  * Work or Derivative Works thereof in any medium, with or without
  * modifications, and in Source or Object form, provided that You
  * meet the following conditions:
  *
  * (a) You must give any other recipients of the Work or
  * Derivative Works a copy of this License; and
  *
  * (b) You must cause any modified files to carry prominent notices
  * stating that You changed the files; and
  *
  * (c) You must",L,
262,#ERROR!,L,
263,"the form
 ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"")
 containing a value of this type.
  */
  public static final int actionBarSize=0x7f01000e;
  /** Reference to a theme that should be used to inflate widgets
  and layouts destined for the action bar. Most of the time
  this will be a reference to the current theme, but when
  the action bar has a significantly different contrast
  profile than the rest of the activity the difference
  can become important. If this is set to @null the current
  theme will be used.
  <p>Must be a reference to another resource, in",DO,
264,",-9,-9,-9,-9,-9,-9,-9,-9,-9,-9, // Decimal 192 - 204
  -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9, // Decimal 205 - 217
  -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9, // Decimal 218 - 230
  -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9, // Decimal 231 -",DI,
265,"isEqualTo(testUserEvent.getPrincipal());
  assertThat(event.getType()).isEqualTo(testUserEvent.getAuditEventType());
  assertThat(event.getData()).containsKey(""test-key"");
  assertThat(event.getData().get(""test-key"").toString()).isEqualTo(""test-value"");
  assertThat(event.getTimestamp()).isEqualTo(Date.from(testUserEvent.getAuditEventDate()));
  }
 
  @Test
  public void testFindByPrincipalNotNullAndAfterIsNull() {
  persistenceAuditEventRepository.save(testUserEvent);
  persistenceAuditEventRepository.save(testOtherUserEvent);
 
  List<AuditEvent> events = customAuditEventRepository.find(""test-user"", null);
  assertThat(events",T,
266,"isNull();
  }
 
  @Test
  public void testJWTFilterWrongScheme() throws Exception {
  UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(
  ""test-user"",
  ""test-password"",
  Collections.singletonList(new SimpleGrantedAuthority(AuthoritiesConstants.USER))
  );
  String jwt = tokenProvider.createToken(authentication, false);
  MockHttpServletRequest request = new MockHttpServletRequest();
  request.addHeader(JWTFilter.AUTHORIZATION_HEADER, ""Basic "" + jwt);
  request.setRequestURI(""/api/test"");
  MockHttpServletResponse response = new MockHttpServletResponse();
  MockFilterChain filterChain = new MockFilterChain();
  jwtFilter.doFilter(request, response, filterChain);
  assertThat(",T,
267,"else if (t.isStartTag() && t.asStartTag().name().equals(""html"")) {
  return InBody.process(t, tb); // does not transition
  } else if (t.isStartTag() && t.asStartTag().name().equals(""head"")) {
  Element head = tb.insert(t.asStartTag());
  tb.setHeadElement(head);
  tb.transition(InHead);
  } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().name(), ""head"", ""body"", ""html"", ""br""))) {
  tb.process(new Token.StartTag(""head""));
  return tb.process",C,
268,"value) {
  addCriterion(""name <"", value, ""name"");
  return (Criteria) this;
  }
 
  public Criteria andNameLessThanOrEqualTo(String value) {
  addCriterion(""name <="", value, ""name"");
  return (Criteria) this;
  }
 
  public Criteria andNameLike(String value) {
  addCriterion(""name like"", value, ""name"");
  return (Criteria) this;
  }
 
  public Criteria andNameNotLike(String value) {
  addCriterion(""name not like"", value, ""name"");
  return (Criteria) this;
  }
 
  public Criteria andNameIn(List<String> values) {
  addCriterion(""name in"", values, ""name"");
  return (Criteria) this",C,
269,"7f040008;
  public static final int abc_slide_out_top=0x7f040009;
  public static final int design_bottom_sheet_slide_in=0x7f04000a;
  public static final int design_bottom_sheet_slide_out=0x7f04000b;
  public static final int design_fab_in=0x7f04000c;
  public static final int design_fab_out=0x7f04000d;
  public static final int design_snackbar_in=0x7f04000",DI,
270,"api.client.extensions.android.http.AndroidHttp}</li>
  * <li>Java: {@link com.google.api.client.googleapis.javanet.GoogleNetHttpTransport#newTrustedTransport()}
  * </li>
  * </ul>
  * @param jsonFactory JSON factory, which may be:
  * <ul>
  * <li>Jackson: {@code com.google.api.client.json.jackson2.JacksonFactory}</li>
  * <li>Google GSON: {@code com.google.api.client.json.gson.GsonFactory}</li>
  * <li>Android Honeycomb or higher",DO,
271,"this is the default namespace
  xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
  }
 
  } else {
  xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
  }
  }
 
  private void writeQNames(javax.xml.namespace.QName[] qnames,
  javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 
  if (qnames!= null) {
  // we have to store this data until last moment since it is not possible to write any
  // namespace data after writing the charactor data",C,
272,"int buttonTintMode = 0x7f020045;
  public static final int checkboxStyle = 0x7f020047;
  public static final int checkedTextViewStyle = 0x7f020048;
  public static final int closeIcon = 0x7f020049;
  public static final int closeItemLayout = 0x7f02004a;
  public static final int collapseContentDescription = 0x7f02004b;
  public static final int collapseIcon = 0x7f02004c;
  public static final int color = 0x",DI,
273,"* This is a reference to the ""tokenImage"" array of the generated
  * parser within which the parse error occurred. This array is
  * defined in the generated...Constants interface.
  */
  public String[] tokenImage;
 
  /**
  * It uses ""currentToken"" and ""expectedTokenSequences"" to generate a parse
  * error message and returns it. If this object has been created
  * due to a parse error, and you do not catch it (it gets thrown
  * from the parser) the correct error message
  * gets displayed.
  */
  private static String initialise(Token currentToken,
  int[][] expectedTokenSequences,
  String[] tokenImage) {
  String eol = System.",DO,
274,"9;
  public static final int[] GradientColor = { 0x101019d, 0x101019e, 0x10101a1, 0x10101a2, 0x10101a3, 0x10101a4, 0x1010201, 0x101020b, 0x1010510, 0x1010511, 0x1010512, 0x1010513 };
  public static final int",DI,
275,"t.error(this);
  t.emit(replacementChar);
  t.transition(ScriptDataDoubleEscaped);
  break;
  case eof:
  t.eofError(this);
  t.transition(Data);
  break;
  default:
  t.emit(c);
  t.transition(ScriptDataDoubleEscaped);
  }
  }
  },
  ScriptDataDoubleEscapedDashDash {
  void read(Tokeniser t, CharacterReader r) {
  char c = r.consume();
  switch (c) {
  case '-':
  t.emit(c);
  break;
  case '<':
  t.emit(c);
  t.transition(ScriptDataDoubleEscapedLesst",C,
276,"NonNull int[] grantResults) {
  if (requestCode == REQUEST_READ_CONTACTS) {
  if (grantResults.length == 1 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
  populateAutoComplete();
  }
  }
  }
 
 
  /**
  * Attempts to sign in or register the account specified by the login form.
  * If there are form errors (invalid email, missing fields, etc.), the
  * errors are presented and no actual login attempt is made.
  */
  private void attemptLogin() {
  if (mAuthTask!= null) {
  return;
  }
 
  // Reset errors.
  mEmailView.setError(null);
  mPasswordView.",C,
277,">#<i>rrggbb</i></code>"", or ""<code>#<i>aarrggbb</i></code>"".
  */
  public static final int actionMenuTextColor=0x7f010012;
  /** Background drawable to use for action mode UI 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionModeBackground=0x7f01003c",DO,
278,"lakshmiDRIP/DROP/tree/master/Docs/Internal
  * - Release Versions => https://lakshmidrip.github.io/DROP/version.html
  * - Community Credits => https://lakshmidrip.github.io/DROP/credits.html
  * - Issues Catalog => https://github.com/lakshmiDRIP/DROP/issues
  * 
  * Licensed under the Apache License, Version 2.0 (the ""License"");
  *  you may not use this file except in compliance with the License.
  * 
  * You may obtain a copy of the License at
  *",L,
279,"info.getClassName());
  break;
  }
  }
  } catch (ClassNotFoundException ex) {
  java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
  } catch (InstantiationException ex) {
  java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
  } catch (IllegalAccessException ex) {
  java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
  } catch (javax.swing.UnsupportedLookAndFeel",C,
280,"Test
  public void testAddEventWithNullData() {
  Map<String, Object> data = new HashMap<>();
  data.put(""test-key"", null);
  AuditEvent event = new AuditEvent(""test-user"", ""test-type"", data);
  customAuditEventRepository.add(event);
  List<PersistentAuditEvent> persistentAuditEvents = persistenceAuditEventRepository.findAll();
  assertThat(persistentAuditEvents).hasSize(1);
  PersistentAuditEvent persistentAuditEvent = persistentAuditEvents.get(0);
  assertThat(persistentAuditEvent.getData().get(""test-key"")).isEqualTo(""null"");
  }
 
  @Test
  public void addAuditEventWithAnonymousUser() {
  Map<String",T,
281,"b) this copyright and permission notice appear in associated 
  * documentation, and
  * (c) there is clear notice in each modified Data File or in the Software
  * as well as in the documentation associated with the Data File(s) or
  * Software that the data or software has been modified.
  *
  * THE DATA FILES AND SOFTWARE ARE PROVIDED ""AS IS"", WITHOUT WARRANTY OF
  * ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
  * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  * NONINFRINGEMENT OF THIRD PARTY RIGHTS.
  * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR HOLDERS INCLUDED IN THIS
  * NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL INDIRECT OR CONSEQUENTIAL",L,
282,"0; i--) {
  Element el = stack.get(i);
  if (StringUtil.in(el.nodeName(), ""dd"", ""dt"")) {
  tb.process(new Token.EndTag(el.nodeName()));
  break;
  }
  if (tb.isSpecial(el) &&!StringUtil.in(el.nodeName(), ""address"", ""div"", ""p""))
  break;
  }
  if (tb.inButtonScope(""p"")) {
  tb.process(new Token.EndTag(""p""));
  }
  tb.insert(startTag);
  } else if (name.equals(""plaintext"")) {
  if (tb.inButtonScope(""p"")) {
  tb.process",C,
283,"todos los tiranosáuridos conocidos, Gorgosaurus fue un bípedo depredador que en su madurez pesaba más de una tonelada y medía nueve metros de largo. Mostraba docenas de afilados dientes alineados en sus mandíbulas, mientras que sus extremidades anteriores, con dos dedos, eran relativamente cortas. El género Gorgosaurus está íntimamente emparentado con Albertosaurus y, en menor proporción, con Tyrannosaurus. Los fósiles de Gorgosaurus y Al",DO,
284,"public static final int ConstraintLayout_Layout_layout_constraintHorizontal_chainStyle = 31;
  public static final int ConstraintLayout_Layout_layout_constraintHorizontal_weight = 32;
  public static final int ConstraintLayout_Layout_layout_constraintLeft_creator = 33;
  public static final int ConstraintLayout_Layout_layout_constraintLeft_toLeftOf = 34;
  public static final int ConstraintLayout_Layout_layout_constraintLeft_toRightOf = 35;
  public static final int ConstraintLayout_Layout_layout_constraintRight_creator = 36;
  public static final int ConstraintLayout_Layout_layout_constraintRight_toLeftOf =",DI,
285,"and Option Pricing, Interest Rate Dynamics and Option Pricing, LMM
  *  Extensions/Calibrations/Greeks, Algorithmic Differentiation, and Asset Backed Models and Analytics.
  * 
  * - DRIP Asset Allocation: Library for model libraries for MPT framework, Black Litterman Strategy
  *  Incorporator, Holdings Constraint, and Transaction Costs.
  * 
  * - DRIP Numerical Optimizer: Library for Numerical Optimization and Spline Functionality.
  * 
  * - DRIP Statistical Learning: Library for Statistical Evaluation and Machine Learning.
  * 
  * Licensed under the Apache License, Version 2.0 (",DO,
286,"value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdNotEqualTo(Integer value) {
  addCriterion(""id <>"", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdGreaterThan(Integer value) {
  addCriterion(""id >"", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdGreaterThanOrEqualTo(Integer value) {
  addCriterion(""id >="", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdLessThan(Integer value) {
  addCriterion(""id <"", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdLessThanOrEqualTo(Integer value",C,
287,"List<String> emails = new ArrayList<>();
  cursor.moveToFirst();
  while (!cursor.isAfterLast()) {
  emails.add(cursor.getString(ProfileQuery.ADDRESS));
  cursor.moveToNext();
  }
 
  addEmailsToAutoComplete(emails);
  }
 
  @Override
  public void onLoaderReset(Loader<Cursor> cursorLoader) {
 
  }
 
  private void addEmailsToAutoComplete(List<String> emailAddressCollection) {
  //Create adapter to tell the AutoCompleteTextView what to show in its dropdown list.
  ArrayAdapter<String> adapter =
  new ArrayAdapter<>(LoginActivity.this,
  android.R.layout.simple_dropdown_item_1line, email",C,
288,"public Criteria andNameLessThan(String value) {
  addCriterion(""name <"", value, ""name"");
  return (Criteria) this;
  }
 
  public Criteria andNameLessThanOrEqualTo(String value) {
  addCriterion(""name <="", value, ""name"");
  return (Criteria) this;
  }
 
  public Criteria andNameLike(String value) {
  addCriterion(""name like"", value, ""name"");
  return (Criteria) this;
  }
 
  public Criteria andNameNotLike(String value) {
  addCriterion(""name not like"", value, ""name"");
  return (Criteria) this;
  }
 
  public Criteria andNameIn(List<String> values) {
  addCriterion(""name in"", values, ""name",C,
289,"public static final int actionModePasteDrawable = 0x7f030016;
  public static final int actionModePopupWindowStyle = 0x7f030017;
  public static final int actionModeSelectAllDrawable = 0x7f030018;
  public static final int actionModeShareDrawable = 0x7f030019;
  public static final int actionModeSplitBackground = 0x7f03001a;
  public static final int actionModeStyle = 0x7f03001b;
  public static final int actionModeWebSearchDrawable = 0x7f03",DI,
290,"public Criteria andCreatedLessThan(Date value) {
  addCriterion(""created <"", value, ""created"");
  return (Criteria) this;
  }
 
  public Criteria andCreatedLessThanOrEqualTo(Date value) {
  addCriterion(""created <="", value, ""created"");
  return (Criteria) this;
  }
 
  public Criteria andCreatedIn(List<Date> values) {
  addCriterion(""created in"", values, ""created"");
  return (Criteria) this;
  }
 
  public Criteria andCreatedNotIn(List<Date> values) {
  addCriterion(""created not in"", values, ""created"");
  return (Criteria) this;
  }
 
  public Criteria andCreatedBetween(Date value1, Date value2) {
  addCriterion",C,
291,"SCREEN = 0x2;
 
  /**
  * When this flag is set, {@link #show()} and {@link #hide()} will toggle
  * the visibility of the navigation bar, if it's present on the device and
  * the device allows hiding it. In cases where the navigation bar is present
  * but cannot be hidden, show and hide will toggle low profile mode.
  */
  public static final int FLAG_HIDE_NAVIGATION = FLAG_FULLSCREEN | 0x4;
 
  /**
  * The activity associated with this UI hider object.
  */
  protected Activity mActivity;
 
  /**
  * The view on which {@link View#setSystemUiVisibility(int)} will be called.",DO,
292,".asEndTag().name(), ""head"", ""body"", ""html"", ""br""))) {
  tb.process(new Token.StartTag(""head""));
  return tb.process(t);
  } else if (t.isEndTag()) {
  tb.error(this);
  return false;
  } else {
  tb.process(new Token.StartTag(""head""));
  return tb.process(t);
  }
  return true;
  }
  },
  InHead {
  boolean process(Token t, HtmlTreeBuilder tb) {
  if (isWhitespace(t)) {
  tb.insert(t.asCharacter());
  return true;
  }
  switch (t.type) {",C,
293,"ServletRegistration.Dynamic metricsAdminServlet =
  servletContext.addServlet(""metricsServlet"", new MetricsServlet());
 
  metricsAdminServlet.addMapping(""/management/metrics/*"");
  metricsAdminServlet.setAsyncSupported(true);
  metricsAdminServlet.setLoadOnStartup(2);
  }
 
  @Bean
  public CorsFilter corsFilter() {
  UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
  CorsConfiguration config = jHipsterProperties.getCors();
  if (config.getAllowedOrigins()!= null &&!config.getAllowedOrigins().isEmpty()) {
  log.debug(""Registering CORS filter"");
  source.registerCorsConfiguration(""/api/**"", config);
  source",C,
294,"or promote products
  * derived from this software without prior written permission. For
  * written permission, please contact apache@apache.org.
  *
  * 5. Products derived from this software may not be called ""Apache"",
  * ""Apache BCEL"", nor may ""Apache"" appear in their name, without
  * prior written permission of the Apache Software Foundation.
  *
  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
  * ITS CONTRIBUTORS BE LIABLE FOR ANY",DO,
295,"void read(Tokeniser t, CharacterReader r) {
  char c = r.consume();
  switch (c) {
  case '-':
  t.emit(c);
  break;
  case '<':
  t.emit(c);
  t.transition(ScriptDataDoubleEscapedLessthanSign);
  break;
  case '>':
  t.emit(c);
  t.transition(ScriptData);
  break;
  case nullChar:
  t.error(this);
  t.emit(replacementChar);
  t.transition(ScriptDataDoubleEscaped);
  break;
  case eof:
  t.eofError(this);
  t.transition(Data);
  break;
  default:",C,
296,"value) {
  addCriterion(""status >="", value, ""status"");
  return (Criteria) this;
  }
 
  public Criteria andStatusLessThan(Integer value) {
  addCriterion(""status <"", value, ""status"");
  return (Criteria) this;
  }
 
  public Criteria andStatusLessThanOrEqualTo(Integer value) {
  addCriterion(""status <="", value, ""status"");
  return (Criteria) this;
  }
 
  public Criteria andStatusIn(List<Integer> values) {
  addCriterion(""status in"", values, ""status"");
  return (Criteria) this;
  }
 
  public Criteria andStatusNotIn(List<Integer> values) {
  addCriterion(""status not in"", values, ""status"");
  return (Criteria",C,
297,"b;
  public static final int notification_action_text_size = 0x7f05005c;
  public static final int notification_big_circle_margin = 0x7f05005d;
  public static final int notification_content_margin_start = 0x7f05005e;
  public static final int notification_large_icon_height = 0x7f05005f;
  public static final int notification_large_icon_width = 0x7f050060;
  public static final int notification_main_column_padding_top = 0x7f050",DI,
298,"05c;
  public static final int contentInsetEnd = 0x7f02005d;
  public static final int contentInsetEndWithActions = 0x7f02005e;
  public static final int contentInsetLeft = 0x7f02005f;
  public static final int contentInsetRight = 0x7f020060;
  public static final int contentInsetStart = 0x7f020061;
  public static final int contentInsetStartWithNavigation = 0x7f020062;
  public static final int controlBackground = 0x7f020",DI,
299,"Lima e Silva
 * Rafael Francisco Pinto
 * Rafael Koury Monteiro
 * Rafael Palermo de Araújo
 * Raphael Veras Rossiter
 * Roberto Sobreira Barbalho
 * Rodrigo Avellar Silveira
 * Rosana Carvalho Barbosa
 * Sávio Luiz de Andrade Cavalcante
 * Tai Mu Shih
 * Thiago Augusto Souza do Nascimento
 * Tiago Moreno Rodrigues
 * Vivianne Barbosa Sousa
 *",DO,
300,"Criteria) this;
  }
 
  public Criteria andIdNotEqualTo(Long value) {
  addCriterion(""id <>"", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdGreaterThan(Long value) {
  addCriterion(""id >"", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdGreaterThanOrEqualTo(Long value) {
  addCriterion(""id >="", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdLessThan(Long value) {
  addCriterion(""id <"", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdLessThanOrEqualTo(Long value) {
  addCriterion(""id <="",",C,
301,"OR CONSEQUENTIAL DAMAGES, INCLUDING LOST PROFITS,
 // ARISING OUT OF THE USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF
 // THE UNIVERSITY OF CALIFORNIA HAS BEEN ADVISED OF THE POSSIBILITY OF
 // SUCH DAMAGE. THE UNIVERSITY OF CALIFORNIA SPECIFICALLY DISCLAIMS ANY
 // WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 // MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE SOFTWARE
 // PROVIDED HEREUNDER IS ON AN ""AS IS"" BASIS, AND THE UNIVERSITY OF
 // CALIFORNIA HAS NO OBLIGATIONS TO PROVIDE MAINTENANCE, SUPPORT,",L,
302,"SYSTEM_UI_FLAG_LAYOUT_STABLE
  | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY
  | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
  | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION);
  }
  };
  private View mControlsView;
  private final Runnable mShowPart2Runnable = new Runnable() {
  @Override
  public void run() {
  // Delayed display of UI elements
  ActionBar actionBar = getSupportActionBar();
  if (actionBar!= null) {
  actionBar.show();
  }
  mControlsView.setVisibility(View.VISIBLE);
  }
  };
  private boolean mVisible;",C,
303,"textLessthanSign);
  break;
  case nullChar:
  t.error(this);
  r.advance();
  t.emit(replacementChar);
  break;
  case eof:
  t.emit(new Token.EOF());
  break;
  default:
  String data = r.consumeToAny('<', nullChar);
  t.emit(data);
  break;
  }
  }
  },
  ScriptData {
  void read(Tokeniser t, CharacterReader r) {
  switch (r.current()) {
  case '<':
  t.advanceTransition(ScriptDataLessthanSign);
  break;
  case nullChar:
  t.error(this);
  r.advance();",C,
304,"}
 
  @Override
  protected String getJSMainModuleName() {
  return ""index"";
  }
  };
 
  @Override
  public ReactNativeHost getReactNativeHost() {
  return mReactNativeHost;
  }
 
  @Override
  public void onCreate() {
  super.onCreate();
  SoLoader.init(this, /* native exopackage */ false);
  initializeFlipper(this, getReactNativeHost().getReactInstanceManager());
  }
 
  /**
  * Loads Flipper in React Native templates. Call this in the onCreate method with something like
  * initializeFlipper(this, getReactNativeHost().getReactInstanceManager());
  *
  * @param context
  * @param reactInstanceManager
  */",C,
305,", in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionModeCutDrawable=0x7f01003f;
  /** Drawable to use for the Find action button in WebView selection action modes 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>",DO,
306,#ERROR!,C,
307,"break;
  case '?':
  t.advanceTransition(BogusComment);
  break;
  default:
  if (r.matchesLetter()) {
  t.createTagPending(true);
  t.transition(TagName);
  } else {
  t.error(this);
  t.emit('<'); // char that got us here
  t.transition(Data);
  }
  break;
  }
  }
  },
  EndTagOpen {
  void read(Tokeniser t, CharacterReader r) {
  if (r.isEmpty()) {
  t.eofError(this);
  t.emit(""</"");
  t.transition(Data);
  } else if (r.matchesLetter()) {
  t.",C,
308,"MS core reference implementation for
  * IMS technology testing and IMS application prototyping for research
  * purposes, typically performed in IMS test-beds.
  *
  * Users of the Open Source IMS Core System have to be aware that IMS
  * technology may be subject of patents and licence terms, as being
  * specified within the various IMS-related IETF, ITU-T, ETSI, and 3GPP
  * standards. Thus all Open IMS Core users have to take notice of this
  * fact and have to agree to check out carefully before installing,
  * using and extending the Open Source IMS Core System, if related
  * patents and licenses may",DO,
309,"eof:
  t.eofError(this);
  t.transition(Data);
  break;
  default:
  String data = r.consumeToAny('-', '<', nullChar);
  t.emit(data);
  }
  }
  },
  ScriptDataDoubleEscapedDash {
  void read(Tokeniser t, CharacterReader r) {
  char c = r.consume();
  switch (c) {
  case '-':
  t.emit(c);
  t.transition(ScriptDataDoubleEscapedDashDash);
  break;
  case '<':
  t.emit(c);
  t.transition(ScriptDataDoubleEscapedLessthanSign);
  break;
  case nullChar:
  t.",C,
310,"numbers. This
  * class does not contain any such entities. The most significant radix
  * 10000 digit is always non-zero. Instead, we support ""gradual underflow""
  * by raising the underflow flag for numbers less with exponent less than
  * expMin, but don't flush to zero until the exponent reaches MIN_EXP-digits.
  * Thus the smallest number we can represent would be:
  * 1E(-(MIN_EXP-digits-1)*4), eg, for digits=5, MIN_EXP=-32767, that would
  * be 1e-131092.</",DO,
311,"(context);
  appender.addFilter(metricsFilter);
  appender.start();
  }
  }
  }
  }
 
  /**
  * Logback configuration is achieved by configuration file and API.
  * When configuration file change is detected, the configuration is reset.
  * This listener ensures that the programmatic configuration is also re-applied after reset.
  */
  class LogbackLoggerContextListener extends ContextAwareBase implements LoggerContextListener {
 
  @Override
  public boolean isResetResistant() {
  return true;
  }
 
  @Override
  public void onStart(LoggerContext context) {
  addLogstashAppender(context);
  }
 
  @Override
  public void onReset(LoggerContext context) {
  addLog",C,
312,"Object value2, String property) {
  if (value1 == null || value2 == null) {
  throw new RuntimeException(""Between values for "" + property + "" cannot be null"");
  }
  criteria.add(new Criterion(condition, value1, value2));
  }
 
  public Criteria andIdIsNull() {
  addCriterion(""id is null"");
  return (Criteria) this;
  }
 
  public Criteria andIdIsNotNull() {
  addCriterion(""id is not null"");
  return (Criteria) this;
  }
 
  public Criteria andIdEqualTo(Long value) {
  addCriterion(""id ="", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdNotEqualTo(Long value",C,
313,"ConstraintLayout_Layout_layout_constrainedWidth = 11;
  public static final int ConstraintLayout_Layout_layout_constraintBaseline_creator = 12;
  public static final int ConstraintLayout_Layout_layout_constraintBaseline_toBaselineOf = 13;
  public static final int ConstraintLayout_Layout_layout_constraintBottom_creator = 14;
  public static final int ConstraintLayout_Layout_layout_constraintBottom_toBottomOf = 15;
  public static final int ConstraintLayout_Layout_layout_constraintBottom_toTopOf = 16;
  public static final int ConstraintLayout_Layout_layout_constraintCircle = 17;
  public static final int Constraint",DI,
314,"();
  }
  if (recordType == RECORD_TYPE.DELETE) {
  this.systemInfo.setActiveStatus(0);
  } else {
  this.systemInfo.setActiveStatus(1);
  }
  }
 
  @JsonIgnore
  public void setSystemInformation(Integer activeStatus) {
  this.systemInfo.setActiveStatus(activeStatus);
  }
 
  @JsonIgnore
  public String getSystemInformation() {
  String systemInfo = """";
  if (this.systemInfo!= null) {
  systemInfo = systemInfo.toString();
  }
  return systemInfo;
  }
 
  @Override
  @JsonIgnore
  public void setSystemTxnCode(Integer transactionAccessCode) {
  if (systemInfo == null)",C,
315,"CloseDrawable = 0x7f030012;
  public static final int actionModeCopyDrawable = 0x7f030013;
  public static final int actionModeCutDrawable = 0x7f030014;
  public static final int actionModeFindDrawable = 0x7f030015;
  public static final int actionModePasteDrawable = 0x7f030016;
  public static final int actionModePopupWindowStyle = 0x7f030017;
  public static final int actionModeSelectAllDrawable = 0x7f030018;",DI,
316,"value));
  }
 
  protected void addCriterion(String condition, Object value1, Object value2, String property) {
  if (value1 == null || value2 == null) {
  throw new RuntimeException(""Between values for "" + property + "" cannot be null"");
  }
  criteria.add(new Criterion(condition, value1, value2));
  }
 
  public Criteria andIdIsNull() {
  addCriterion(""id is null"");
  return (Criteria) this;
  }
 
  public Criteria andIdIsNotNull() {
  addCriterion(""id is not null"");
  return (Criteria) this;
  }
 
  public Criteria andIdEqualTo(Long value) {
  addCriterion(""id ="", value, ""id"");
  return (",C,
317,"al Entity
  * exercising permissions granted by this License.
  *
  * ""Source"" form shall mean the preferred form for making modifications,
  * including but not limited to software source code, documentation
  * source, and configuration files.
  *
  * ""Object"" form shall mean any form resulting from mechanical
  * transformation or translation of a Source form, including but
  * not limited to compiled object code, generated documentation,
  * and conversions to other media types.
  *
  * ""Work"" shall mean the work of authorship, whether in Source or
  * Object form, made available under the License, as indicated by a
  * copyright notice that is included",DO,
318,"t.advanceTransition(ScriptDataEscapedLessthanSign);
  break;
  case nullChar:
  t.error(this);
  r.advance();
  t.emit(replacementChar);
  break;
  default:
  String data = r.consumeToAny('-', '<', nullChar);
  t.emit(data);
  }
  }
  },
  ScriptDataEscapedDash {
  void read(Tokeniser t, CharacterReader r) {
  if (r.isEmpty()) {
  t.eofError(this);
  t.transition(Data);
  return;
  }
 
  char c = r.consume();
  switch (c) {
  case '-':
  t.emit(c);",C,
319,"tone = RingtoneManager.getRingtone(
  preference.getContext(), Uri.parse(stringValue));
 
  if (ringtone == null) {
  // Clear the summary if there was a lookup error.
  preference.setSummary(null);
  } else {
  // Set the summary to reflect the new ringtone display
  // name.
  String name = ringtone.getTitle(preference.getContext());
  preference.setSummary(name);
  }
  }
 
  } else {
  // For all other preferences, set the summary to the value's
  // simple string representation.
  preference.setSummary(stringValue);
  }
  return true;
  }
  };
 
  /**
  * Helper method to determine if the device has an",C,
320,"package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionModeSplitBackground=0x7f01003d;
  /** <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionModeStyle=0x7f01003a;
  /** Drawable to use for the Web Search action button in WebView selection action",DO,
321,"* 7. Disclaimer of Warranty. Unless required by applicable law or
  * agreed to in writing, Licensor provides the Work (and each
  * Contributor provides its Contributions) on an ""AS IS"" BASIS,
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
  * implied, including, without limitation, any warranties or conditions
  * of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
  * PARTICULAR PURPOSE. You are solely responsible for determining the
  * appropriateness of using or redistributing the Work and assume any
  * risks associated with Your exercise of permissions under this License.
  *
  * 8.",L,
322,"public static final int actionBarTheme = 0x7f030009;
  public static final int actionBarWidgetTheme = 0x7f03000a;
  public static final int actionButtonStyle = 0x7f03000b;
  public static final int actionDropDownStyle = 0x7f03000c;
  public static final int actionLayout = 0x7f03000d;
  public static final int actionMenuTextAppearance = 0x7f03000e;
  public static final int actionMenuTextColor = 0x7f03000f;
  public static final",DI,
323,"Como todos los tiranosáuridos conocidos, Gorgosaurus fue un bípedo depredador que en su madurez pesaba más de una tonelada y medía nueve metros de largo. Mostraba docenas de afilados dientes alineados en sus mandíbulas, mientras que sus extremidades anteriores, con dos dedos, eran relativamente cortas. El género Gorgosaurus está íntimamente emparentado con Albertosaurus y, en menor proporción, con Tyrannosaurus. Los fósiles de Gorgosaurus",DO,
324,"// scientific notation
  fpdecimal = s.substring(0, p);
  String fpexp = s.substring(p+1);
  boolean negative = false;
 
  for (int i=0; i<fpexp.length(); i++)
  {
  if (fpexp.charAt(i) == '-')
  {
  negative = true;
  continue;
  }
  if (fpexp.charAt(i) >= '0' && fpexp.charAt(i) <= '9') {
  sciexp = sciexp * 10 + fpexp.charAt(i) - '0';
  }
  }
 
  if (negative) {
  sciexp = -sciexp;
  }
  } else {",C,
325,"sBindPreferenceSummaryToValueListener);
 
  // Trigger the listener immediately with the preference's
  // current value.
  sBindPreferenceSummaryToValueListener.onPreferenceChange(preference,
  PreferenceManager
  .getDefaultSharedPreferences(preference.getContext())
  .getString(preference.getKey(), """"));
  }
 
  @Override
  protected void onCreate(Bundle savedInstanceState) {
  super.onCreate(savedInstanceState);
  setupActionBar();
  }
 
  /**
  * Set up the {@link android.app.ActionBar}, if the API is available.
  */
  private void setupActionBar() {
  ActionBar actionBar = getSupportActionBar();
  if (actionBar!= null) {
  // Show the Up button in the action bar.
  actionBar.",C,
326,".minusSeconds(10000));
 
  testOtherUserEvent = new PersistentAuditEvent();
  testOtherUserEvent.setPrincipal(""other-test-user"");
  testOtherUserEvent.setAuditEventType(""test-type"");
  testOtherUserEvent.setAuditEventDate(oneHourAgo);
  }
 
  @Test
  public void testFindAfter() {
  persistenceAuditEventRepository.save(testUserEvent);
  persistenceAuditEventRepository.save(testOldUserEvent);
 
  List<AuditEvent> events =
  customAuditEventRepository.find(Date.from(testUserEvent.getAuditEventDate().minusSeconds(3600)));
  assertThat(events).hasSize(1);",T,
327,"1;
  public static final int alertDialogButtonGroupStyle = 0x7f020022;
  public static final int alertDialogCenterButtons = 0x7f020023;
  public static final int alertDialogStyle = 0x7f020024;
  public static final int alertDialogTheme = 0x7f020025;
  public static final int allowStacking = 0x7f020026;
  public static final int alpha = 0x7f020027;
  public static final int alphabeticModifiers = 0x7f020028;",DI,
328,"Host getReactNativeHost() {
  return mReactNativeHost;
  }
 
  @Override
  public void onCreate() {
  super.onCreate();
  SoLoader.init(this, /* native exopackage */ false);
  initializeFlipper(this, getReactNativeHost().getReactInstanceManager());
  }
 
  /**
  * Loads Flipper in React Native templates. Call this in the onCreate method with something like
  * initializeFlipper(this, getReactNativeHost().getReactInstanceManager());
  *
  * @param context
  * @param reactInstanceManager
  */
  private static void initializeFlipper(
  Context context, ReactInstanceManager reactInstanceManager) {
  if (BuildConfig.DEBUG) {",C,
329,"for (int i = 0; i < maxSize; i++) {
  if (i!= 0) retval += "" "";
  if (tok.kind == 0) {
  retval += tokenImage[0];
  break;
  }
  retval += "" "" + tokenImage[tok.kind];
  retval += "" \"""";
  retval += add_escapes(tok.image);
  retval += "" \"""";
  tok = tok.next;
  }
  retval += ""\"" at line "" + currentToken.next.beginLine + "", column "" + currentToken.next.beginColumn;
  retval += ""."" + eol;
  if (expectedTokenSequences.length == 1) {
  retval +=",C,
330,#ERROR!,C,
331,"ParseException(String message) {
  super(message);
  }
 
 
  /**
  * This is the last token that has been consumed successfully. If
  * this object has been created due to a parse error, the token
  * followng this token will (therefore) be the first error token.
  */
  public Token currentToken;
 
  /**
  * Each entry in this array is an array of integers. Each array
  * of integers represents a sequence of tokens (by their ordinal
  * values) that is expected at this point of the parse.
  */
  public int[][] expectedTokenSequences;
 
  /**
  * This is a reference to the ""tokenImage"" array of the generated
  * parser within which the parse",DO,
332,").getViolations())
  .with(MESSAGE_KEY, ErrorConstants.ERR_VALIDATION);
  } else {
  builder
  .withCause(((DefaultProblem) problem).getCause())
  .withDetail(problem.getDetail())
  .withInstance(problem.getInstance());
  problem.getParameters().forEach(builder::with);
  if (!problem.getParameters().containsKey(MESSAGE_KEY) && problem.getStatus()!= null) {
  builder.with(MESSAGE_KEY, ""error.http."" + problem.getStatus().getStatusCode());
  }
  }
  return new ResponseEntity<>(builder.build(), entity.getHeaders(), entity.getStatusCode());
  }
 
  @Override
  public ResponseEntity<Problem> handleMethodArgumentNotValid(",C,
333,"rounding is a greater loss. So, if you
  * really need 12 decimal digits, better use 4 base 10000 digits
  * there can be one partially filled.</li>
  * </ol></p>
  *
  * <p>Numbers are represented in the following form:
  * <pre>
  * n = sign &times; mant &times; (radix)<sup>exp</sup>;</p>
  * </pre>
  * where sign is &plusmn;1, mantissa represents a fractional number between
  * zero and one. mant[0] is the least significant digit",DO,
334,"Test
  public void addAuditEventWithAnonymousUser() {
  Map<String, Object> data = new HashMap<>();
  data.put(""test-key"", ""test-value"");
  AuditEvent event = new AuditEvent(Constants.ANONYMOUS_USER, ""test-type"", data);
  customAuditEventRepository.add(event);
  List<PersistentAuditEvent> persistentAuditEvents = persistenceAuditEventRepository.findAll();
  assertThat(persistentAuditEvents).hasSize(0);
  }
 
  @Test
  public void addAuditEventWithAuthorizationFailureType() {
  Map<String, Object> data = new HashMap<>();
  data.put(""test-key"", ""test-value"");
  AuditEvent event",T,
335,"sign = (byte) 1;
  nans = INFINITE;
  return;
  }
 
  if (s.equals(NEG_INFINITY_STRING)) {
  sign = (byte) -1;
  nans = INFINITE;
  return;
  }
 
  if (s.equals(NAN_STRING)) {
  sign = (byte) 1;
  nans = QNAN;
  return;
  }
 
  // Check for scientific notation
  int p = s.indexOf(""e"");
  if (p == -1) { // try upper case?
  p = s.indexOf(""E"");
  }
 
  final String fpdecimal;
  int sciexp = 0;
  if (p",C,
336,"008;
  public static final int abc_slide_out_top = 0x7f010009;
  public static final int abc_tooltip_enter = 0x7f01000a;
  public static final int abc_tooltip_exit = 0x7f01000b;
  public static final int btn_checkbox_to_checked_box_inner_merged_animation = 0x7f01000c;
  public static final int btn_checkbox_to_checked_box_outer_merged_animation = 0x7f01000d;
  public static final int btn_checkbox_",DI,
337,"x7f020058;
  public static final int contentDescription = 0x7f02005c;
  public static final int contentInsetEnd = 0x7f02005d;
  public static final int contentInsetEndWithActions = 0x7f02005e;
  public static final int contentInsetLeft = 0x7f02005f;
  public static final int contentInsetRight = 0x7f020060;
  public static final int contentInsetStart = 0x7f020061;
  public static final int contentInsetStartWithNavigation = 0",DI,
338,"retain, in the Source form of any Derivative Works
  * that You distribute, all copyright, patent, trademark, and
  * attribution notices from the Source form of the Work,
  * excluding those notices that do not pertain to any part of
  * the Derivative Works; and
  *
  * (d) If the Work includes a ""NOTICE"" text file as part of its
  * distribution, then any Derivative Works that You distribute must
  * include a readable copy of the attribution notices contained
  * within such NOTICE file, excluding those notices that do not
  * pertain to any part of the Derivative Works, in at least",L,
339,"startTag);
  } else {
  tb.reconstructFormattingElements();
  tb.insert(startTag);
  tb.framesetOk(false);
  }
  } else if (name.equals(""a"")) {
  if (tb.getActiveFormattingElement(""a"")!= null) {
  tb.error(this);
  tb.process(new Token.EndTag(""a""));
 
  // still on stack?
  Element remainingA = tb.getFromStack(""a"");
  if (remainingA!= null) {
  tb.removeFromActiveFormattingElements(remainingA);
  tb.removeFromStack(remainingA);
  }
  }
  tb.reconstructFormattingElements();
  Element a = tb.insert",C,
340,"null;
  Object page = this;
  JspWriter _jspx_out = null;
  PageContext _jspx_page_context = null;
 
  try {
  response.setContentType(""text/html;charset=UTF-8"");
  pageContext = _jspxFactory.getPageContext(this, request, response,
   null, true, 8192, true);
  _jspx_page_context = pageContext;
  application = pageContext.getServletContext();
  config = pageContext.getServletConfig();
  session = pageContext.getSession();
  out = pageContext.getOut();
  _jspx_out = out;
  _jspx_resourceInjector = (org.glassfish.",C,
341,"developed by the
  * Apache Software Foundation (http://www.apache.org/).""
  * Alternately, this acknowledgment may appear in the software itself,
  * if and wherever such third-party acknowledgments normally appear.
  *
  * 4. The names ""Apache"" and ""Apache Software Foundation"" and
  * ""Apache BCEL"" must not be used to endorse or promote products
  * derived from this software without prior written permission. For
  * written permission, please contact apache@apache.org.
  *
  * 5. Products derived from this software may not be called ""Apache"",
  * ""Apache BCEL"", nor may ""Apache"" appear in their name",L,
342,"0x7f020009;
  public static final int actionBarWidgetTheme = 0x7f02000a;
  public static final int actionButtonStyle = 0x7f02000b;
  public static final int actionDropDownStyle = 0x7f02000c;
  public static final int actionLayout = 0x7f02000d;
  public static final int actionMenuTextAppearance = 0x7f02000e;
  public static final int actionMenuTextColor = 0x7f02000f;
  public static final int actionModeBackground = 0x7f",DI,
343,"Reader r) {
  readCharRef(t, Rcdata);
  }
  },
  Rawtext {
  void read(Tokeniser t, CharacterReader r) {
  readData(t, r, this, RawtextLessthanSign);
  }
  },
  ScriptData {
  void read(Tokeniser t, CharacterReader r) {
  readData(t, r, this, ScriptDataLessthanSign);
  }
  },
  PLAINTEXT {
  void read(Tokeniser t, CharacterReader r) {
  switch (r.current()) {
  case nullChar:
  t.error(this);
  r.advance();
  t.emit(replacementChar);
  break;",C,
344,";
  public static final int activityChooserViewStyle = 0x7f030021;
  public static final int alertDialogButtonGroupStyle = 0x7f030022;
  public static final int alertDialogCenterButtons = 0x7f030023;
  public static final int alertDialogStyle = 0x7f030024;
  public static final int alertDialogTheme = 0x7f030025;
  public static final int allowStacking = 0x7f030026;
  public static final int alpha = 0x7f030027;",DI,
345,"://github.com/lakshmiDRIP/DROP/issues
  * - JUnit => https://lakshmidrip.github.io/DROP/junit/index.html
  * - Jacoco => https://lakshmidrip.github.io/DROP/jacoco/index.html
  * 
  * Licensed under the Apache License, Version 2.0 (the ""License"");
  *  you may not use this file except in compliance with the License.
  * 
  * You may obtain a copy of the License at
  *  http://www.apache.org/licenses/LICENSE-2.0
  * 
  * Unless",L,
346,"* modifications, and in Source or Object form, provided that You
  * meet the following conditions:
  *
  * (a) You must give any other recipients of the Work or
  * Derivative Works a copy of this License; and
  *
  * (b) You must cause any modified files to carry prominent notices
  * stating that You changed the files; and
  *
  * (c) You must retain, in the Source form of any Derivative Works
  * that You distribute, all copyright, patent, trademark, and
  * attribution notices from the Source form of the Work,
  * excluding those notices that do not pertain to",L,
347,"public static final int actionMenuTextColor = 0x7f03000f;
  public static final int actionModeBackground = 0x7f030010;
  public static final int actionModeCloseButtonStyle = 0x7f030011;
  public static final int actionModeCloseDrawable = 0x7f030012;
  public static final int actionModeCopyDrawable = 0x7f030013;
  public static final int actionModeCutDrawable = 0x7f030014;
  public static final int actionModeFindDrawable = 0x7f03001",DI,
348,"[1] = '0';
  striped[2] = '0';
  striped[3] = '0';
  int significantDigits=0;
  for(;;) {
  if (p == (fpdecimal.length())) {
  break;
  }
 
  // Don't want to run pass the end of the array
  if (q == mant.length*rsize+offset+1) {
  break;
  }
 
  if (fpdecimal.charAt(p) == '.') {
  decimalFound = true;
  decimalPos = significantDigits;
  p++;
  continue;
  }
 
  if (fpdecimal.charAt(p) < '0' || fpdecimal.charAt(p) > '",C,
349,"010010;
  public static final int btn_checkbox_to_unchecked_icon_null_animation = 0x7f010011;
  public static final int btn_radio_to_off_mtrl_dot_group_animation = 0x7f010012;
  public static final int btn_radio_to_off_mtrl_ring_outer_animation = 0x7f010013;
  public static final int btn_radio_to_off_mtrl_ring_outer_path_animation = 0x7f010014;
  public static final int btn_radio",DI,
350,",
  ""b"", ""big"", ""code"", ""em"", ""font"", ""i"", ""s"", ""small"", ""strike"", ""strong"", ""tt"", ""u"")) {
  tb.reconstructFormattingElements();
  Element el = tb.insert(startTag);
  tb.pushActiveFormattingElements(el);
  } else if (name.equals(""nobr"")) {
  tb.reconstructFormattingElements();
  if (tb.inScope(""nobr"")) {
  tb.error(this);
  tb.process(new Token.EndTag(""nobr""));
  tb.reconstructFormattingElements();
  }
  Element el = tb.insert(startTag);
  tb.pushActiveFormattingElements",C,
351,"mant, 0, mant.length);
  sign = xdfp.sign;
  exp = xdfp.exp;
  nans = xdfp.nans;
 
  }
 
  /** Copy constructor.
  * @param d instance to copy
  */
  public Dfp(final Dfp d) {
  mant = d.mant.clone();
  sign = d.sign;
  exp = d.exp;
  nans = d.nans;
  field = d.field;
  }
 
  /** Create an instance from a String representation.
  * @param field field to which this instance belongs
  * @param s string representation of the instance
  */",C,
352,");
  }
  return true;
  }
 
  private boolean anythingElse(Token t, HtmlTreeBuilder tb) {
  tb.error(this);
  tb.process(new Token.EndTag(""noscript""));
  return tb.process(t);
  }
  },
  AfterHead {
  boolean process(Token t, HtmlTreeBuilder tb) {
  if (isWhitespace(t)) {
  tb.insert(t.asCharacter());
  } else if (t.isComment()) {
  tb.insert(t.asComment());
  } else if (t.isDoctype()) {
  tb.error(this);
  } else if (t.isStartTag()) {
  Token.StartTag start",C,
353,"{
  IO.logger.log(Level.WARNING, ""Number format exception parsing data from string"", nfe);
  }
  }
  }
  catch( IOException ioe )
  {
  IO.logger.log(Level.WARNING, ""Error with stream reading"", ioe);
  }
  finally
  {
  /* clean up stream reading objects */
  try {
  if( buffread!= null )
  {
  buffread.close();
  }
  }
  catch( IOException ioe )
  {
  IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", ioe);
  }
 
  try {
  if( instrread!= null )
  {
  instrread.close();
  }
  }",C,
354,"break;
  }
  }
  },
  CharacterReferenceInRcdata {
  void read(Tokeniser t, CharacterReader r) {
  readCharRef(t, Rcdata);
  }
  },
  Rawtext {
  void read(Tokeniser t, CharacterReader r) {
  readData(t, r, this, RawtextLessthanSign);
  }
  },
  ScriptData {
  void read(Tokeniser t, CharacterReader r) {
  readData(t, r, this, ScriptDataLessthanSign);
  }
  },
  PLAINTEXT {
  void read(Tokeniser t, CharacterReader r) {
  switch (r.current()) {
  case nullChar:",C,
355,"the redistribution,
  * if any, must include the following acknowledgment:
  * ""This product includes software developed by the
  * Apache Software Foundation (http://www.apache.org/).""
  * Alternately, this acknowledgment may appear in the software itself,
  * if and wherever such third-party acknowledgments normally appear.
  *
  * 4. The names ""Apache"" and ""Apache Software Foundation"" and
  * ""Apache BCEL"" must not be used to endorse or promote products
  * derived from this software without prior written permission. For
  * written permission, please contact apache@apache.org.
  *
  * 5. Products derived from this",L,
356,"static final int compat_notification_large_icon_max_height = 0x7f060053;
  public static final int compat_notification_large_icon_max_width = 0x7f060054;
  public static final int notification_action_icon_size = 0x7f0600c0;
  public static final int notification_action_text_size = 0x7f0600c1;
  public static final int notification_big_circle_margin = 0x7f0600c2;
  public static final int notification_content_margin_start = 0x7f0",DI,
357,"(event.getTimestamp()).isEqualTo(Date.from(testUserEvent.getAuditEventDate()));
  }
 
  @Test
  public void testFindByPrincipalNotNullAndAfterIsNull() {
  persistenceAuditEventRepository.save(testUserEvent);
  persistenceAuditEventRepository.save(testOtherUserEvent);
 
  List<AuditEvent> events = customAuditEventRepository.find(""test-user"", null);
  assertThat(events).hasSize(1);
  assertThat(events.get(0).getPrincipal()).isEqualTo(""test-user"");
  }
 
  @Test
  public void testFindByPrincipalIsNullAndAfterIsNull() {
  persistenceAuditEventRepository.save(testUserEvent);
  persistenceAuditEventRepository.save(",T,
358,"</i>:]<i>name</i></code>"".
  */
  public static final int actionModeSelectAllDrawable=0x7f010042;
  /** Drawable to use for the Share action button in WebView selection action modes 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionModeShareDrawable=0x7f010043;
  /** Background drawable to",DO,
359,"ira
  * Alexandre Santos Cabral
  * Ana Carolina Alves Breda
  * Ana Maria Andrade Cavalcante
  * Aryed Lins de Araújo
  * Bruno Leonardo Rodrigues Barros
  * Carlos Elmano Rodrigues Ferreira
  * Cláudio de Andrade Lira
  * Denys Guimarães Guenes Tavares
  * Eduardo Breckenfeld da Rosa Borges
  * Fabíola Gomes de Araújo
  * Flávio Leonardo Cavalcanti Cordeiro
  * Francisco do Nascimento J",DO,
360,"javax.servlet.jsp"");
  _jspx_imports_classes = null;
  }
 
  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;
 
  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
  return _jspx_dependants;
  }
 
  public java.util.Set<java.lang.String> getPackageImports() {
  return _jspx_imports_packages;
  }
 
  public java.util.Set<java.lang.String> getClassImports() {
  return _jspx_imports_classes;
  }
 
  public javax.el.",C,
361,"Hence we run if after all native modules have been initialized
  ReactContext reactContext = reactInstanceManager.getCurrentReactContext();
  if (reactContext == null) {
  reactInstanceManager.addReactInstanceEventListener(
  new ReactInstanceManager.ReactInstanceEventListener() {
  @Override
  public void onReactContextInitialized(ReactContext reactContext) {
  reactInstanceManager.removeReactInstanceEventListener(this);
  reactContext.runOnNativeModulesQueueThread(
  new Runnable() {
  @Override
  public void run() {
  client.addPlugin(new FrescoFlipperPlugin());
  }
  });
  }
  });
  } else {
  client.addPlugin(new FrescoFlipperPlugin());
  }",C,
362,"""tokenImage"" do not contain
  * relevant information. The JavaCC generated code does not use
  * these constructors.
  */
 
  public ParseException() {
  super();
  }
 
  /** Constructor with message. */
  public ParseException(String message) {
  super(message);
  }
 
 
  /**
  * This is the last token that has been consumed successfully. If
  * this object has been created due to a parse error, the token
  * followng this token will (therefore) be the first error token.
  */
  public Token currentToken;
 
  /**
  * Each entry in this array is an array of integers. Each array
  * of integers represents a sequence of tokens (by their ordinal
  *",DO,
363,"argo. Mostraba docenas de afilados dientes alineados en sus mandíbulas, mientras que sus extremidades anteriores, con dos dedos, eran relativamente cortas. El género Gorgosaurus está íntimamente emparentado con Albertosaurus y, en menor proporción, con Tyrannosaurus. Los fósiles de Gorgosaurus y Albertosaurus, de hecho, son extremadamente similares, distinguiéndose sutilmente por pequeñas diferencias en los huesos del cráneo y los dientes, lo que hace",DO,
364,"rip.github.io/DROP/jacoco/index.html
  * 
  * Licensed under the Apache License, Version 2.0 (the ""License"");
  *  you may not use this file except in compliance with the License.
  * 
  * You may obtain a copy of the License at
  *  http://www.apache.org/licenses/LICENSE-2.0
  * 
  * Unless required by applicable law or agreed to in writing, software
  *  distributed under the License is distributed on an ""AS IS"" BASIS,
  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * 
  * See the License for the specific language governing",L,
365,"0x010101a1, 0x010101a2, 0x010101a3, 0x010101a4, 0x01010201, 0x0101020b, 0x01010510, 0x01010511, 0x01010512, 0x01010513 };
  public static final int GradientColor_android_startColor = 0;
  public static final int GradientColor_android_endColor = 1",DI,
366,"layout_constraintStart_toStartOf = 40;
  public static final int ConstraintLayout_Layout_layout_constraintTop_creator = 41;
  public static final int ConstraintLayout_Layout_layout_constraintTop_toBottomOf = 42;
  public static final int ConstraintLayout_Layout_layout_constraintTop_toTopOf = 43;
  public static final int ConstraintLayout_Layout_layout_constraintVertical_bias = 44;
  public static final int ConstraintLayout_Layout_layout_constraintVertical_chainStyle = 45;
  public static final int ConstraintLayout_Layout_layout_constraintVertical_weight = 46;
  public static final int Constraint",DI,
367,"Software, (b) both the above
  * copyright notice(s) and this permission notice appear in associated
  * documentation, and (c) there is clear notice in each modified Data File or
  * in the Software as well as in the documentation associated with the Data
  * File(s) or Software that the data or software has been modified.
  *
  * THE DATA FILES AND SOFTWARE ARE PROVIDED ""AS IS"", WITHOUT WARRANTY OF ANY
  * KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT OF
  * THIRD PARTY RIGHTS. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR HOLDERS
  * INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM",L,
368,"li>{@link CL10#CL_OUT_OF_RESOURCES OUT_OF_RESOURCES} if there is a failure to allocate resources required by the OpenCL implementation on the device.</li>
  * <li>{@link CL10#CL_OUT_OF_HOST_MEMORY OUT_OF_HOST_MEMORY} if there is a failure to allocate resources required by the OpenCL implementation on the host.</li>
  * </ul>
  */
  @NativeType(""cl_mem"")
  public static long clCreateBufferWithPropertiesINTEL(@NativeType(""cl_context"") long context, @Nullable @NativeType(""cl_mem_properties_intel const *"") LongBuffer properties, @NativeType(""",DO,
369,"GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA
 */
 
 /*
 * GSAN - Sistema Integrado de Gestão de Serviços de Saneamento
 * Copyright (C) <2007> 
 * Adriano Britto Siqueira
 * Alexandre Santos Cabral
 * Ana Carolina Alves Breda
 * Ana Maria Andrade Cavalcante
 * Aryed Lins",L,
370,"* products derived from this software without specific prior
  * written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND
  * CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES,
  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
  * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
  * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
  * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  *",L,
371,"Data Files"") or Unicode software and any associated documentation
  * (the ""Software"") to deal in the Data Files or Software
  * without restriction, including without limitation the rights to use,
  * copy, modify, merge, publish, distribute, and/or sell copies of
  * the Data Files or Software, and to permit persons to whom the Data Files
  * or Software are furnished to do so, provided that
  * (a) this copyright and permission notice appear with all copies 
  * of the Data Files or Software,
  * (b) this copyright and permission notice appear in associated 
  * documentation, and
  * (c) there is clear notice in each modified Data File or in the Software
  * as well as in",L,
372,"License, each Contributor hereby grants to You a perpetual,
  * worldwide, non-exclusive, no-charge, royalty-free, irrevocable
  * (except as stated in this section) patent license to make, have made,
  * use, offer to sell, sell, import, and otherwise transfer the Work,
  * where such license applies only to those patent claims licensable
  * by such Contributor that are necessarily infringed by their
  * Contribution(s) alone or by combination of their Contribution(s)
  * with the Work to which such Contribution(s) was submitted. If You
  * inst",L,
373,"t, HtmlTreeBuilder tb) {
  tb.insert(""html"");
  tb.transition(BeforeHead);
  return tb.process(t);
  }
  },
  BeforeHead {
  boolean process(Token t, HtmlTreeBuilder tb) {
  if (isWhitespace(t)) {
  return true;
  } else if (t.isComment()) {
  tb.insert(t.asComment());
  } else if (t.isDoctype()) {
  tb.error(this);
  return false;
  } else if (t.isStartTag() && t.asStartTag().name().equals(""html"")) {
  return InBody.process(t, tb); // does not transition",C,
374,"void read(Tokeniser t, CharacterReader r) {
  char c = r.consume();
  switch (c) {
  case '\t':
  case '\n':
  case '\r':
  case '\f':
  case'':
  break; // ignore whitespace
  case '/':
  t.transition(SelfClosingStartTag);
  break;
  case '>':
  t.emitTagPending();
  t.transition(Data);
  break;
  case nullChar:
  t.error(this);
  t.tagPending.newAttribute();
  r.unconsume();
  t.transition(AttributeName);
  break;
  case eof:
  t.eofError(this);
  t.transition(Data",C,
375,"NIME interoperates with ECLIPSE solely via ECLIPSE's plug-in APIs.
  * Hence, KNIME and ECLIPSE are both independent programs and are not
  * derived from each other. Should, however, the interpretation of the
  * GNU GPL Version 3 (""License"") under any applicable laws result in
  * KNIME and ECLIPSE being a combined program, KNIME GMBH herewith grants
  * you the additional permission to use and propagate KNIME together with
  * ECLIPSE with only the license terms in place for ECLIPSE applying to
  * ECLIPSE and the GNU GPL Version 3 applying for K",L,
376,"the License. You may add Your own attribution
  * notices within Derivative Works that You distribute, alongside
  * or as an addendum to the NOTICE text from the Work, provided
  * that such additional attribution notices cannot be construed
  * as modifying the License.
  *
  * You may add Your own copyright statement to Your modifications and
  * may provide additional or different license terms and conditions
  * for use, reproduction, or distribution of Your modifications, or
  * for any such Derivative Works as a whole, provided Your use,
  * reproduction, and distribution of the Work otherwise complies with
  * the conditions stated in this License.
  *",L,
377,"t)) {
  return true;
  } else if (t.isComment()) {
  tb.insert(t.asComment());
  } else if (t.isDoctype()) {
  tb.error(this);
  return false;
  } else if (t.isStartTag() && t.asStartTag().name().equals(""html"")) {
  return InBody.process(t, tb); // does not transition
  } else if (t.isStartTag() && t.asStartTag().name().equals(""head"")) {
  Element head = tb.insert(t.asStartTag());
  tb.setHeadElement(head);
  tb.transition(InHead);
  } else",C,
378,"los tiranosáuridos conocidos, Gorgosaurus fue un bípedo depredador que en su madurez pesaba más de una tonelada y medía nueve metros de largo. Mostraba docenas de afilados dientes alineados en sus mandíbulas, mientras que sus extremidades anteriores, con dos dedos, eran relativamente cortas. El género Gorgosaurus está íntimamente emparentado con Albertosaurus y, en menor proporción, con Tyrannosaurus. Los fósiles de Gorgosaurus y Alberto",DO,
379,"if (r.isEmpty()) {
  t.eofError(this);
  t.emit(""</"");
  t.transition(Data);
  } else if (r.matchesLetter()) {
  t.createTagPending(false);
  t.transition(TagName);
  } else if (r.matches('>')) {
  t.error(this);
  t.advanceTransition(Data);
  } else {
  t.error(this);
  t.advanceTransition(BogusComment);
  }
  }
  },
  TagName {
  // from < or </ in data, will have start or end tag pending
  void read(Tokeniser t, CharacterReader r) {
  // previous TagOpen state",C,
380,":
  t.advanceTransition(EndTagOpen);
  break;
  case '?':
  t.advanceTransition(BogusComment);
  break;
  default:
  if (r.matchesLetter()) {
  t.createTagPending(true);
  t.transition(TagName);
  } else {
  t.error(this);
  t.emit('<'); // char that got us here
  t.transition(Data);
  }
  break;
  }
  }
  },
  EndTagOpen {
  void read(Tokeniser t, CharacterReader r) {
  if (r.isEmpty()) {
  t.eofError(this);
  t.emit(""</"");
  t.transition(Data);
  }",C,
381,"static final int actionModePasteDrawable = 0x7f020016;
  public static final int actionModePopupWindowStyle = 0x7f020017;
  public static final int actionModeSelectAllDrawable = 0x7f020018;
  public static final int actionModeShareDrawable = 0x7f020019;
  public static final int actionModeSplitBackground = 0x7f02001a;
  public static final int actionModeStyle = 0x7f02001b;
  public static final int actionModeWebSearchDrawable = 0x7f020",DI,
382,"t.asStartTag().name().equals(""html"")) {
  tb.insert(t.asStartTag());
  tb.transition(BeforeHead);
  } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().name(), ""head"", ""body"", ""html"", ""br""))) {
  return anythingElse(t, tb);
  } else if (t.isEndTag()) {
  tb.error(this);
  return false;
  } else {
  return anythingElse(t, tb);
  }
  return true;
  }
 
  private boolean anythingElse(Token t, HtmlTreeBuilder tb) {
  tb.insert(""html"");
  tb.transition(",C,
383,"code>"" or a theme
  * attribute in the form
  * ""<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>"".
  */
  public static final int actionModeCloseButtonStyle=0x7f030011;
  /**
  * Drawable to use for the close action mode button
  * <p>May be a reference to another resource, in the form
  * ""<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>"" or a theme
  * attribute in the form
  * ""<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>"".
  */",DO,
384,"token
  * followng this token will (therefore) be the first error token.
  */
  public Token currentToken;
 
  /**
  * Each entry in this array is an array of integers. Each array
  * of integers represents a sequence of tokens (by their ordinal
  * values) that is expected at this point of the parse.
  */
  public int[][] expectedTokenSequences;
 
  /**
  * This is a reference to the ""tokenImage"" array of the generated
  * parser within which the parse error occurred. This array is
  * defined in the generated...Constants interface.
  */
  public String[] tokenImage;
 
  /**
  * It uses ""currentToken"" and ""expectedTokenSequences"" to generate",DO,
385,"x7f060132;
  public static final int notification_large_icon_width = 0x7f060133;
  public static final int notification_main_column_padding_top = 0x7f060134;
  public static final int notification_media_narrow_margin = 0x7f060135;
  public static final int notification_right_icon_size = 0x7f060136;
  public static final int notification_right_side_padding_top = 0x7f060137;
  public static final int notification_small_icon_",DI,
386,".evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 
 
  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
  Sandbox.resetDefaultSecurityManager(); 
  java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 
 
  @Before 
  public void initTestCase(){ 
  threadStopper.storeCurrentThreads();
  threadStopper.startRecordingTime();
  org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
  org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
  setSystemProperties(); 
  org.evosuite.runtime.GuiSupport.setHeadless();",T,
387,"ability to use the
  * Work (including but not limited to damages for loss of goodwill,
  * work stoppage, computer failure or malfunction, or any and all
  * other commercial damages or losses), even if such Contributor
  * has been advised of the possibility of such damages.
  *
  * 9. Accepting Warranty or Additional Liability. While redistributing
  * the Work or Derivative Works thereof, You may choose to offer,
  * and charge a fee for, acceptance of support, warranty, indemnity,
  * or other liability obligations and/or rights consistent with this
  * License. However",L,
388,"name"");
  return (Criteria) this;
  }
 
  public Criteria andNameNotLike(String value) {
  addCriterion(""name not like"", value, ""name"");
  return (Criteria) this;
  }
 
  public Criteria andNameIn(List<String> values) {
  addCriterion(""name in"", values, ""name"");
  return (Criteria) this;
  }
 
  public Criteria andNameNotIn(List<String> values) {
  addCriterion(""name not in"", values, ""name"");
  return (Criteria) this;
  }
 
  public Criteria andNameBetween(String value1, String value2) {
  addCriterion(""name between"", value1, value2, ""name"");
  return (Criteria) this",C,
389,"://www.apache.org/).""
  * Alternately, this acknowledgment may appear in the software itself,
  * if and wherever such third-party acknowledgments normally appear.
  *
  * 4. The names ""Apache"" and ""Apache Software Foundation"" and
  * ""Apache BCEL"" must not be used to endorse or promote products
  * derived from this software without prior written permission. For
  * written permission, please contact apache@apache.org.
  *
  * 5. Products derived from this software may not be called ""Apache"",
  * ""Apache BCEL"", nor may ""Apache"" appear in their name, without
  * prior written permission of the Apache",L,
390,"t.emit(new Token.EOF());
  break;
  default:
  String data = r.consumeToAny('<', nullChar);
  t.emit(data);
  break;
  }
  }
  },
  PLAINTEXT {
  void read(Tokeniser t, CharacterReader r) {
  switch (r.current()) {
  case nullChar:
  t.error(this);
  r.advance();
  t.emit(replacementChar);
  break;
  case eof:
  t.emit(new Token.EOF());
  break;
  default:
  String data = r.consumeTo(nullChar);
  t.emit(data);
  break;
  }
  }
  },
  Tag",C,
391,"representation.
  preference.setSummary(stringValue);
  }
  return true;
  }
  };
 
  /**
  * Helper method to determine if the device has an extra-large screen. For
  * example, 10"" tablets are extra-large.
  */
  private static boolean isXLargeTablet(Context context) {
  return (context.getResources().getConfiguration().screenLayout
  & Configuration.SCREENLAYOUT_SIZE_MASK) >= Configuration.SCREENLAYOUT_SIZE_XLARGE;
  }
 
  /**
  * Binds a preference's summary to its value. More specifically, when the
  * preference's value is changed, its summary (line of text below the
  * preference title) is updated to reflect the value",C,
392,">:]<i>name</i></code>"".
  */
  public static final int actionBarTabTextStyle=0x7f010009;
  /** Reference to a theme that should be used to inflate widgets
  and layouts destined for the action bar. Most of the time
  this will be a reference to the current theme, but when
  the action bar has a significantly different contrast
  profile than the rest of the activity the difference
  can become important. If this is set to @null the current
  theme will be used.
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code",DO,
393,"code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>"") or
 theme attribute (in the form
 ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"")
 containing a value of this type.
  */
  public static final int actionProviderClass=0x7f010050;
  /** The name of an optional View class to instantiate and use as an
  action view. See {@link android.view.MenuItem#setActionView(android.view.View)}
  for more info. 
  <p>Must be a string value, using '\\;' to escape characters such as '\\n' or",DO,
394,"el);
  } else if (name.equals(""meta"")) {
  Element meta = tb.insertEmpty(start);
  // todo: charset switches
  } else if (name.equals(""title"")) {
  handleRcData(start, tb);
  } else if (StringUtil.in(name, ""noframes"", ""style"")) {
  handleRawtext(start, tb);
  } else if (name.equals(""noscript"")) {
  // else if noscript && scripting flag = true: rawtext (jsoup doesn't run script, to handle as noscript)
  tb.insert(start);
  tb.transition(InHeadNoscript);
  } else if (name.equals(""script""))",C,
395,"logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
  } catch (InstantiationException ex) {
  java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
  } catch (IllegalAccessException ex) {
  java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
  } catch (javax.swing.UnsupportedLookAndFeelException ex) {
  java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util",C,
396,"result of this License or out of the use or inability to use the
  * Work (including but not limited to damages for loss of goodwill,
  * work stoppage, computer failure or malfunction, or any and all
  * other commercial damages or losses), even if such Contributor
  * has been advised of the possibility of such damages.
  *
  * 9. Accepting Warranty or Additional Liability. While redistributing
  * the Work or Derivative Works thereof, You may choose to offer,
  * and charge a fee for, acceptance of support, warranty, indemnity,
  * or other liability obligations and",L,
397,";
  public static final int notification_right_side_padding_top = 0x7f0600c9;
  public static final int notification_small_icon_background_padding = 0x7f0600ca;
  public static final int notification_small_icon_size_as_large = 0x7f0600cb;
  public static final int notification_subtext_size = 0x7f0600cc;
  public static final int notification_top_pad = 0x7f0600cd;
  public static final int notification_top_pad_large_text = 0x7f060",DI,
398,"the Attribution and Assignment Agreement that can be located at
  * http://www.open-xchange.com/EN/developer/. The contributing author shall be
  * given Attribution for the derivative code and a license granting use.
  *
  * Copyright (C) 2016-2020 OX Software GmbH
  * Mail: info@open-xchange.com
  *
  *
  * This program is free software; you can redistribute it and/or modify it
  * under the terms of the GNU General Public License, Version 2 as published
  * by the Free Software Foundation.
  *
  * This program is distributed in the hope that",L,
399,"PreferenceSummaryToValue(Preference preference) {
  // Set the listener to watch for value changes.
  preference.setOnPreferenceChangeListener(sBindPreferenceSummaryToValueListener);
 
  // Trigger the listener immediately with the preference's
  // current value.
  sBindPreferenceSummaryToValueListener.onPreferenceChange(preference,
  PreferenceManager
  .getDefaultSharedPreferences(preference.getContext())
  .getString(preference.getKey(), """"));
  }
 
  @Override
  protected void onCreate(Bundle savedInstanceState) {
  super.onCreate(savedInstanceState);
  setupActionBar();
  }
 
  /**
  * Set up the {@link android.app.ActionBar}, if the API is available.
  */
  private void setupActionBar() {
  ActionBar actionBar = get",C,
400,"*/
  public static final int actionMenuTextColor=0x7f010012;
  /** Background drawable to use for action mode UI 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionModeBackground=0x7f01003c;
  /** <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i",DO,
401,"000;
 
  /** The minimum exponent before underflow is signaled. Flush to zero
  * occurs at minExp-DIGITS */
  public static final int MIN_EXP = -32767;
 
  /** The maximum exponent before overflow is signaled and results flushed
  * to infinity */
  public static final int MAX_EXP = 32768;
 
  /** The amount under/overflows are scaled by before going to trap handler */
  public static final int ERR_SCALE = 32760;
 
  /** Indicator value for normal finite numbers. */
  public static final byte FINITE = 0;
 
  /** Indicator value for Infinity. */
  public static final byte",C,
402,"_big_circle_margin = 0x7f060130;
  public static final int notification_content_margin_start = 0x7f060131;
  public static final int notification_large_icon_height = 0x7f060132;
  public static final int notification_large_icon_width = 0x7f060133;
  public static final int notification_main_column_padding_top = 0x7f060134;
  public static final int notification_media_narrow_margin = 0x7f060135;
  public static final",DI,
403,"@Override
  public void setEntityAudit(int customerId, String userId) {
  if (entityAudit == null) {
  entityAudit = new EntityAudit();
  }
  if (getPrimaryKey() == null) {
  this.entityAudit.setCreatedBy(userId);
  this.systemInfo.setActiveStatus(1);
  } else {
  this.entityAudit.setUpdatedBy(userId);
  }
  }
 
  @JsonIgnore
  public String getLoggedInUserInfo() {
  String auditInfo = """";
  if (this.entityAudit!= null) {
  auditInfo = entityAudit.toString();
  }
  return auditInfo;
  }
 
  @Override
  @JsonIgnore
  public void setSystemInformation(RECORD_TYPE record",C,
404,".save(testUserEvent);
  persistenceAuditEventRepository.save(testOldUserEvent);
 
  testOtherUserEvent.setAuditEventType(testUserEvent.getAuditEventType());
  persistenceAuditEventRepository.save(testOtherUserEvent);
 
  PersistentAuditEvent testUserOtherTypeEvent = new PersistentAuditEvent();
  testUserOtherTypeEvent.setPrincipal(testUserEvent.getPrincipal());
  testUserOtherTypeEvent.setAuditEventType(""test-other-type"");
  testUserOtherTypeEvent.setAuditEventDate(testUserEvent.getAuditEventDate());
  persistenceAuditEventRepository.save(testUserOtherTypeEvent);
 
  List<AuditEvent> events = customAuditEventRepository.find(""",C,
405,"}
 
  public Criteria andTitleGreaterThanOrEqualTo(String value) {
  addCriterion(""title >="", value, ""title"");
  return (Criteria) this;
  }
 
  public Criteria andTitleLessThan(String value) {
  addCriterion(""title <"", value, ""title"");
  return (Criteria) this;
  }
 
  public Criteria andTitleLessThanOrEqualTo(String value) {
  addCriterion(""title <="", value, ""title"");
  return (Criteria) this;
  }
 
  public Criteria andTitleLike(String value) {
  addCriterion(""title like"", value, ""title"");
  return (Criteria) this;
  }
 
  public Criteria andTitleNotLike(String value) {
  addCriterion(""title not like"", value, """,C,
406,".flipper.plugins.sharedpreferences.SharedPreferencesFlipperPlugin;
 import com.facebook.react.ReactInstanceManager;
 import com.facebook.react.bridge.ReactContext;
 import com.facebook.react.modules.network.NetworkingModule;
 import okhttp3.OkHttpClient;
 
 public class ReactNativeFlipper {
  public static void initializeFlipper(Context context, ReactInstanceManager reactInstanceManager) {
  if (FlipperUtils.shouldEnableFlipper(context)) {
  final FlipperClient client = AndroidFlipperClient.getInstance(context);
 
  client.addPlugin(new InspectorFlipperPlugin(context, DescriptorMapping.withDefaults()));
  client.addPlugin(new React",C,
407,"testOldUserEvent);
 
  testOtherUserEvent.setAuditEventType(testUserEvent.getAuditEventType());
  persistenceAuditEventRepository.save(testOtherUserEvent);
 
  PersistentAuditEvent testUserOtherTypeEvent = new PersistentAuditEvent();
  testUserOtherTypeEvent.setPrincipal(testUserEvent.getPrincipal());
  testUserOtherTypeEvent.setAuditEventType(""test-other-type"");
  testUserOtherTypeEvent.setAuditEventDate(testUserEvent.getAuditEventDate());
  persistenceAuditEventRepository.save(testUserOtherTypeEvent);
 
  List<AuditEvent> events = customAuditEventRepository.find(""test-user"",
  Date.from(testUserEvent.getAudit",C,
408,"ATIONS (""MEDIATEK SOFTWARE"")
  * RECEIVED FROM MEDIATEK AND/OR ITS REPRESENTATIVES ARE PROVIDED TO RECEIVER ON
  * AN ""AS-IS"" BASIS ONLY. MEDIATEK EXPRESSLY DISCLAIMS ANY AND ALL WARRANTIES,
  * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
  * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
  * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
  * SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECE",L,
409,"());
  *
  * @param context
  * @param reactInstanceManager
  */
  private static void initializeFlipper(
  Context context, ReactInstanceManager reactInstanceManager) {
  if (BuildConfig.DEBUG) {
  try {
  /*
  We use reflection here to pick up the class that initializes Flipper,
  since Flipper library is not available in release mode
  */
  Class<?> aClass = Class.forName(""com.rndiffapp.ReactNativeFlipper"");
  aClass
  .getMethod(""initializeFlipper"", Context.class, ReactInstanceManager.class)
  .invoke(null, context, reactInstanceManager);
  } catch (ClassNotFoundException e) {
  e.printStackTrace();
  } catch",C,
410,"*/
  public static final int actionBarTabStyle=0x7f010007;
  /** <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionBarTabTextStyle=0x7f010009;
  /** Reference to a theme that should be used to inflate widgets
  and layouts destined for the action bar. Most of the time
  this will be a",DO,
411,";
  }
 
  public void setLangKey(String langKey) {
  this.langKey = langKey;
  }
 
  public String getCreatedBy() {
  return createdBy;
  }
 
  public void setCreatedBy(String createdBy) {
  this.createdBy = createdBy;
  }
 
  public Instant getCreatedDate() {
  return createdDate;
  }
 
  public void setCreatedDate(Instant createdDate) {
  this.createdDate = createdDate;
  }
 
  public String getLastModifiedBy() {
  return lastModifiedBy;
  }
 
  public void setLastModifiedBy(String lastModifiedBy) {
  this.lastModifiedBy = lastModifiedBy;
  }
 
  public Instant getLastModifiedDate() {
  return",C,
412,", ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdNotBetween(Integer value1, Integer value2) {
  addCriterion(""id not between"", value1, value2, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andNameIsNull() {
  addCriterion(""name is null"");
  return (Criteria) this;
  }
 
  public Criteria andNameIsNotNull() {
  addCriterion(""name is not null"");
  return (Criteria) this;
  }
 
  public Criteria andNameEqualTo(String value) {
  addCriterion(""name ="", value, ""name"");
  return (Criteria) this;
  }
 
  public Criteria andNameNotEqualTo(String value) {
  addCriterion(""",C,
413,"an action bar 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionBarTabStyle=0x7f010007;
  /** <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package",DO,
414,"final int notification_big_circle_margin = 0x7f060130;
  public static final int notification_content_margin_start = 0x7f060131;
  public static final int notification_large_icon_height = 0x7f060132;
  public static final int notification_large_icon_width = 0x7f060133;
  public static final int notification_main_column_padding_top = 0x7f060134;
  public static final int notification_media_narrow_margin = 0x7f060135;",DI,
415,"().equals(fragmentName);
  }
 
  /**
  * This fragment shows general preferences only. It is used when the
  * activity is showing a two-pane settings UI.
  */
  @TargetApi(Build.VERSION_CODES.HONEYCOMB)
  public static class GeneralPreferenceFragment extends PreferenceFragment {
  @Override
  public void onCreate(Bundle savedInstanceState) {
  super.onCreate(savedInstanceState);
  addPreferencesFromResource(R.xml.pref_general);
  setHasOptionsMenu(true);
 
  // Bind the summaries of EditText/List/Dialog/Ringtone preferences
  // to their values. When their values change, their summaries are
  // updated to reflect the new value, per the Android Design",C,
416,"static final int actionModeWebSearchDrawable = 0x7f03001c;
  public static final int actionOverflowButtonStyle = 0x7f03001d;
  public static final int actionOverflowMenuStyle = 0x7f03001e;
  public static final int actionProviderClass = 0x7f03001f;
  public static final int actionTextColorAlpha = 0x7f030020;
  public static final int actionViewClass = 0x7f030021;
  public static final int activityChooserViewStyle = 0x7f030022;",DI,
417,"2 &&!stack.get(1).nodeName().equals(""body""))) {
  // only in fragment case
  return false; // ignore
  } else if (!tb.framesetOk()) {
  return false; // ignore frameset
  } else {
  Element second = stack.get(1);
  if (second.parent()!= null)
  second.remove();
  // pop up to html element
  while (stack.size() > 1)
  stack.removeLast();
  tb.insert(startTag);
  tb.transition(InFrameset);
  }
  } else if (StringUtil.in(name,
  ""address"", ""article"", ""aside"", ""blockquote"", ""center"", ""details",C,
418,"case eof:
  t.emit(new Token.EOF());
  break;
  default:
  String data = r.consumeToAny('&', '<', nullChar);
  t.emit(data);
  break;
  }
  }
  },
  CharacterReferenceInRcdata {
  void read(Tokeniser t, CharacterReader r) {
  readCharRef(t, Rcdata);
  }
  },
  Rawtext {
  void read(Tokeniser t, CharacterReader r) {
  readData(t, r, this, RawtextLessthanSign);
  }
  },
  ScriptData {
  void read(Tokeniser t, CharacterReader r) {
  readData(t, r, this,",C,
419,"i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionModeCloseDrawable=0x7f01003e;
  /** Drawable to use for the Copy action button in Contextual Action Bar 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code",DO,
420,"CreatedLessThanOrEqualTo(Date value) {
  addCriterion(""created <="", value, ""created"");
  return (Criteria) this;
  }
 
  public Criteria andCreatedIn(List<Date> values) {
  addCriterion(""created in"", values, ""created"");
  return (Criteria) this;
  }
 
  public Criteria andCreatedNotIn(List<Date> values) {
  addCriterion(""created not in"", values, ""created"");
  return (Criteria) this;
  }
 
  public Criteria andCreatedBetween(Date value1, Date value2) {
  addCriterion(""created between"", value1, value2, ""created"");
  return (Criteria) this;
  }
 
  public Criteria andCreatedNotBetween(Date value1, Date",C,
421,"ModeSplitBackground = 0x7f04001a;
  public static final int actionModeStyle = 0x7f04001b;
  public static final int actionModeWebSearchDrawable = 0x7f04001c;
  public static final int actionOverflowButtonStyle = 0x7f04001d;
  public static final int actionOverflowMenuStyle = 0x7f04001e;
  public static final int actionProviderClass = 0x7f04001f;
  public static final int actionViewClass = 0x7f040020;
  public static final int",DI,
422,"length);
  sign = xdfp.sign;
  exp = xdfp.exp;
  nans = xdfp.nans;
 
  }
 
  /** Copy constructor.
  * @param d instance to copy
  */
  public Dfp(final Dfp d) {
  mant = d.mant.clone();
  sign = d.sign;
  exp = d.exp;
  nans = d.nans;
  field = d.field;
  }
 
  /** Create an instance from a String representation.
  * @param field field to which this instance belongs
  * @param s string representation of the instance
  */
  protected Dfp(final DfpField field",C,
423,"String condition, Object value1, Object value2, String property) {
  if (value1 == null || value2 == null) {
  throw new RuntimeException(""Between values for "" + property + "" cannot be null"");
  }
  criteria.add(new Criterion(condition, value1, value2));
  }
 
  public Criteria andIdIsNull() {
  addCriterion(""id is null"");
  return (Criteria) this;
  }
 
  public Criteria andIdIsNotNull() {
  addCriterion(""id is not null"");
  return (Criteria) this;
  }
 
  public Criteria andIdEqualTo(Long value) {
  addCriterion(""id ="", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria",C,
424,"EventRepository.save(testOtherUserEvent);
 
  List<AuditEvent> events = customAuditEventRepository
  .find(""test-user"", Date.from(testUserEvent.getAuditEventDate().minusSeconds(3600)));
  assertThat(events).hasSize(1);
  AuditEvent event = events.get(0);
  assertThat(event.getPrincipal()).isEqualTo(testUserEvent.getPrincipal());
  assertThat(event.getType()).isEqualTo(testUserEvent.getAuditEventType());
  assertThat(event.getData()).containsKey(""test-key"");
  assertThat(event.getData().get(""test-key"").toString()).isEqualTo(""test-value"");
  assertThat(event.getTimestamp()).isEqualTo(Date",T,
425,"final int actionModeBackground = 0x7f040010;
  public static final int actionModeCloseButtonStyle = 0x7f040011;
  public static final int actionModeCloseDrawable = 0x7f040012;
  public static final int actionModeCopyDrawable = 0x7f040013;
  public static final int actionModeCutDrawable = 0x7f040014;
  public static final int actionModeFindDrawable = 0x7f040015;
  public static final int actionModePasteDrawable = 0x7f040016;",DI,
426,"boolean process(Token t, HtmlTreeBuilder tb) {
  if (t.isDoctype()) {
  tb.error(this);
  } else if (t.isStartTag() && t.asStartTag().name().equals(""html"")) {
  return tb.process(t, InBody);
  } else if (t.isEndTag() && t.asEndTag().name().equals(""noscript"")) {
  tb.pop();
  tb.transition(InHead);
  } else if (isWhitespace(t) || t.isComment() || (t.isStartTag() && StringUtil.in(t.asStartTag().name(),
  ""basefont"", ""bgsound"",",C,
427,#ERROR!,DO,
428,"theme attribute (in the form
 ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"")
 containing a value of this type.
  */
  public static final int actionViewClass=0x7f01004f;
  /** Default ActivityChooserView style. 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int activityChooserView",DO,
429,"derived from this software without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND
  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE UNITED STATES GOVERNMENT BE LIABLE FOR ANY
  * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  * (",L,
430,"Vivianne Barbosa Sousa
 *
 * Este programa é software livre; você pode redistribuí-lo e/ou
 * modificá-lo sob os termos de Licença Pública Geral GNU, conforme
 * publicada pela Free Software Foundation; versão 2 da
 * Licença.
 * Este programa é distribuído na expectativa de ser útil, mas SEM
 * QUALQUER GARANTIA; sem mesmo a garantia implícita de
 * COMERCIALIZAÇÃO ou de ADEQUAÇÃO A QUALQUER PROPÓSIT",L,
431,,U,
432,"FOR A PARTICULAR PURPOSE. The software and
  documentation provided hereunder is on an ""as is"" basis, and the
  Institute for Systems Biology and the Whitehead Institute
  have no obligations to provide maintenance, support,
  updates, enhancements or modifications. In no event shall the
  Institute for Systems Biology and the Whitehead Institute
  be liable to any party for direct, indirect, special,
  incidental or consequential damages, including lost profits, arising
  out of the use of this software and its documentation, even if the
  Institute for Systems Biology and the Whitehead Institute
  have been advised of the possibility of such damage. See
  the GNU Lesser General Public License for",L,
433,"User = (UserDetails) authentication.getPrincipal();
  return springSecurityUser.getUsername();
  } else if (authentication.getPrincipal() instanceof String) {
  return (String) authentication.getPrincipal();
  }
  return null;
  });
  }
 
  /**
  * Get the JWT of the current user.
  *
  * @return the JWT of the current user
  */
  public static Optional<String> getCurrentUserJWT() {
  SecurityContext securityContext = SecurityContextHolder.getContext();
  return Optional.ofNullable(securityContext.getAuthentication())
  .filter(authentication -> authentication.getCredentials() instanceof String)
  .map(authentication -> (String) authentication.getCredentials());
  }
 
  /**
  * Check",C,
434,"this use-case.</li>
  * <li> Not having an outer join causes n+1 requests to the database. This is not a real issue as
  * we have by default a second-level cache. This means on the first HTTP call we do the n+1 requests,
  * but then all authorities come from the cache, so in fact it's much better than doing an outer join
  * (which will get lots of data from the database, for each HTTP call).</li>
  * <li> As this manages users, for security reasons, we'd rather have a DTO layer.</li>
  * </ul>
  * <p>
  * Another option would be to have a specific J",DO,
435,"* attribute in the form
  * ""<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>"".
  */
  public static final int actionBarTheme=0x7f030009;
  /**
  * Reference to a theme that should be used to inflate widgets
  * and layouts destined for the action bar. Most of the time
  * this will be a reference to the current theme, but when
  * the action bar has a significantly different contrast
  * profile than the rest of the activity the difference
  * can become important. If this is set to @null the current
  * theme will be used.
  * <p>May be a reference",DO,
436,"ASH"" appender
  private void setMetricsMarkerLogbackFilter(LoggerContext context) {
  log.info(""Filtering metrics logs from all appenders except the {} appender"", LOGSTASH_APPENDER_NAME);
  OnMarkerEvaluator onMarkerMetricsEvaluator = new OnMarkerEvaluator();
  onMarkerMetricsEvaluator.setContext(context);
  onMarkerMetricsEvaluator.addMarker(""metrics"");
  onMarkerMetricsEvaluator.start();
  EvaluatorFilter<ILoggingEvent> metricsFilter = new EvaluatorFilter<>();
  metricsFilter.setContext(context);
  metricsFilter.setEvaluator(onMarkerMetricsEvaluator);
  metricsFilter.setOnMatch(FilterReply.DENY);
  metricsFilter.start();
 
  for (",C,
437,"2c;
  public static final int autoSizeMinTextSize = 0x7f02002d;
  public static final int autoSizePresetSizes = 0x7f02002e;
  public static final int autoSizeStepGranularity = 0x7f02002f;
  public static final int autoSizeTextType = 0x7f020030;
  public static final int background = 0x7f020031;
  public static final int backgroundSplit = 0x7f020032;
  public static final int backgroundStacked = 0x7f0200",DI,
438,"attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionBarSplitStyle=0x7f01000c;
  /** Reference to a style for the Action Bar 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionBarStyle=0x7f0100",DO,
439,"ing = 0x7f020026;
  public static final int alpha = 0x7f020027;
  public static final int alphabeticModifiers = 0x7f020028;
  public static final int arrowHeadLength = 0x7f020029;
  public static final int arrowShaftLength = 0x7f02002a;
  public static final int autoCompleteTextViewStyle = 0x7f02002b;
  public static final int autoSizeMaxTextSize = 0x7f02002c;
  public static final int autoSizeMin",DI,
440,"License. Subject to the terms and conditions of
  * this License, each Contributor hereby grants to You a perpetual,
  * worldwide, non-exclusive, no-charge, royalty-free, irrevocable
  * (except as stated in this section) patent license to make, have made,
  * use, offer to sell, sell, import, and otherwise transfer the Work,
  * where such license applies only to those patent claims licensable
  * by such Contributor that are necessarily infringed by their
  * Contribution(s) alone or by combination of their Contribution(s)
  * with the Work to which such Cont",DI,
441,");
  for (Attribute attribute : startTag.getAttributes()) {
  if (!body.hasAttr(attribute.getKey()))
  body.attributes().put(attribute);
  }
  }
  } else if (name.equals(""frameset"")) {
  tb.error(this);
  LinkedList<Element> stack = tb.getStack();
  if (stack.size() == 1 || (stack.size() > 2 &&!stack.get(1).nodeName().equals(""body""))) {
  // only in fragment case
  return false; // ignore
  } else if (!tb.framesetOk()) {
  return false; // ignore frameset
  } else {
  Element second = stack.get(1);",C,
442,"- Suite 330, Boston, MA 02111-1307, USA
 */
 
 /*
 * GSAN - Sistema Integrado de Gestão de Serviços de Saneamento
 * Copyright (C) <2007> 
 * Adriano Britto Siqueira
 * Alexandre Santos Cabral
 * Ana Carolina Alves Breda
 * Ana Maria Andrade Cavalcante
 * Aryed Lins de Araújo
 * Bruno Leonardo Rodrigues Barros
 * Carlos Elmano Rodrigues Fer",DO,
443,",
  javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 
  if (qnames!= null) {
  // we have to store this data until last moment since it is not possible to write any
  // namespace data after writing the charactor data
  java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
  java.lang.String namespaceURI = null;
  java.lang.String prefix = null;
 
  for (int i = 0; i < qnames.length; i++) {
  if (i > 0) {
  stringToWrite.append("" "");
  }
  namespaceURI = qnames[i].getNamespace",C,
444,"arães Guenes Tavares
  * Eduardo Breckenfeld da Rosa Borges
  * Fabíola Gomes de Araújo
  * Flávio Leonardo Cavalcanti Cordeiro
  * Francisco do Nascimento Júnior
  * Homero Sampaio Cavalcanti
  * Ivan Sérgio da Silva Júnior
  * José Edmar de Siqueira
  * José Thiago Tenório Lopes
  * Kássia Regina Silvestre de Albuquerque
  * Leonardo Luiz Vieira da Silva
  * Márcio Roberto",DI,
445,"push(head);
  tb.process(t, InHead);
  tb.removeFromStack(head);
  } else if (name.equals(""head"")) {
  tb.error(this);
  return false;
  } else {
  anythingElse(t, tb);
  }
  } else if (t.isEndTag()) {
  if (StringUtil.in(t.asEndTag().name(), ""body"", ""html"")) {
  anythingElse(t, tb);
  } else {
  tb.error(this);
  return false;
  }
  } else {
  anythingElse(t, tb);
  }
  return true;
  }
 
  private boolean anythingElse(Token t, HtmlTree",C,
446,"}
 
  public Criteria andPasswordIn(List<String> values) {
  addCriterion(""password in"", values, ""password"");
  return (Criteria) this;
  }
 
  public Criteria andPasswordNotIn(List<String> values) {
  addCriterion(""password not in"", values, ""password"");
  return (Criteria) this;
  }
 
  public Criteria andPasswordBetween(String value1, String value2) {
  addCriterion(""password between"", value1, value2, ""password"");
  return (Criteria) this;
  }
 
  public Criteria andPasswordNotBetween(String value1, String value2) {
  addCriterion(""password not between"", value1, value2, ""password"");
  return (Criteria) this",C,
447,"* <p>IEEE 854 also specifies the existence of ""sub-normal"" numbers. This
  * class does not contain any such entities. The most significant radix
  * 10000 digit is always non-zero. Instead, we support ""gradual underflow""
  * by raising the underflow flag for numbers less with exponent less than
  * expMin, but don't flush to zero until the exponent reaches MIN_EXP-digits.
  * Thus the smallest number we can represent would be:
  * 1E(-(MIN_EXP-digits-1)*4), eg, for digits=5, MIN_EXP=-327",DO,
448,"javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
  java.lang.String namespaceURI = qname.getNamespaceURI();
  if (namespaceURI!= null) {
  java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
  if (prefix == null) {
  prefix = generatePrefix(namespaceURI);
  xmlWriter.writeNamespace(prefix, namespaceURI);
  xmlWriter.setPrefix(prefix,namespaceURI);
  }
 
  if (prefix.trim().length() > 0){
  xmlWriter.writeCharacters(prefix + "":"" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(",C,
449,">:]<i>type</i>/<i>name</i></code>"" or a theme
  * attribute in the form
  * ""<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>"".
  */
  public static final int actionModeCloseButtonStyle=0x7f030011;
  /**
  * Drawable to use for the close action mode button
  * <p>May be a reference to another resource, in the form
  * ""<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>"" or a theme
  * attribute in the form
  * ""<code>?[<i>package</i>:]<i>type</",DO,
450,"isDoctype()) {
  tb.error(this);
  } else if (t.isStartTag()) {
  Token.StartTag startTag = t.asStartTag();
  String name = startTag.name();
  if (name.equals(""html"")) {
  return tb.process(t, InBody);
  } else if (name.equals(""body"")) {
  tb.insert(startTag);
  tb.framesetOk(false);
  tb.transition(InBody);
  } else if (name.equals(""frameset"")) {
  tb.insert(startTag);
  tb.transition(InFrameset);
  } else if (StringUtil.in(name, ""base"", """,C,
451,#ERROR!,L,
452,"4. The names ""Apache"" and ""Apache Software Foundation"" and
  * ""Apache BCEL"" must not be used to endorse or promote products
  * derived from this software without prior written permission. For
  * written permission, please contact apache@apache.org.
  *
  * 5. Products derived from this software may not be called ""Apache"",
  * ""Apache BCEL"", nor may ""Apache"" appear in their name, without
  * prior written permission of the Apache Software Foundation.
  *
  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR",L,
453,"utation Support
  * - Function Analysis
  * - Model Validation
  * - Numerical Analysis
  * - Numerical Optimizer
  * - Spline Builder
  * - Statistical Learning
  * 
  * Documentation for DROP is Spread Over:
  * 
  * - Main => https://lakshmidrip.github.io/DROP/
  * - Wiki => https://github.com/lakshmiDRIP/DROP/wiki
  * - GitHub => https://github.com/lakshmiDRIP/DROP
  * - Repo Layout Taxonomy => https://github.com/lak",DO,
454,"import com.facebook.react.ReactInstanceManager;
 import com.facebook.react.bridge.ReactContext;
 import com.facebook.react.modules.network.NetworkingModule;
 import okhttp3.OkHttpClient;
 
 public class ReactNativeFlipper {
  public static void initializeFlipper(Context context, ReactInstanceManager reactInstanceManager) {
  if (FlipperUtils.shouldEnableFlipper(context)) {
  final FlipperClient client = AndroidFlipperClient.getInstance(context);
 
  client.addPlugin(new InspectorFlipperPlugin(context, DescriptorMapping.withDefaults()));
  client.addPlugin(new ReactFlipperPlugin());
  client.addPlugin(new DatabasesFlipper",C,
455,"assertEquals(value, objectUnderTest.getProperty6());
  }
 
  @Test
  public void testProperty7() throws Exception {
  String value = ""value"";
  objectUnderTest.setProperty7(value);
  Thread.sleep(250);
  assertEquals(value, objectUnderTest.getProperty7());
  }
 
  @Test
  public void testProperty8() throws Exception {
  String value = ""value"";
  objectUnderTest.setProperty8(value);
  Thread.sleep(250);
  assertEquals(value, objectUnderTest.getProperty8());
  }
 
  @Test
  public void testProperty9() throws Exception {
  String value = ""value"";
  objectUnderTest.setProperty9(value);
  Thread.sleep(25",T,
456,"point library for Java
  *
  * <p>Another floating point class. This one is built using radix 10000
  * which is 10<sup>4</sup>, so its almost decimal.</p>
  *
  * <p>The design goals here are:
  * <ol>
  * <li>Decimal math, or close to it</li>
  * <li>Settable precision (but no mix between numbers using different settings)</li>
  * <li>Portability. Code should be kept as portable as possible.</li>
  * <li>Performance</li>
  * <li>Accuracy - Results",DO,
457,"type</i>/<i>name</i></code>"".
  */
  public static final int actionModeCloseDrawable=0x7f030012;
  /**
  * Drawable to use for the Copy action button in Contextual Action Bar
  * <p>May be a reference to another resource, in the form
  * ""<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>"" or a theme
  * attribute in the form
  * ""<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>"".
  */
  public static final int actionModeCopyDrawable=0x7f030013;",DO,
458,"{
  if (r.isEmpty()) {
  t.eofError(this);
  t.emit(""</"");
  t.transition(Data);
  } else if (r.matchesLetter()) {
  t.createTagPending(false);
  t.transition(TagName);
  } else if (r.matches('>')) {
  t.error(this);
  t.advanceTransition(Data);
  } else {
  t.error(this);
  t.advanceTransition(BogusComment);
  }
  }
  },
  TagName {
  // from < or </ in data, will have start or end tag pending
  void read(Tokeniser t, CharacterReader r) {
  // previous TagOpen",C,
459,"*/
  protected int exp;
 
  /** Indicator for non-finite / non-number values. */
  protected byte nans;
 
  /** Factory building similar Dfp's. */
  private final DfpField field;
 
  /** Makes an instance with a value of zero.
  * @param field field to which this instance belongs
  */
  protected Dfp(final DfpField field) {
  mant = new int[field.getRadixDigits()];
  sign = 1;
  exp = 0;
  nans = FINITE;
  this.field = field;
  }
 
  /** Create an instance from a byte value.
  * @param field field to which this instance belongs
  * @param x value to",C,
460,"com if you need additional information or have any
  * questions.
  */
 
 /*
  * COPYRIGHT AND PERMISSION NOTICE
  *
  * Copyright (C) 1991-2016 Unicode, Inc. All rights reserved.
  * Distributed under the Terms of Use in 
  * http://www.unicode.org/copyright.html.
  *
  * Permission is hereby granted, free of charge, to any person obtaining
  * a copy of the Unicode data files and any associated documentation
  * (the ""Data Files"") or Unicode software and any associated documentation
  * (the ""Software"") to deal in the Data Files or Software
  * without restriction, including without limitation the rights to use,
  * copy",L,
461,"/LICENSE.txt.
  * Sun designates this particular file as subject to the ""Classpath"" exception
  * as provided by Sun in the GPL Version 2 section of the License file that
  * accompanied this code. If applicable, add the following below the License
  * Header, with the fields enclosed by brackets [] replaced by your own
  * identifying information: ""Portions Copyrighted [year]
  * [name of copyright owner]""
  *
  * Contributor(s):
  *
  * If you wish your version of this file to be governed by only the CDDL or
  * only the GPL Version 2, indicate your decision by adding ""[Contributor]
  * elects to include this software in this",L,
462,"2;
  public static final int buttonStyleSmall = 0x7f020043;
  public static final int buttonTint = 0x7f020044;
  public static final int buttonTintMode = 0x7f020045;
  public static final int checkboxStyle = 0x7f020047;
  public static final int checkedTextViewStyle = 0x7f020048;
  public static final int closeIcon = 0x7f020049;
  public static final int closeItemLayout = 0x7f02004a;
  public static final",DI,
463,");
  assertThat(testUser.getImageUrl()).isEqualTo(UPDATED_IMAGEURL);
  assertThat(testUser.getLangKey()).isEqualTo(UPDATED_LANGKEY);
  }
 
  @Test
  @Transactional
  public void updateUserExistingEmail() throws Exception {
  // Initialize the database with 2 users
  userRepository.saveAndFlush(user);
 
  User anotherUser = new User();
  anotherUser.setLogin(""jhipster"");
  anotherUser.setPassword(RandomStringUtils.random(60));
  anotherUser.setActivated(true);
  anotherUser.setEmail(""jhipster@localhost"");
  anotherUser.setFirstName(""java"");
  anotherUser.setLastName(""hipster"");
  anotherUser",T,
464,"""))) {
  tb.process(new Token.StartTag(""head""));
  return tb.process(t);
  } else if (t.isEndTag()) {
  tb.error(this);
  return false;
  } else {
  tb.process(new Token.StartTag(""head""));
  return tb.process(t);
  }
  return true;
  }
  },
  InHead {
  boolean process(Token t, HtmlTreeBuilder tb) {
  if (isWhitespace(t)) {
  tb.insert(t.asCharacter());
  return true;
  }
  switch (t.type) {
  case Comment:
  tb.insert(t.asComment());
  break;
  case",C,
465,"more info. 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionLayout=0x7f01004e;
  /** TextAppearance style that will be applied to text that
  appears within action menu items. 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></",DO,
466,"* documentation, and
  * (c) there is clear notice in each modified Data File or in the Software
  * as well as in the documentation associated with the Data File(s) or
  * Software that the data or software has been modified.
  *
  * THE DATA FILES AND SOFTWARE ARE PROVIDED ""AS IS"", WITHOUT WARRANTY OF
  * ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
  * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  * NONINFRINGEMENT OF THIRD PARTY RIGHTS.
  * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR HOLDERS INCLUDED IN THIS
  * NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL INDIRECT OR CONSEQUENTIAL
  * DAMAGES, OR ANY DAMAGES WHATSOEVER",L,
467,"ne Barbosa Sousa
  *
  * Este programa é software livre; você pode redistribuí-lo e/ou
  * modificá-lo sob os termos de Licença Pública Geral GNU, conforme
  * publicada pela Free Software Foundation; versão 2 da
  * Licença.
  * Este programa é distribuído na expectativa de ser útil, mas SEM
  * QUALQUER GARANTIA; sem mesmo a garantia implícita de
  * COMERCIALIZAÇÃO ou de ADEQUAÇÃO A QUALQUER PROPÓSITO EM
  * PARTICULAR. Consulte a Licen",L,
468,"ConverterUtil.convertToString(qname));
  } else {
  // i.e this is the default namespace
  xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
  }
 
  } else {
  xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
  }
  }
 
  private void writeQNames(javax.xml.namespace.QName[] qnames,
  javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 
  if (qnames!= null) {
  // we have to store this data until last moment since",C,
469,"FamilyFont_ttcIndex = 9;
  public static final int[] GradientColor = { 0x101019d, 0x101019e, 0x10101a1, 0x10101a2, 0x10101a3, 0x10101a4, 0x1010201, 0x101020b, 0x1010510, 0x1010511, 0x1010512, 0x101051",DI,
470,"nodeName().equals(""body""))) {
  // only in fragment case
  return false; // ignore
  } else {
  tb.framesetOk(false);
  Element body = stack.get(1);
  for (Attribute attribute : startTag.getAttributes()) {
  if (!body.hasAttr(attribute.getKey()))
  body.attributes().put(attribute);
  }
  }
  } else if (name.equals(""frameset"")) {
  tb.error(this);
  LinkedList<Element> stack = tb.getStack();
  if (stack.size() == 1 || (stack.size() > 2 &&!stack.get(1).nodeName().equals(""body""))) {
  // only in fragment",C,
471,"0;
  for (int i = 0; i < expectedTokenSequences.length; i++) {
  if (maxSize < expectedTokenSequences[i].length) {
  maxSize = expectedTokenSequences[i].length;
  }
  for (int j = 0; j < expectedTokenSequences[i].length; j++) {
  expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');
  }
  if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1]!= 0) {
  expected.append(""..."");
  }
  expected.append(eol).append("" "");
  }
  String retval = ""Encountered \"""";",C,
472,#ERROR!,C,
473,">package</i>:]<i>type</i>/<i>name</i></code>"".
  */
  public static final int actionBarItemBackground=0x7f030001;
  /**
  * Reference to a theme that should be used to inflate popups
  * shown by widgets in the action bar.
  * <p>May be a reference to another resource, in the form
  * ""<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>"" or a theme
  * attribute in the form
  * ""<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>"".
  */
  public static final",DO,
474,"break;
  case nullChar:
  t.error(this);
  t.tagPending.newAttribute();
  r.unconsume();
  t.transition(AttributeName);
  break;
  case eof:
  t.eofError(this);
  t.transition(Data);
  break;
  case '""':
  case '\'':
  case '<':
  case '=':
  t.error(this);
  t.tagPending.newAttribute();
  t.tagPending.appendAttributeName(c);
  t.transition(AttributeName);
  break;
  default: // A-Z, anything else
  t.tagPending.newAttribute();
  r.unconsume();
  t.transition(AttributeName);
  }
  }",C,
475,"(""head""));
  return tb.process(t);
  }
  return true;
  }
  },
  InHead {
  boolean process(Token t, HtmlTreeBuilder tb) {
  if (isWhitespace(t)) {
  tb.insert(t.asCharacter());
  return true;
  }
  switch (t.type) {
  case Comment:
  tb.insert(t.asComment());
  break;
  case Doctype:
  tb.error(this);
  return false;
  case StartTag:
  Token.StartTag start = t.asStartTag();
  String name = start.name();
  if (name.equals(""html"")) {
  return InBody.process(t, tb",C,
476,"* where sign is &plusmn;1, mantissa represents a fractional number between
  * zero and one. mant[0] is the least significant digit.
  * exp is in the range of -32767 to 32768</p>
  *
  * <p>IEEE 854-1987 Notes and differences</p>
  *
  * <p>IEEE 854 requires the radix to be either 2 or 10. The radix here is
  * 10000, so that requirement is not met, but it is possible that a
  * subclassed can",DO,
477,".getLastName()).isEqualTo(UPDATED_LASTNAME);
  assertThat(testUser.getEmail()).isEqualTo(UPDATED_EMAIL);
  assertThat(testUser.getImageUrl()).isEqualTo(UPDATED_IMAGEURL);
  assertThat(testUser.getLangKey()).isEqualTo(UPDATED_LANGKEY);
  }
 
  @Test
  @Transactional
  public void updateUserLogin() throws Exception {
  // Initialize the database
  userRepository.saveAndFlush(user);
  int databaseSizeBeforeUpdate = userRepository.findAll().size();
 
  // Update the user
  User updatedUser = userRepository.findById(user.getId()).get();
 
  ManagedUserVM managedUserVM = new ManagedUserVM();
  managedUserVM.setId(updatedUser.getId",T,
478,"tb.error(this);
  return false;
  } else {
  tb.process(new Token.StartTag(""head""));
  return tb.process(t);
  }
  return true;
  }
  },
  InHead {
  boolean process(Token t, HtmlTreeBuilder tb) {
  if (isWhitespace(t)) {
  tb.insert(t.asCharacter());
  return true;
  }
  switch (t.type) {
  case Comment:
  tb.insert(t.asComment());
  break;
  case Doctype:
  tb.error(this);
  return false;
  case StartTag:
  Token.StartTag start = t.asStartTag();
  String name",C,
479,"ReactNativePackage());
  return packages;
  }
 
  @Override
  protected String getJSMainModuleName() {
  return ""index"";
  }
  };
 
  @Override
  public ReactNativeHost getReactNativeHost() {
  return mReactNativeHost;
  }
 
  @Override
  public void onCreate() {
  super.onCreate();
  SoLoader.init(this, /* native exopackage */ false);
  initializeFlipper(this); // Remove this line if you don't want Flipper enabled
  }
 
  /**
  * Loads Flipper in React Native templates.
  *
  * @param context
  */
  private static void initializeFlipper(Context context) {
  if (BuildConfig.DEBUG) {
  try {",C,
480,"""Your"") shall mean an individual or Legal Entity
  * exercising permissions granted by this License.
  *
  * ""Source"" form shall mean the preferred form for making modifications,
  * including but not limited to software source code, documentation
  * source, and configuration files.
  *
  * ""Object"" form shall mean any form resulting from mechanical
  * transformation or translation of a Source form, including but
  * not limited to compiled object code, generated documentation,
  * and conversions to other media types.
  *
  * ""Work"" shall mean the work of authorship, whether in Source or
  * Object form, made available under the License, as indicated by",L,
481,"fragment case
  return false; // ignore
  } else {
  tb.framesetOk(false);
  Element body = stack.get(1);
  for (Attribute attribute : startTag.getAttributes()) {
  if (!body.hasAttr(attribute.getKey()))
  body.attributes().put(attribute);
  }
  }
  } else if (name.equals(""frameset"")) {
  tb.error(this);
  LinkedList<Element> stack = tb.getStack();
  if (stack.size() == 1 || (stack.size() > 2 &&!stack.get(1).nodeName().equals(""body""))) {
  // only in fragment case
  return false; // ignore
  } else if",C,
482,"_bottom=0x7f040008;
  public static final int abc_slide_out_top=0x7f040009;
  public static final int design_bottom_sheet_slide_in=0x7f04000a;
  public static final int design_bottom_sheet_slide_out=0x7f04000b;
  public static final int design_fab_in=0x7f04000c;
  public static final int design_fab_out=0x7f04000d;
  public static final int design_snackbar_in=0x7f",DI,
483,">:]<i>name</i></code>"".
  */
  public static final int actionModeWebSearchDrawable=0x7f010045;
  /** <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionOverflowButtonStyle=0x7f01000a;
  /** The name of an optional ActionProvider class to instantiate an action view
  and perform operations such as default action",DO,
484,"veira
  * Rosana Carvalho Barbosa
  * Sávio Luiz de Andrade Cavalcante
  * Tai Mu Shih
  * Thiago Augusto Souza do Nascimento
  * Tiago Moreno Rodrigues
  * Vivianne Barbosa Sousa
  *
  * Este programa é software livre; você pode redistribuí-lo e/ou
  * modificá-lo sob os termos de Licença Pública Geral GNU, conforme
  * publicada pela Free Software Foundation; versão 2 da
  * Licença.
  * Este programa é distribuído na expectativa de ser útil,",DO,
485,"ContactsContract.CommonDataKinds.Email.ADDRESS,
  ContactsContract.CommonDataKinds.Email.IS_PRIMARY,
  };
 
  int ADDRESS = 0;
  int IS_PRIMARY = 1;
  }
 
  /**
  * Represents an asynchronous login/registration task used to authenticate
  * the user.
  */
  public class UserLoginTask extends AsyncTask<Void, Void, Boolean> {
 
  private final String mEmail;
  private final String mPassword;
 
  UserLoginTask(String email, String password) {
  mEmail = email;
  mPassword = password;
  }
 
  @Override
  protected Boolean doInBackground(Void... params) {
  // TODO: attempt authentication against a network service",C,
486,"null) {
  synchronized (this) {
  if (_el_expressionfactory == null) {
  _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
  }
  }
  }
  return _el_expressionfactory;
  }
 
  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
  if (_jsp_instancemanager == null) {
  synchronized (this) {
  if (_jsp_instancemanager == null) {
  _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }
  }
  }
  return _jsp_instancemanager;
  }
 
  public",C,
487,"void read(Tokeniser t, CharacterReader r) {
  handleDataEndTag(t, r, ScriptData);
  }
  },
  ScriptDataEscapeStart {
  void read(Tokeniser t, CharacterReader r) {
  if (r.matches('-')) {
  t.emit('-');
  t.advanceTransition(ScriptDataEscapeStartDash);
  } else {
  t.transition(ScriptData);
  }
  }
  },
  ScriptDataEscapeStartDash {
  void read(Tokeniser t, CharacterReader r) {
  if (r.matches('-')) {
  t.emit('-');
  t.advanceTransition(ScriptDataEscapedDashDash);
  } else {
  t.transition(",L,
488,"SecurityContextHolder.getContext();
  return Optional.ofNullable(securityContext.getAuthentication())
  .filter(authentication -> authentication.getCredentials() instanceof String)
  .map(authentication -> (String) authentication.getCredentials());
  }
 
  /**
  * Check if a user is authenticated.
  *
  * @return true if the user is authenticated, false otherwise
  */
  public static boolean isAuthenticated() {
  SecurityContext securityContext = SecurityContextHolder.getContext();
  return Optional.ofNullable(securityContext.getAuthentication())
  .map(authentication -> authentication.getAuthorities().stream()
  .noneMatch(grantedAuthority -> grantedAuthority.getAuthority().equals(AuthoritiesConstants.ANONYMOUS)))",L,
489,", with the fields enclosed by brackets [] replaced by your own
  * identifying information: ""Portions Copyrighted [year]
  * [name of copyright owner]""
  * 
  * Contributor(s):
  * 
  * If you wish your version of this file to be governed by only the CDDL or
  * only the GPL Version 2, indicate your decision by adding ""[Contributor]
  * elects to include this software in this distribution under the [CDDL or GPL
  * Version 2] license."" If you don't indicate a single choice of license, a
  * recipient has the option to distribute your version of this file under
  * either the CDDL, the GPL Version 2 or to extend the choice",L,
490,"ONYMOUS_USER, ""test-type"", data);
  customAuditEventRepository.add(event);
  List<PersistentAuditEvent> persistentAuditEvents = persistenceAuditEventRepository.findAll();
  assertThat(persistentAuditEvents).hasSize(0);
  }
 
  @Test
  public void addAuditEventWithAuthorizationFailureType() {
  Map<String, Object> data = new HashMap<>();
  data.put(""test-key"", ""test-value"");
  AuditEvent event = new AuditEvent(""test-user"", ""AUTHORIZATION_FAILURE"", data);
  customAuditEventRepository.add(event);
  List<PersistentAuditEvent> persistentAuditEvents = persistenceAuditEventRepository.findAll();
  assertThat(persistentAuditEvents",T,
491,"}
  if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1]!= 0) {
  expected.append(""..."");
  }
  expected.append(eol).append("" "");
  }
  String retval = ""Encountered \"""";
  Token tok = currentToken.next;
  for (int i = 0; i < maxSize; i++) {
  if (i!= 0) retval += "" "";
  if (tok.kind == 0) {
  retval += tokenImage[0];
  break;
  }
  retval += "" "" + tokenImage[tok.kind];
  retval += "" \"""";
  retval += add_escapes(tok.image);",C,
492,"ender.start();
  }
  }
  }
  }
 
  /**
  * Logback configuration is achieved by configuration file and API.
  * When configuration file change is detected, the configuration is reset.
  * This listener ensures that the programmatic configuration is also re-applied after reset.
  */
  class LogbackLoggerContextListener extends ContextAwareBase implements LoggerContextListener {
 
  @Override
  public boolean isResetResistant() {
  return true;
  }
 
  @Override
  public void onStart(LoggerContext context) {
  addLogstashAppender(context);
  }
 
  @Override
  public void onReset(LoggerContext context) {
  addLogstashAppender(context);
  }
 
  @Override
  public void onStop",C,
493,"854-1987 as much as possible.
  * (See IEEE 854-1987 notes below)</li>
  * </ol></p>
  *
  * <p>Trade offs:
  * <ol>
  * <li>Memory foot print. I'm using more memory than necessary to
  * represent numbers to get better performance.</li>
  * <li>Digits are bigger, so rounding is a greater loss. So, if you
  * really need 12 decimal digits, better use 4 base 10000 digits
  * there can be one partially filled.</li>
  *",DO,
494,"{
  case Comment:
  tb.insert(t.asComment());
  break;
  case Doctype:
  tb.error(this);
  return false;
  case StartTag:
  Token.StartTag start = t.asStartTag();
  String name = start.name();
  if (name.equals(""html"")) {
  return InBody.process(t, tb);
  } else if (StringUtil.in(name, ""base"", ""basefont"", ""bgsound"", ""command"", ""link"")) {
  Element el = tb.insertEmpty(start);
  // jsoup special: update base the frist time it is seen
  if (name.equals(""base"") && el.hasAttr",C,
495,"(new Token.EndTag(""p""));
  }
  tb.insert(startTag);
  tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out
  } else if (name.equals(""button"")) {
  if (tb.inButtonScope(""button"")) {
  // close and reprocess
  tb.error(this);
  tb.process(new Token.EndTag(""button""));
  tb.process(startTag);
  } else {
  tb.reconstructFormattingElements();
  tb.insert(startTag);
  tb.framesetOk(false);
  }
  } else if (name.equals(""a"")) {
  if (tb.getActiveFormatting",C,
496,"7f030012;
  /**
  * Drawable to use for the Copy action button in Contextual Action Bar
  * <p>May be a reference to another resource, in the form
  * ""<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>"" or a theme
  * attribute in the form
  * ""<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>"".
  */
  public static final int actionModeCopyDrawable=0x7f030013;
  /**
  * Drawable to use for the Cut action button in Contextual Action Bar
  * <p>May be a reference",DO,
497,"Type() {
  persistenceAuditEventRepository.save(testUserEvent);
  persistenceAuditEventRepository.save(testOldUserEvent);
 
  testOtherUserEvent.setAuditEventType(testUserEvent.getAuditEventType());
  persistenceAuditEventRepository.save(testOtherUserEvent);
 
  PersistentAuditEvent testUserOtherTypeEvent = new PersistentAuditEvent();
  testUserOtherTypeEvent.setPrincipal(testUserEvent.getPrincipal());
  testUserOtherTypeEvent.setAuditEventType(""test-other-type"");
  testUserOtherTypeEvent.setAuditEventDate(testUserEvent.getAuditEventDate());
  persistenceAuditEventRepository.save(testUserOtherTypeEvent);
 
  List<AuditEvent> events",C,
498,"static final int ConstraintLayout_Layout_layout_constraintTop_toTopOf = 43;
  public static final int ConstraintLayout_Layout_layout_constraintVertical_bias = 44;
  public static final int ConstraintLayout_Layout_layout_constraintVertical_chainStyle = 45;
  public static final int ConstraintLayout_Layout_layout_constraintVertical_weight = 46;
  public static final int ConstraintLayout_Layout_layout_constraintWidth_default = 47;
  public static final int ConstraintLayout_Layout_layout_constraintWidth_max = 48;
  public static final int ConstraintLayout_Layout_layout_constraintWidth_min = 49;
  public",DI,
499,"can represent would be:
  * 1E(-(MIN_EXP-digits-1)*4), eg, for digits=5, MIN_EXP=-32767, that would
  * be 1e-131092.</p>
  *
  * <p>IEEE 854 defines that the implied radix point lies just to the right
  * of the most significant digit and to the left of the remaining digits.
  * This implementation puts the implied radix point to the left of all
  * digits including the most significant one. The most significant digit
  * here is the one just to the right of the radix point. This is a",DO,
500,"{
  t.error(this);
  t.emit('<'); // char that got us here
  t.transition(Data);
  }
  break;
  }
  }
  },
  EndTagOpen {
  void read(Tokeniser t, CharacterReader r) {
  if (r.isEmpty()) {
  t.eofError(this);
  t.emit(""</"");
  t.transition(Data);
  } else if (r.matchesLetter()) {
  t.createTagPending(false);
  t.transition(TagName);
  } else if (r.matches('>')) {
  t.error(this);
  t.advanceTransition(Data);
  } else {
  t.error(this);",C,
501,"expected doctypes
  // todo: quirk state check on doctype ids
  Token.Doctype d = t.asDoctype();
  DocumentType doctype = new DocumentType(d.getName(), d.getPublicIdentifier(), d.getSystemIdentifier(), tb.getBaseUri());
  tb.getDocument().appendChild(doctype);
  if (d.isForceQuirks())
  tb.getDocument().quirksMode(Document.QuirksMode.quirks);
  tb.transition(BeforeHtml);
  } else {
  // todo: check not iframe srcdoc
  tb.transition(BeforeHtml);
  return tb.process(t); // re-process token
  }
  return true;
  }
  },",C,
502,"License"") under any applicable laws result in
  * KNIME and ECLIPSE being a combined program, KNIME GMBH herewith grants
  * you the additional permission to use and propagate KNIME together with
  * ECLIPSE with only the license terms in place for ECLIPSE applying to
  * ECLIPSE and the GNU GPL Version 3 applying for KNIME, provided the
  * license terms of ECLIPSE themselves allow for the respective use and
  * propagation of ECLIPSE together with KNIME.
  *
  * Additional permission relating to nodes for KNIME that extend the Node
  * Extension (and in particular that are based",L,
503,"> values) {
  addCriterion(""updated in"", values, ""updated"");
  return (Criteria) this;
  }
 
  public Criteria andUpdatedNotIn(List<Date> values) {
  addCriterion(""updated not in"", values, ""updated"");
  return (Criteria) this;
  }
 
  public Criteria andUpdatedBetween(Date value1, Date value2) {
  addCriterion(""updated between"", value1, value2, ""updated"");
  return (Criteria) this;
  }
 
  public Criteria andUpdatedNotBetween(Date value1, Date value2) {
  addCriterion(""updated not between"", value1, value2, ""updated"");
  return (Criteria) this;
  }
  }
 
  public static class Criteria extends Generated",C,
504,"Validate the User in the database
  List<User> userList = userRepository.findAll();
  assertThat(userList).hasSize(databaseSizeBeforeCreate);
  }
 
  @Test
  @Transactional
  public void createUserWithExistingEmail() throws Exception {
  // Initialize the database
  userRepository.saveAndFlush(user);
  int databaseSizeBeforeCreate = userRepository.findAll().size();
 
  ManagedUserVM managedUserVM = new ManagedUserVM();
  managedUserVM.setLogin(""anotherlogin"");
  managedUserVM.setPassword(DEFAULT_PASSWORD);
  managedUserVM.setFirstName(DEFAULT_FIRSTNAME);
  managedUserVM.setLastName(DEFAULT_LASTNAME);
  managedUserVM.set",T,
505,"@Test
  public void testAddEventWithNullData() {
  Map<String, Object> data = new HashMap<>();
  data.put(""test-key"", null);
  AuditEvent event = new AuditEvent(""test-user"", ""test-type"", data);
  customAuditEventRepository.add(event);
  List<PersistentAuditEvent> persistentAuditEvents = persistenceAuditEventRepository.findAll();
  assertThat(persistentAuditEvents).hasSize(1);
  PersistentAuditEvent persistentAuditEvent = persistentAuditEvents.get(0);
  assertThat(persistentAuditEvent.getData().get(""test-key"")).isEqualTo(""null"");
  }
 
  @Test
  public void addAuditEventWithAnonymousUser() {
  Map",T,
506,"MainModuleName() {
  return ""index"";
  }
  };
 
  @Override
  public ReactNativeHost getReactNativeHost() {
  return mReactNativeHost;
  }
 
  @Override
  public void onCreate() {
  super.onCreate();
  SoLoader.init(this, /* native exopackage */ false);
  initializeFlipper(this); // Remove this line if you don't want Flipper enabled
  }
 
  /**
  * Loads Flipper in React Native templates.
  *
  * @param context
  */
  private static void initializeFlipper(Context context) {
  if (BuildConfig.DEBUG) {
  try {
  /*
  We use reflection here to pick up the class that initializes Flipper,",C,
507,"java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
  if (xmlWriter.getPrefix(namespace) == null) {
  xmlWriter.writeNamespace(prefix, namespace);
  xmlWriter.setPrefix(prefix, namespace);
  }
  xmlWriter.writeAttribute(namespace,attName,attValue);
  }
 
  /**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace,java.lang.String attName,
  java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml",C,
508,"02d;
  public static final int autoSizePresetSizes = 0x7f02002e;
  public static final int autoSizeStepGranularity = 0x7f02002f;
  public static final int autoSizeTextType = 0x7f020030;
  public static final int background = 0x7f020031;
  public static final int backgroundSplit = 0x7f020032;
  public static final int backgroundStacked = 0x7f020033;
  public static final int backgroundTint = 0x7f020034",DI,
509,"}
  tb.insert(startTag);
  } else if (StringUtil.in(name, ""dd"", ""dt"")) {
  tb.framesetOk(false);
  LinkedList<Element> stack = tb.getStack();
  for (int i = stack.size() - 1; i > 0; i--) {
  Element el = stack.get(i);
  if (StringUtil.in(el.nodeName(), ""dd"", ""dt"")) {
  tb.process(new Token.EndTag(el.nodeName()));
  break;
  }
  if (tb.isSpecial(el) &&!StringUtil.in(el.nodeName(), ""address"", ""div"", ""p""))
  break",C,
510,"f030018;
  public static final int actionModeShareDrawable = 0x7f030019;
  public static final int actionModeSplitBackground = 0x7f03001a;
  public static final int actionModeStyle = 0x7f03001b;
  public static final int actionModeWebSearchDrawable = 0x7f03001c;
  public static final int actionOverflowButtonStyle = 0x7f03001d;
  public static final int actionOverflowMenuStyle = 0x7f03001e;
  public static final int actionProviderClass = 0",DI,
511,"PROVIDED BY INTALIO, INC. AND CONTRIBUTORS
  * ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT
  * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
  * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
  * INTALIO, INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
  * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  * ARISING IN",L,
512,"9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9, // Decimal 128 - 139
  -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9, // Decimal 140 - 152
  -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9, // Decimal 153 - 165
  -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9, // Decimal 16",DI,
513,"InputStream!= null)
  {
  readerInputStream.close();
  }
  }
  catch (IOException exceptIO)
  {
  IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO);
  }
 
  try
  {
  if (streamFileInput!= null)
  {
  streamFileInput.close();
  }
  }
  catch (IOException exceptIO)
  {
  IO.logger.log(Level.WARNING, ""Error closing FileInputStream"", exceptIO);
  }
  }
  }
  }
  else
  {
  /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
  * but ensure data is inititialized before the Sink to avoid compiler errors */
  data =",C,
514,"(t, r, RawtextEndTagName, Rawtext);
  }
  },
  RawtextEndTagName {
  void read(Tokeniser t, CharacterReader r) {
  handleDataEndTag(t, r, Rawtext);
  }
  },
  ScriptDataLessthanSign {
  void read(Tokeniser t, CharacterReader r) {
  switch (r.consume()) {
  case '/':
  t.createTempBuffer();
  t.transition(ScriptDataEndTagOpen);
  break;
  case '!':
  t.emit(""<!"");
  t.transition(ScriptDataEscapeStart);
  break;
  default:
  t.emit(""<"");
  r.unconsume();
  t.transition",C,
515,"José Edmar de Siqueira
 * José Thiago Tenório Lopes
 * Kássia Regina Silvestre de Albuquerque
 * Leonardo Luiz Vieira da Silva
 * Márcio Roberto Batista da Silva
 * Maria de Fátima Sampaio Leite
 * Micaela Maria Coelho de Araújo
 * Nelson Mendonça de Carvalho
 * Newton Morais e Silva
 * Pedro Alexandre Santos da Silva Filho
 * Rafael Corrêa L",DO,
516,"0x7f020020;
  public static final int activityChooserViewStyle = 0x7f020021;
  public static final int alertDialogButtonGroupStyle = 0x7f020022;
  public static final int alertDialogCenterButtons = 0x7f020023;
  public static final int alertDialogStyle = 0x7f020024;
  public static final int alertDialogTheme = 0x7f020025;
  public static final int allowStacking = 0x7f020026;
  public static final int alpha =",DI,
517,"equals(""frameset"")) {
  tb.insert(startTag);
  tb.transition(InFrameset);
  } else if (StringUtil.in(name, ""base"", ""basefont"", ""bgsound"", ""link"", ""meta"", ""noframes"", ""script"", ""style"", ""title"")) {
  tb.error(this);
  Element head = tb.getHeadElement();
  tb.push(head);
  tb.process(t, InHead);
  tb.removeFromStack(head);
  } else if (name.equals(""head"")) {
  tb.error(this);
  return false;
  } else {
  anythingElse(t, tb);
  }
  } else if",C,
518,"i>type</i>/<i>name</i></code>"" or a theme
  * attribute in the form
  * ""<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>"".
  */
  public static final int actionBarPopupTheme=0x7f030002;
  /**
  * Size of the Action Bar, including the contextual
  * bar used to present Action Modes.
  * <p>May be a dimension value, which is a floating point number appended with a
  * unit such as ""<code>14.5sp</code>"".
  * Available units are: px (pixels), dp (density-independent pixels),
  *",DO,
519,"true;
  }
 
  private boolean anythingElse(Token t, HtmlTreeBuilder tb) {
  tb.process(new Token.StartTag(""body""));
  tb.framesetOk(true);
  return tb.process(t);
  }
  },
  InBody {
  boolean process(Token t, HtmlTreeBuilder tb) {
  switch (t.type) {
  case Character: {
  Token.Character c = t.asCharacter();
  if (c.getData().equals(nullString)) {
  // todo confirm that check
  tb.error(this);
  return false;
  } else if (isWhitespace(c)) {
  tb.reconstructFormattingElements();
  tb.insert(c);",C,
520,"WebView selection action modes 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionModeShareDrawable=0x7f010043;
  /** Background drawable to use for action mode UI in the lower split bar 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code",DO,
521,"including negligence), contract, or otherwise,
  * unless required by applicable law (such as deliberate and grossly
  * negligent acts) or agreed to in writing, shall any Contributor be
  * liable to You for damages, including any direct, indirect, special,
  * incidental, or consequential damages of any character arising as a
  * result of this License or out of the use or inability to use the
  * Work (including but not limited to damages for loss of goodwill,
  * work stoppage, computer failure or malfunction, or any and all
  * other commercial damages or losses), even if",L,
522,"26;
  public static final int alpha = 0x7f020027;
  public static final int alphabeticModifiers = 0x7f020028;
  public static final int arrowHeadLength = 0x7f020029;
  public static final int arrowShaftLength = 0x7f02002a;
  public static final int autoCompleteTextViewStyle = 0x7f02002b;
  public static final int autoSizeMaxTextSize = 0x7f02002c;
  public static final int autoSizeMinTextSize = 0x7f020",DI,
523,"HOLDERS AND CONTRIBUTORS ""AS IS"" AND 
  ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. 
  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, 
  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT 
  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
  POSSIBILITY OF SUCH DAMAGE.
  
 */
 
 //",L,
524,"but not limited to damages for loss of goodwill,
  * work stoppage, computer failure or malfunction, or any and all
  * other commercial damages or losses), even if such Contributor
  * has been advised of the possibility of such damages.
  *
  * 9. Accepting Warranty or Additional Liability. While redistributing
  * the Work or Derivative Works thereof, You may choose to offer,
  * and charge a fee for, acceptance of support, warranty, indemnity,
  * or other liability obligations and/or rights consistent with this
  * License. However, in accepting such obligations, You may act",L,
525,"int collapseIcon = 0x7f02004c;
  public static final int color = 0x7f02004d;
  public static final int colorAccent = 0x7f02004e;
  public static final int colorBackgroundFloating = 0x7f02004f;
  public static final int colorButtonNormal = 0x7f020050;
  public static final int colorControlActivated = 0x7f020051;
  public static final int colorControlHighlight = 0x7f020052;
  public static final int colorControlNormal = 0",DI,
526,"be null"");
  }
  criteria.add(new Criterion(condition, value1, value2));
  }
 
  public Criteria andIdIsNull() {
  addCriterion(""id is null"");
  return (Criteria) this;
  }
 
  public Criteria andIdIsNotNull() {
  addCriterion(""id is not null"");
  return (Criteria) this;
  }
 
  public Criteria andIdEqualTo(Long value) {
  addCriterion(""id ="", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdNotEqualTo(Long value) {
  addCriterion(""id <>"", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdGreaterThan(Long value) {
  addCriterion(""",C,
527,"0029;
  public static final int arrowShaftLength = 0x7f02002a;
  public static final int autoCompleteTextViewStyle = 0x7f02002b;
  public static final int autoSizeMaxTextSize = 0x7f02002c;
  public static final int autoSizeMinTextSize = 0x7f02002d;
  public static final int autoSizePresetSizes = 0x7f02002e;
  public static final int autoSizeStepGranularity = 0x7f02002f;
  public static final int autoSizeTextType =",DI,
528,"spec = 0x7f02000e;
  }
  public static final class attr {
  private attr() {}
 
  public static final int actionBarDivider = 0x7f030000;
  public static final int actionBarItemBackground = 0x7f030001;
  public static final int actionBarPopupTheme = 0x7f030002;
  public static final int actionBarSize = 0x7f030003;
  public static final int actionBarSplitStyle = 0x7f030004;
  public static final int actionBarStyle = 0x7f",DI,
529,"Repository.findAll();
  assertThat(userList).hasSize(databaseSizeBeforeCreate);
  }
 
  @Test
  @Transactional
  public void createUserWithExistingLogin() throws Exception {
  // Initialize the database
  userRepository.saveAndFlush(user);
  int databaseSizeBeforeCreate = userRepository.findAll().size();
 
  ManagedUserVM managedUserVM = new ManagedUserVM();
  managedUserVM.setLogin(DEFAULT_LOGIN);// this login should already be used
  managedUserVM.setPassword(DEFAULT_PASSWORD);
  managedUserVM.setFirstName(DEFAULT_FIRSTNAME);
  managedUserVM.setLastName(DEFAULT_LASTNAME);
  managedUserVM.setEmail(""anothermail@localhost"");",T,
530,"02a;
  public static final int autoCompleteTextViewStyle = 0x7f03002b;
  public static final int autoSizeMaxTextSize = 0x7f03002c;
  public static final int autoSizeMinTextSize = 0x7f03002d;
  public static final int autoSizePresetSizes = 0x7f03002e;
  public static final int autoSizeStepGranularity = 0x7f03002f;
  public static final int autoSizeTextType = 0x7f030030;
  public static final int background = 0x7",DI,
531,"*  products derived from this software without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES,
  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
  * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING",L,
532,"data = Integer.parseInt(stringNumber.trim());
  }
  catch(NumberFormatException exceptNumberFormat)
  {
  IO.logger.log(Level.WARNING, ""Number format exception parsing data from string"", exceptNumberFormat);
  }
  }
  }
  catch (IOException exceptIO)
  {
  IO.logger.log(Level.WARNING, ""Error with stream reading"", exceptIO);
  }
  finally
  {
  /* Close stream reading objects */
  try
  {
  if (readerBuffered!= null)
  {
  readerBuffered.close();
  }
  }
  catch (IOException exceptIO)
  {
  IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", exceptIO);
  }",C,
533,"getAuthority().equals(AuthoritiesConstants.ANONYMOUS)))
  .orElse(false);
  }
 
  /**
  * If the current user has a specific authority (security role).
  * <p>
  * The name of this method comes from the isUserInRole() method in the Servlet API
  *
  * @param authority the authority to check
  * @return true if the current user has the authority, false otherwise
  */
  public static boolean isCurrentUserInRole(String authority) {
  SecurityContext securityContext = SecurityContextHolder.getContext();
  return Optional.ofNullable(securityContext.getAuthentication())
  .map(authentication -> authentication.getAuthorities().stream()
  .anyMatch(granted",C,
534,">type</i>:<i>name</i></code>"") or
 theme attribute (in the form
 ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"")
 containing a value of this type.
  */
  public static final int actionBarSize=0x7f01000e;
  /** Reference to a theme that should be used to inflate widgets
  and layouts destined for the action bar. Most of the time
  this will be a reference to the current theme, but when
  the action bar has a significantly different contrast
  profile than the rest of the activity the difference
  can become important. If this is set to @null the current",DO,
535,"0300df, 0x7f0300e0, 0x7f0300e1, 0x7f030208 };
  public static final int FontFamilyFont_android_font = 0;
  public static final int FontFamilyFont_android_fontWeight = 1;
  public static final int FontFamilyFont_android_fontStyle = 2;
  public static final int FontFamilyFont_android_ttcIndex = 3;
  public static final int FontFamilyFont_android_fontVariationSettings = 4;
  public static final int FontFamilyFont_font = 5;
  public static final int FontFamilyFont",DI,
536,"value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdIn(List<Integer> values) {
  addCriterion(""id in"", values, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdNotIn(List<Integer> values) {
  addCriterion(""id not in"", values, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdBetween(Integer value1, Integer value2) {
  addCriterion(""id between"", value1, value2, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdNotBetween(Integer value1, Integer value2) {
  addCriterion(""id not between"", value1,",C,
537,"userList = userRepository.findAll();
  assertThat(userList).hasSize(databaseSizeBeforeUpdate);
  User testUser = userList.get(userList.size() - 1);
  assertThat(testUser.getLogin()).isEqualTo(UPDATED_LOGIN);
  assertThat(testUser.getFirstName()).isEqualTo(UPDATED_FIRSTNAME);
  assertThat(testUser.getLastName()).isEqualTo(UPDATED_LASTNAME);
  assertThat(testUser.getEmail()).isEqualTo(UPDATED_EMAIL);
  assertThat(testUser.getImageUrl()).isEqualTo(UPDATED_IMAGEURL);
  assertThat(testUser.getLangKey()).isEqualTo(UPDATED_LANGKEY);
  }
 
  @Test
  @Transactional
  public void updateUserExistingEmail",T,
538,"f030026;
  public static final int alpha = 0x7f030027;
  public static final int alphabeticModifiers = 0x7f030028;
  public static final int arrowHeadLength = 0x7f030029;
  public static final int arrowShaftLength = 0x7f03002a;
  public static final int autoCompleteTextViewStyle = 0x7f03002b;
  public static final int autoSizeMaxTextSize = 0x7f03002c;
  public static final int autoSizeMinTextSize = 0x",DI,
539,"Floating = 0x7f02004f;
  public static final int colorButtonNormal = 0x7f020050;
  public static final int colorControlActivated = 0x7f020051;
  public static final int colorControlHighlight = 0x7f020052;
  public static final int colorControlNormal = 0x7f020053;
  public static final int colorError = 0x7f020054;
  public static final int colorPrimary = 0x7f020055;
  public static final int colorPrimaryDark = 0x",DI,
540,"r.current()) {
  case '-':
  t.emit('-');
  t.advanceTransition(ScriptDataEscapedDash);
  break;
  case '<':
  t.advanceTransition(ScriptDataEscapedLessthanSign);
  break;
  case nullChar:
  t.error(this);
  r.advance();
  t.emit(replacementChar);
  break;
  default:
  String data = r.consumeToAny('-', '<', nullChar);
  t.emit(data);
  }
  }
  },
  ScriptDataEscapedDash {
  void read(Tokeniser t, CharacterReader r) {
  if (r.isEmpty()) {
  t.eofError(this);
  t.",C,
541,"();
  EvaluatorFilter<ILoggingEvent> metricsFilter = new EvaluatorFilter<>();
  metricsFilter.setContext(context);
  metricsFilter.setEvaluator(onMarkerMetricsEvaluator);
  metricsFilter.setOnMatch(FilterReply.DENY);
  metricsFilter.start();
 
  for (ch.qos.logback.classic.Logger logger : context.getLoggerList()) {
  for (Iterator<Appender<ILoggingEvent>> it = logger.iteratorForAppenders(); it.hasNext();) {
  Appender<ILoggingEvent> appender = it.next();
  if (!appender.getName().equals(ASYNC_LOGSTASH_APPENDER_NAME)) {
  log.debug(""Filter metrics logs from",C,
542,"<"", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdLessThanOrEqualTo(Long value) {
  addCriterion(""id <="", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdIn(List<Long> values) {
  addCriterion(""id in"", values, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdNotIn(List<Long> values) {
  addCriterion(""id not in"", values, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdBetween(Long value1, Long value2) {
  addCriterion(""id between"", value1, value2, ""id"");
  return",C,
543,"7f020011;
  public static final int actionModeCloseDrawable = 0x7f020012;
  public static final int actionModeCopyDrawable = 0x7f020013;
  public static final int actionModeCutDrawable = 0x7f020014;
  public static final int actionModeFindDrawable = 0x7f020015;
  public static final int actionModePasteDrawable = 0x7f020016;
  public static final int actionModePopupWindowStyle = 0x7f020017;
  public static final int actionModeSelect",DI,
544,"reflect the new ringtone display
  // name.
  String name = ringtone.getTitle(preference.getContext());
  preference.setSummary(name);
  }
  }
 
  } else {
  // For all other preferences, set the summary to the value's
  // simple string representation.
  preference.setSummary(stringValue);
  }
  return true;
  }
  };
 
  /**
  * Helper method to determine if the device has an extra-large screen. For
  * example, 10"" tablets are extra-large.
  */
  private static boolean isXLargeTablet(Context context) {
  return (context.getResources().getConfiguration().screenLayout
  & Configuration.SCREENLAYOUT_SIZE_MASK) >= Configuration",C,
545,"ViewFactory();
  getDelegate().onCreate(savedInstanceState);
  super.onCreate(savedInstanceState);
  }
 
  @Override
  protected void onPostCreate(Bundle savedInstanceState) {
  super.onPostCreate(savedInstanceState);
  getDelegate().onPostCreate(savedInstanceState);
  }
 
  public ActionBar getSupportActionBar() {
  return getDelegate().getSupportActionBar();
  }
 
  public void setSupportActionBar(@Nullable Toolbar toolbar) {
  getDelegate().setSupportActionBar(toolbar);
  }
 
  @Override
  public MenuInflater getMenuInflater() {
  return getDelegate().getMenuInflater();
  }
 
  @Override
  public void setContentView(@LayoutRes int layoutResID) {
  getDelegate().setContentView(layoutResID);",C,
546,"org/licenses/lgpl-3.0
  * 
  * You can obtain a copy of the LGPL 2.1 license at
  * http://www.opensource.org/licenses/lgpl-2.1
  * 
  * You can obtain a copy of the CDDL 1.0 license at
  * http://www.opensource.org/licenses/cddl1
  * 
  * You can obtain a copy of the EPL 1.0 license at
  * http://www.opensource.org/licenses/eclipse-1.0
  * 
  * See the Licenses for the specific language governing permissions and
  * limitations under the Licenses.
  * 
  * Alternatively, you can obtain a ro",L,
547,"()).isEqualTo(""test-user"");
  }
 
  @Test
  public void testFindByPrincipalIsNullAndAfterIsNull() {
  persistenceAuditEventRepository.save(testUserEvent);
  persistenceAuditEventRepository.save(testOtherUserEvent);
 
  List<AuditEvent> events = customAuditEventRepository.find(null, null);
  assertThat(events).hasSize(2);
  assertThat(events).extracting(""principal"")
  .containsExactlyInAnyOrder(""test-user"", ""other-test-user"");
  }
 
  @Test
  public void findByPrincipalAndType() {
  persistenceAuditEventRepository.save(testUserEvent);
  persistenceAuditEventRepository.save(testOldUserEvent);
 
  testOther",T,
548,"* Loads Flipper in React Native templates. Call this in the onCreate method with something like
  * initializeFlipper(this, getReactNativeHost().getReactInstanceManager());
  *
  * @param context
  * @param reactInstanceManager
  */
  private static void initializeFlipper(
  Context context, ReactInstanceManager reactInstanceManager) {
  if (BuildConfig.DEBUG) {
  try {
  /*
  We use reflection here to pick up the class that initializes Flipper,
  since Flipper library is not available in release mode
  */
  Class<?> aClass = Class.forName(""com.rndiffapp.ReactNativeFlipper"");
  aClass
  .getMethod(""initializeFlipper"", Context.class,",DO,
549,"_width = 0x7f050063;
  public static final int notification_main_column_padding_top = 0x7f050064;
  public static final int notification_media_narrow_margin = 0x7f050065;
  public static final int notification_right_icon_size = 0x7f050066;
  public static final int notification_right_side_padding_top = 0x7f050067;
  public static final int notification_small_icon_background_padding = 0x7f050068;
  public static final",DI,
550,"1 requests to the database. This is not a real issue as
  * we have by default a second-level cache. This means on the first HTTP call we do the n+1 requests,
  * but then all authorities come from the cache, so in fact it's much better than doing an outer join
  * (which will get lots of data from the database, for each HTTP call).</li>
  * <li> As this manages users, for security reasons, we'd rather have a DTO layer.</li>
  * </ul>
  * <p>
  * Another option would be to have a specific JPA entity graph to handle this case.
  */
 @RestController
 @RequestMapping(""/api"")",DO,
551,";
  }
 
  public void _jspInit() {
  }
 
  public void _jspDestroy() {
  }
 
  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
  throws java.io.IOException, javax.servlet.ServletException {
 
  final javax.servlet.jsp.PageContext pageContext;
  javax.servlet.http.HttpSession session = null;
  final javax.servlet.ServletContext application;
  final javax.servlet.ServletConfig config;
  javax.servlet.jsp.JspWriter out = null;
  final java.lang.Object page = this;
  javax.servlet.jsp.JspWriter _jspx_out = null",C,
552,"().size();
 
  ManagedUserVM managedUserVM = new ManagedUserVM();
  managedUserVM.setId(1L);
  managedUserVM.setLogin(DEFAULT_LOGIN);
  managedUserVM.setPassword(DEFAULT_PASSWORD);
  managedUserVM.setFirstName(DEFAULT_FIRSTNAME);
  managedUserVM.setLastName(DEFAULT_LASTNAME);
  managedUserVM.setEmail(DEFAULT_EMAIL);
  managedUserVM.setActivated(true);
  managedUserVM.setImageUrl(DEFAULT_IMAGEURL);
  managedUserVM.setLangKey(DEFAULT_LANGKEY);
  managedUserVM.setAuthorities(Collections.singleton(AuthoritiesConstants.USER));
 
  // An entity with an",C,
553,"(t.asEndTag().name(), ""head"", ""body"", ""html"", ""br""))) {
  tb.process(new Token.StartTag(""head""));
  return tb.process(t);
  } else if (t.isEndTag()) {
  tb.error(this);
  return false;
  } else {
  tb.process(new Token.StartTag(""head""));
  return tb.process(t);
  }
  return true;
  }
  },
  InHead {
  boolean process(Token t, HtmlTreeBuilder tb) {
  if (isWhitespace(t)) {
  tb.insert(t.asCharacter());
  return true;
  }
  switch (t.type)",C,
554,"hasSize(databaseSizeBeforeCreate);
  }
 
  @Test
  @Transactional
  public void createUserWithExistingLogin() throws Exception {
  // Initialize the database
  userRepository.saveAndFlush(user);
  int databaseSizeBeforeCreate = userRepository.findAll().size();
 
  ManagedUserVM managedUserVM = new ManagedUserVM();
  managedUserVM.setLogin(DEFAULT_LOGIN);// this login should already be used
  managedUserVM.setPassword(DEFAULT_PASSWORD);
  managedUserVM.setFirstName(DEFAULT_FIRSTNAME);
  managedUserVM.setLastName(DEFAULT_LASTNAME);
  managedUserVM.setEmail(""anothermail@localhost"");
  managedUserVM.setActivated(true);",T,
555,"EscapedDashDash {
  void read(Tokeniser t, CharacterReader r) {
  if (r.isEmpty()) {
  t.eofError(this);
  t.transition(Data);
  return;
  }
 
  char c = r.consume();
  switch (c) {
  case '-':
  t.emit(c);
  break;
  case '<':
  t.transition(ScriptDataEscapedLessthanSign);
  break;
  case '>':
  t.emit(c);
  t.transition(ScriptData);
  break;
  case nullChar:
  t.error(this);
  t.emit(replacementChar);
  t.transition(ScriptDataEscaped);
  break;",C,
556,"0#CL_INVALID_BUFFER_SIZE INVALID_BUFFER_SIZE} if size is 0.</li>
  * <li>{@link CL10#CL_INVALID_HOST_PTR INVALID_HOST_PTR} if {@code host_ptr} is {@code NULL} and {@link CL10#CL_MEM_USE_HOST_PTR MEM_USE_HOST_PTR} or {@link CL10#CL_MEM_COPY_HOST_PTR MEM_COPY_HOST_PTR} are set in flags or if {@code host_ptr} is not {@code NULL} but
  * {@link CL10#CL_MEM_COPY_HOST_PTR MEM_COPY_HOST_",DO,
557,"dos dedos, eran relativamente cortas. El género Gorgosaurus está íntimamente emparentado con Albertosaurus y, en menor proporción, con Tyrannosaurus. Los fósiles de Gorgosaurus y Albertosaurus, de hecho, son extremadamente similares, distinguiéndose sutilmente por pequeñas diferencias en los huesos del cráneo y los dientes, lo que hace que algunos expertos consideren a G. libratus como una de las especies, un sinónimo menor, del género Albertosaurus.",DO,
558,"return this.apiVersion;
 }
 
 public void setApiVersion(String apiVersion) {
 this.apiVersion = apiVersion;
 }
 
 public void setTerminalType(String terminalType){
 this.terminalType=terminalType;
 }
 
  public String getTerminalType(){
   return this.terminalType;
  }
 
  public void setTerminalInfo(String terminalInfo){
   this.terminalInfo=terminalInfo;
  }
 
  public String getTerminalInfo(){
   return this.terminalInfo;
  } 
 
 public void setProdCode(String prodCode) {
 this.prodCode=prodCode;
 }
 
 public String getProdCode() {",C,
559,"]));
  }
  }
  xmlWriter.writeCharacters(stringToWrite.toString());
  }
 
  }
 
 
  /**
  * Register a namespace prefix
  */
  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
  java.lang.String prefix = xmlWriter.getPrefix(namespace);
  if (prefix == null) {
  prefix = generatePrefix(namespace);
  javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
  while (true) {
  java.lang.String uri = nsContext.getNamespaceURI(prefix);
  if (uri",C,
560,"""<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>"" or a theme
  * attribute in the form
  * ""<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>"".
  */
  public static final int actionBarSplitStyle=0x7f030004;
  /**
  * Reference to a style for the Action Bar
  * <p>May be a reference to another resource, in the form
  * ""<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>"" or a theme
  * attribute in the form
  * ""<code>?[<i>package",DO,
561,">:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionBarWidgetTheme=0x7f01000d;
  /** Default action button style. 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int action",DO,
562,"/** Name for traps triggered by truncation. */
  private static final String TRUNC_TRAP = ""trunc"";
 
  /** Name for traps triggered by nextAfter. */
  private static final String NEXT_AFTER_TRAP = ""nextAfter"";
 
  /** Name for traps triggered by lessThan. */
  private static final String LESS_THAN_TRAP = ""lessThan"";
 
  /** Name for traps triggered by greaterThan. */
  private static final String GREATER_THAN_TRAP = ""greaterThan"";
 
  /** Name for traps triggered by newInstance. */
  private static final String NEW_INSTANCE_TRAP = ""newInstance"";
 
  /** Mantissa. */
  protected int[] mant;
 
  /**",DI,
563,"new ManagedUserVM();
  managedUserVM.setId(1L);
  managedUserVM.setLogin(DEFAULT_LOGIN);
  managedUserVM.setPassword(DEFAULT_PASSWORD);
  managedUserVM.setFirstName(DEFAULT_FIRSTNAME);
  managedUserVM.setLastName(DEFAULT_LASTNAME);
  managedUserVM.setEmail(DEFAULT_EMAIL);
  managedUserVM.setActivated(true);
  managedUserVM.setImageUrl(DEFAULT_IMAGEURL);
  managedUserVM.setLangKey(DEFAULT_LANGKEY);
  managedUserVM.setAuthorities(Collections.singleton(AuthoritiesConstants.USER));
 
  // An entity with an existing ID cannot be created, so this API call must",C,
564,"(Build.VERSION_CODES.HONEYCOMB)
  public static class NotificationPreferenceFragment extends PreferenceFragment {
  @Override
  public void onCreate(Bundle savedInstanceState) {
  super.onCreate(savedInstanceState);
  addPreferencesFromResource(R.xml.pref_notification);
  setHasOptionsMenu(true);
 
  // Bind the summaries of EditText/List/Dialog/Ringtone preferences
  // to their values. When their values change, their summaries are
  // updated to reflect the new value, per the Android Design
  // guidelines.
  bindPreferenceSummaryToValue(findPreference(""notifications_new_message_ringtone""));
  }
 
  @Override
  public boolean onOptionsItemSelected(MenuItem item) {
  int id",C,
565,#ERROR!,DI,
566,"actionLayout=0x7f01004e;
  /** TextAppearance style that will be applied to text that
  appears within action menu items. 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionMenuTextAppearance=0x7f010011;
  /** Color for text that appears within action menu items. 
  <p>May be a reference to another resource",DO,
567,"notification_media_narrow_margin = 0x7f060135;
  public static final int notification_right_icon_size = 0x7f060136;
  public static final int notification_right_side_padding_top = 0x7f060137;
  public static final int notification_small_icon_background_padding = 0x7f060138;
  public static final int notification_small_icon_size_as_large = 0x7f060139;
  public static final int notification_subtext_size = 0x7f06013",DI,
568,">package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionModeShareDrawable=0x7f010043;
  /** Background drawable to use for action mode UI in the lower split bar 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</",DO,
569,"transition(ScriptDataEndTagOpen);
  break;
  case '!':
  t.emit(""<!"");
  t.transition(ScriptDataEscapeStart);
  break;
  default:
  t.emit(""<"");
  r.unconsume();
  t.transition(ScriptData);
  }
  }
  },
  ScriptDataEndTagOpen {
  void read(Tokeniser t, CharacterReader r) {
  readEndTag(t, r, ScriptDataEndTagName, ScriptData);
  }
  },
  ScriptDataEndTagName {
  void read(Tokeniser t, CharacterReader r) {
  handleDataEndTag(t, r, ScriptData);
  }
  },
  ScriptDataEscapeStart {
  void read",C,
570,"</i>/<i>name</i></code>"" or a theme
  * attribute in the form
  * ""<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>"".
  */
  public static final int actionModeCloseButtonStyle=0x7f030011;
  /**
  * Drawable to use for the close action mode button
  * <p>May be a reference to another resource, in the form
  * ""<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>"" or a theme
  * attribute in the form
  * ""<code>?[<i>package</i>:]<i>type</i>/<i>",DO,
571,"static int abc_slide_in_bottom=0x7f040006;
  public static int abc_slide_in_top=0x7f040007;
  public static int abc_slide_out_bottom=0x7f040008;
  public static int abc_slide_out_top=0x7f040009;
  public static int design_bottom_sheet_slide_in=0x7f04000a;
  public static int design_bottom_sheet_slide_out=0x7f04000b;
  public static int design_fab_in=",DI,
572,"Layout_Layout_layout_constraintVertical_bias = 44;
  public static final int ConstraintLayout_Layout_layout_constraintVertical_chainStyle = 45;
  public static final int ConstraintLayout_Layout_layout_constraintVertical_weight = 46;
  public static final int ConstraintLayout_Layout_layout_constraintWidth_default = 47;
  public static final int ConstraintLayout_Layout_layout_constraintWidth_max = 48;
  public static final int ConstraintLayout_Layout_layout_constraintWidth_min = 49;
  public static final int ConstraintLayout_Layout_layout_constraintWidth_percent = 50;
  public static final int ConstraintLayout_",DI,
573,"value.
  * @param field field to which this instance belongs
  * @param x value to convert to an instance
  */
  protected Dfp(final DfpField field, int x) {
  this(field, (long) x);
  }
 
  /** Create an instance from a long value.
  * @param field field to which this instance belongs
  * @param x value to convert to an instance
  */
  protected Dfp(final DfpField field, long x) {
 
  // initialize as if 0
  mant = new int[field.getRadixDigits()];
  nans = FINITE;
  this.field = field;
 
  boolean isLongMin = false;
  if (x ==",C,
574,"Criteria andIdLessThan(Long value) {
  addCriterion(""id <"", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdLessThanOrEqualTo(Long value) {
  addCriterion(""id <="", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdIn(List<Long> values) {
  addCriterion(""id in"", values, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdNotIn(List<Long> values) {
  addCriterion(""id not in"", values, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdBetween(Long value1, Long value2) {
  addCriterion(""id",C,
575,"* risks associated with Your exercise of permissions under this License.
  *
  * 8. Limitation of Liability. In no event and under no legal theory,
  * whether in tort (including negligence), contract, or otherwise,
  * unless required by applicable law (such as deliberate and grossly
  * negligent acts) or agreed to in writing, shall any Contributor be
  * liable to You for damages, including any direct, indirect, special,
  * incidental, or consequential damages of any character arising as a
  * result of this License or out of the use or inability to use the
  * Work",L,
576,"0035;
  public static final int barLength = 0x7f020036;
  public static final int borderlessButtonStyle = 0x7f020039;
  public static final int buttonBarButtonStyle = 0x7f02003a;
  public static final int buttonBarNegativeButtonStyle = 0x7f02003b;
  public static final int buttonBarNeutralButtonStyle = 0x7f02003c;
  public static final int buttonBarPositiveButtonStyle = 0x7f02003d;
  public static final int buttonBarStyle = 0x7f020",DI,
577,"or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionBarWidgetTheme=0x7f01000d;
  /** Default action button style. 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionButtonStyle=0x7f010",DO,
578,"public ReactNativeHost getReactNativeHost() {
  return mReactNativeHost;
  }
 
  @Override
  public void onCreate() {
  super.onCreate();
  SoLoader.init(this, /* native exopackage */ false);
  initializeFlipper(this, getReactNativeHost().getReactInstanceManager());
  }
 
  /**
  * Loads Flipper in React Native templates. Call this in the onCreate method with something like
  * initializeFlipper(this, getReactNativeHost().getReactInstanceManager());
  *
  * @param context
  * @param reactInstanceManager
  */
  private static void initializeFlipper(
  Context context, ReactInstanceManager reactInstanceManager) {
  if (BuildConfig.DEBUG",DO,
579,"0x7f01006c;
  /** Specifies a background drawable for the action bar. 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int background=0x7f01002f;
  /** Specifies a background drawable for the bottom component of a split action bar. 
  <p>May be a reference to another resource, in the form ""<code>@[+][<i>",DO,
580,". Set to 10000 */
  public static final int RADIX = 10000;
 
  /** The minimum exponent before underflow is signaled. Flush to zero
  * occurs at minExp-DIGITS */
  public static final int MIN_EXP = -32767;
 
  /** The maximum exponent before overflow is signaled and results flushed
  * to infinity */
  public static final int MAX_EXP = 32768;
 
  /** The amount under/overflows are scaled by before going to trap handler */
  public static final int ERR_SCALE = 32760;
 
  /** Indicator value for normal finite numbers. */
  public",DO,
581,"{
  entityAudit = new EntityAudit();
  }
  if (getPrimaryKey() == null) {
  this.entityAudit.setCreatedBy(userId);
  this.systemInfo.setActiveStatus(1);
  } else {
  this.entityAudit.setUpdatedBy(userId);
  }
  }
 
  @JsonIgnore
  public String getLoggedInUserInfo() {
  String auditInfo = """";
  if (this.entityAudit!= null) {
  auditInfo = entityAudit.toString();
  }
  return auditInfo;
  }
 
  @Override
  @JsonIgnore
  public void setSystemInformation(RECORD_TYPE recordType) {
  if (systemInfo == null) {
  systemInfo = new SystemInfo();
  }
  if (",C,
582,"INVALID_VALUE} if values specified in flags are not valid as defined in table 5.3.</li>
  * <li>{@link CL10#CL_INVALID_BUFFER_SIZE INVALID_BUFFER_SIZE} if size is 0.</li>
  * <li>{@link CL10#CL_INVALID_HOST_PTR INVALID_HOST_PTR} if {@code host_ptr} is {@code NULL} and {@link CL10#CL_MEM_USE_HOST_PTR MEM_USE_HOST_PTR} or {@link CL10#CL_MEM_COPY_HOST_PTR MEM_COPY_HOST_PTR} are set in flags or if {@code host_ptr",DO,
583,"BarSplitStyle=0x7f030004;
  /**
  * Reference to a style for the Action Bar
  * <p>May be a reference to another resource, in the form
  * ""<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>"" or a theme
  * attribute in the form
  * ""<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>"".
  */
  public static final int actionBarStyle=0x7f030005;
  /**
  * <p>May be a reference to another resource, in the form
  * ""<code>@[+][<i>package",DO,
584,"* Contributor(s):
  *
  * If you wish your version of this file to be governed by only the CDDL or
  * only the GPL Version 2, indicate your decision by adding ""[Contributor]
  * elects to include this software in this distribution under the [CDDL or GPL
  * Version 2] license."" If you don't indicate a single choice of license, a
  * recipient has the option to distribute your version of this file under
  * either the CDDL, the GPL Version 2 or to extend the choice of license to
  * its licensees as provided above. However, if you add GPL Version 2 code
  * and therefore, elected the GPL Version 2 license,",L,
585,"dan a este género. Los paleontólogos admiten únicamente la especie G. libratus, aunque otras especies fueron incluidas erróneamente en este género. Como todos los tiranosáuridos conocidos, Gorgosaurus fue un bípedo depredador que en su madurez pesaba más de una tonelada y medía nueve metros de largo. Mostraba docenas de afilados dientes alineados en sus mandíbulas, mientras que sus extremidades anteriores, con dos dedos, eran relativamente cortas.",DO,
586,#ERROR!,C,
587,"void read(Tokeniser t, CharacterReader r) {
  Character c = t.consumeCharacterReference(null, false);
  if (c == null)
  t.emit('&');
  else
  t.emit(c);
  t.transition(Rcdata);
  }
  },
  Rawtext {
  void read(Tokeniser t, CharacterReader r) {
  switch (r.current()) {
  case '<':
  t.advanceTransition(RawtextLessthanSign);
  break;
  case nullChar:
  t.error(this);
  r.advance();
  t.emit(replacementChar);
  break;
  case eof:
  t.emit(new Token.EOF());
  break;",C,
588,"int abc_slide_in_top=0x7f040007;
  public static int abc_slide_out_bottom=0x7f040008;
  public static int abc_slide_out_top=0x7f040009;
  public static int design_bottom_sheet_slide_in=0x7f04000a;
  public static int design_bottom_sheet_slide_out=0x7f04000b;
  public static int design_fab_in=0x7f04000c;
  public static int design_fab_out=0x7",DI,
589,"tb.transition(InFrameset);
  } else if (StringUtil.in(name, ""base"", ""basefont"", ""bgsound"", ""link"", ""meta"", ""noframes"", ""script"", ""style"", ""title"")) {
  tb.error(this);
  Element head = tb.getHeadElement();
  tb.push(head);
  tb.process(t, InHead);
  tb.removeFromStack(head);
  } else if (name.equals(""head"")) {
  tb.error(this);
  return false;
  } else {
  anythingElse(t, tb);
  }
  } else if (t.isEndTag()) {
  if (StringUtil.in",C,
590,";
  if (x == Long.MIN_VALUE) {
  // special case for Long.MIN_VALUE (-9223372036854775808)
  // we must shift it before taking its absolute value
  isLongMin = true;
  ++x;
  }
 
  // set the sign
  if (x < 0) {
  sign = -1;
  x = -x;
  } else {
  sign = 1;
  }
 
  exp = 0;
  while (x!= 0) {
  System.arraycopy(mant, mant.length - exp, mant, mant.length - 1 - exp, exp",C,
591,"<"", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdLessThanOrEqualTo(Long value) {
  addCriterion(""id <="", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdIn(List<Long> values) {
  addCriterion(""id in"", values, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdNotIn(List<Long> values) {
  addCriterion(""id not in"", values, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdBetween(Long value1, Long value2) {
  addCriterion(""id between"", value1, value2, ""id"");
  return",C,
592,"namespace);
  xmlWriter.writeAttribute(namespace, attName, attributeValue);
  }
  }
  /**
  * method to handle Qnames
  */
 
  private void writeQName(javax.xml.namespace.QName qname,
  javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
  java.lang.String namespaceURI = qname.getNamespaceURI();
  if (namespaceURI!= null) {
  java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
  if (prefix == null) {
  prefix = generatePrefix(namespaceURI);
  xmlWriter.writeNamespace(prefix, namespaceURI);
  xmlWriter.setPrefix",C,
593,"t, Data);
  }
  },
  Rcdata {
  /// handles data in title, textarea etc
  void read(Tokeniser t, CharacterReader r) {
  switch (r.current()) {
  case '&':
  t.advanceTransition(CharacterReferenceInRcdata);
  break;
  case '<':
  t.advanceTransition(RcdataLessthanSign);
  break;
  case nullChar:
  t.error(this);
  r.advance();
  t.emit(replacementChar);
  break;
  case eof:
  t.emit(new Token.EOF());
  break;
  default:
  String data = r.consumeToAny('&', '<', nullChar);
  t.emit(data",C,
594,"Configuration(TaskExecutionProperties taskExecutionProperties) {
  this.taskExecutionProperties = taskExecutionProperties;
  }
 
  @Override
  @Bean(name = ""taskExecutor"")
  public Executor getAsyncExecutor() {
  log.debug(""Creating Async Task Executor"");
  ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();
  executor.setCorePoolSize(taskExecutionProperties.getPool().getCoreSize());
  executor.setMaxPoolSize(taskExecutionProperties.getPool().getMaxSize());
  executor.setQueueCapacity(taskExecutionProperties.getPool().getQueueCapacity());
  executor.setThreadNamePrefix(taskExecutionProperties.getThreadNamePrefix());
  return new ExceptionHandlingAsyncTaskExecutor(executor);
  }
 
  @Override",C,
595,"should be faster to operate
  * on 4 decimal digits at once instead of one at a time. Radix 10 behavior
  * can be realized by adding an additional rounding step to ensure that
  * the number of decimal digits represented is constant.</p>
  *
  * <p>The IEEE standard specifically leaves out internal data encoding,
  * so it is reasonable to conclude that such a subclass of this radix
  * 10000 system is merely an encoding of a radix 10 system.</p>
  *
  * <p>IEEE 854 also specifies the existence of ""sub-normal"" numbers. This
  * class does not contain",L,
596,".error(this);
  tb.process(new Token.EndTag(""a""));
 
  // still on stack?
  Element remainingA = tb.getFromStack(""a"");
  if (remainingA!= null) {
  tb.removeFromActiveFormattingElements(remainingA);
  tb.removeFromStack(remainingA);
  }
  }
  tb.reconstructFormattingElements();
  Element a = tb.insert(startTag);
  tb.pushActiveFormattingElements(a);
  } else if (StringUtil.in(name,
  ""b"", ""big"", ""code"", ""em"", ""font"", ""i"", ""s"", ""small"", ""strike"", ""strong"", ""tt"", ""u"")) {",C,
597,"use and
  * propagation of ECLIPSE together with KNIME.
  *
  * Additional permission relating to nodes for KNIME that extend the Node
  * Extension (and in particular that are based on subclasses of NodeModel,
  * NodeDialog, and NodeView) and that only interoperate with KNIME through
  * standard APIs (""Nodes""):
  * Nodes are deemed to be separate and independent programs and to not be
  * covered works. Notwithstanding anything to the contrary in the
  * License, the License does not apply to Nodes, you are not required to
  * license Nodes under the License, and you are granted a license to
  *",L,
598,"actionModeBackground = 0x7f020010;
  public static final int actionModeCloseButtonStyle = 0x7f020011;
  public static final int actionModeCloseDrawable = 0x7f020012;
  public static final int actionModeCopyDrawable = 0x7f020013;
  public static final int actionModeCutDrawable = 0x7f020014;
  public static final int actionModeFindDrawable = 0x7f020015;
  public static final int actionModePasteDrawable = 0x7f020016;
  public",DI,
599,"java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
  if (namespace.equals("""")) {
  xmlWriter.writeAttribute(attName,attValue);
  } else {
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
  }
  }
 
 
  /**
  * Util method to write an attribute without the ns prefix
  */
  private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml",C,
600,"1 license at
  * http://www.opensource.org/licenses/lgpl-2.1
  * 
  * You can obtain a copy of the CDDL 1.0 license at
  * http://www.opensource.org/licenses/cddl1
  * 
  * You can obtain a copy of the EPL 1.0 license at
  * http://www.opensource.org/licenses/eclipse-1.0
  * 
  * See the Licenses for the specific language governing permissions and
  * limitations under the Licenses.
  * 
  * Alternatively, you can obtain a royalty free commercial license with less
  * limitations, transferable or non-transferable, directly at
  * http://",L,
601,"* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE IMPLIED WARRANTIES OF
  * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE OR NONINFRINGEMENT.
  * NEITHER DOES MEDIATEK PROVIDE ANY WARRANTY WHATSOEVER WITH RESPECT TO THE
  * SOFTWARE OF ANY THIRD PARTY WHICH MAY BE USED BY, INCORPORATED IN, OR
  * SUPPLIED WITH THE MEDIATEK SOFTWARE, AND RECEIVER AGREES TO LOOK ONLY TO SUCH
  * THIRD PARTY FOR ANY WARRANTY CLAIM RELATING THERETO. RECEIVER EXPRESSLY ACKNOWLEDGES
  * THAT IT IS RECEIVER'S SOLE RESPONSIBILITY TO OBTAIN FROM ANY",L,
602,"</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int activityChooserViewStyle=0x7f01006c;
  /** Specifies a background drawable for the action bar. 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int background=0x7f01002f;
  /** Specifies a background drawable for",DO,
603,");
  } else {
  builder
  .withCause(((DefaultProblem) problem).getCause())
  .withDetail(problem.getDetail())
  .withInstance(problem.getInstance());
  problem.getParameters().forEach(builder::with);
  if (!problem.getParameters().containsKey(MESSAGE_KEY) && problem.getStatus()!= null) {
  builder.with(MESSAGE_KEY, ""error.http."" + problem.getStatus().getStatusCode());
  }
  }
  return new ResponseEntity<>(builder.build(), entity.getHeaders(), entity.getStatusCode());
  }
 
  @Override
  public ResponseEntity<Problem> handleMethodArgumentNotValid(MethodArgumentNotValidException ex, @Nonnull NativeWebRequest request) {
  BindingResult result =",C,
604,"Appenders(); it.hasNext();) {
  Appender<ILoggingEvent> appender = it.next();
  if (!appender.getName().equals(ASYNC_LOGSTASH_APPENDER_NAME)) {
  log.debug(""Filter metrics logs from the {} appender"", appender.getName());
  appender.setContext(context);
  appender.addFilter(metricsFilter);
  appender.start();
  }
  }
  }
  }
 
  /**
  * Logback configuration is achieved by configuration file and API.
  * When configuration file change is detected, the configuration is reset.
  * This listener ensures that the programmatic configuration is also re-applied after reset.
  */
  class Logback",C,
605,"(FilterReply.DENY);
  metricsFilter.start();
 
  for (ch.qos.logback.classic.Logger logger : context.getLoggerList()) {
  for (Iterator<Appender<ILoggingEvent>> it = logger.iteratorForAppenders(); it.hasNext();) {
  Appender<ILoggingEvent> appender = it.next();
  if (!appender.getName().equals(ASYNC_LOGSTASH_APPENDER_NAME)) {
  log.debug(""Filter metrics logs from the {} appender"", appender.getName());
  appender.setContext(context);
  appender.addFilter(metricsFilter);
  appender.start();
  }
  }
  }
  }
 
  /**",C,
606,"User.getImageUrl()).isEqualTo(UPDATED_IMAGEURL);
  assertThat(testUser.getLangKey()).isEqualTo(UPDATED_LANGKEY);
  }
 
  @Test
  @Transactional
  public void updateUserLogin() throws Exception {
  // Initialize the database
  userRepository.saveAndFlush(user);
  int databaseSizeBeforeUpdate = userRepository.findAll().size();
 
  // Update the user
  User updatedUser = userRepository.findById(user.getId()).get();
 
  ManagedUserVM managedUserVM = new ManagedUserVM();
  managedUserVM.setId(updatedUser.getId());
  managedUserVM.setLogin(UPDATED_LOGIN);
  managedUserVM.setPassword(UPDATED_PASSWORD);
  managedUserVM",T,
607,"SHALL THE COPYRIGHT HOLDER OR HOLDERS
  * INCLUDED IN THIS NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL INDIRECT OR
  * CONSEQUENTIAL DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
  * DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER
  * TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE
  * OF THE DATA FILES OR SOFTWARE.
  *
  * Except as contained in this notice, the name of a copyright holder shall not
  * be used in advertising or otherwise to promote the sale, use or other
  * dealings in these Data Files or Software without prior written authorization
  * of the copyright holder.
  */
 
 package",L,
608,"addCriterion(""id <="", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdIn(List<Integer> values) {
  addCriterion(""id in"", values, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdNotIn(List<Integer> values) {
  addCriterion(""id not in"", values, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdBetween(Integer value1, Integer value2) {
  addCriterion(""id between"", value1, value2, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdNotBetween(Integer value1, Integer value2) {
  addCriterion(""id not",C,
609,"exp;
  }
  } else {
  // normal case
  fpdecimal = s;
  }
 
  // If there is a minus sign in the number then it is negative
  if (fpdecimal.indexOf(""-"")!= -1) {
  sign = -1;
  }
 
  // First off, find all of the leading zeros, trailing zeros, and significant digits
  p = 0;
 
  // Move p to first significant digit
  int decimalPos = 0;
  for (;;) {
  if (fpdecimal.charAt(p) >= '1' && fpdecimal.charAt(p) <= '9') {
  break;
  }
 
  if (decimalFound && fpdecimal.charAt(p) == '0",C,
610,">wrap_content</td><td>0</td><td></td></tr>
  * </table>
  */
  public static final int actionBarSize=0x7f030003;
  /**
  * Reference to a style for the split Action Bar. This style
  * controls the split component that holds the menu/action
  * buttons. actionBarStyle is still used for the primary
  * bar.
  * <p>May be a reference to another resource, in the form
  * ""<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>"" or a theme
  * attribute in the form
  * ""<code>?[<i>package</",DO,
611,"Object"" form shall mean any form resulting from mechanical
  * transformation or translation of a Source form, including but
  * not limited to compiled object code, generated documentation,
  * and conversions to other media types.
  *
  * ""Work"" shall mean the work of authorship, whether in Source or
  * Object form, made available under the License, as indicated by a
  * copyright notice that is included in or attached to the work
  * (an example is provided in the Appendix below).
  *
  * ""Derivative Works"" shall mean any work, whether in Source or Object
  * form, that is based on (or derived from) the Work and for which",L,
612,"super.onCreate();
  SoLoader.init(this, /* native exopackage */ false);
  initializeFlipper(this); // Remove this line if you don't want Flipper enabled
  }
 
  /**
  * Loads Flipper in React Native templates.
  *
  * @param context
  */
  private static void initializeFlipper(Context context) {
  if (BuildConfig.DEBUG) {
  try {
  /*
  We use reflection here to pick up the class that initializes Flipper,
  since Flipper library is not available in release mode
  */
  Class<?> aClass = Class.forName(""com.facebook.flipper.ReactNativeFlipper"");
  aClass.getMethod(""initializeFlipper"", Context.",C,
613,"public static final int autoSizeMinTextSize = 0x7f02002d;
  public static final int autoSizePresetSizes = 0x7f02002e;
  public static final int autoSizeStepGranularity = 0x7f02002f;
  public static final int autoSizeTextType = 0x7f020030;
  public static final int background = 0x7f020031;
  public static final int backgroundSplit = 0x7f020032;
  public static final int backgroundStacked = 0x7f020033;",DI,
614,"inclusion in the Work by the copyright owner
  * or by an individual or Legal Entity authorized to submit on behalf of
  * the copyright owner. For the purposes of this definition, ""submitted""
  * means any form of electronic, verbal, or written communication sent
  * to the Licensor or its representatives, including but not limited to
  * communication on electronic mailing lists, source code control systems,
  * and issue tracking systems that are managed by, or on behalf of, the
  * Licensor for the purpose of discussing and improving the Work, but
  * excluding communication that is conspicuously marked or otherwise
  * designated in writing by the copyright owner as",L,
615,"ual underflow""
  * by raising the underflow flag for numbers less with exponent less than
  * expMin, but don't flush to zero until the exponent reaches MIN_EXP-digits.
  * Thus the smallest number we can represent would be:
  * 1E(-(MIN_EXP-digits-1)*4), eg, for digits=5, MIN_EXP=-32767, that would
  * be 1e-131092.</p>
  *
  * <p>IEEE 854 defines that the implied radix point lies just to the right
  * of the most significant digit and to the left of the remaining digits",DO,
616,");
  xmlWriter.setPrefix(prefix, namespace);
  }
  }
  
  /**
  * Util method to write an attribute with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
  java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
  if (xmlWriter.getPrefix(namespace) == null) {
  xmlWriter.writeNamespace(prefix, namespace);
  xmlWriter.setPrefix(prefix, namespace);
  }
  xmlWriter.writeAttribute(namespace,attName,attValue);
  }
 
  /**",C,
617,"}
 
  @Override
  protected void onPostCreate(Bundle savedInstanceState) {
  super.onPostCreate(savedInstanceState);
  getDelegate().onPostCreate(savedInstanceState);
  }
 
  public ActionBar getSupportActionBar() {
  return getDelegate().getSupportActionBar();
  }
 
  public void setSupportActionBar(@Nullable Toolbar toolbar) {
  getDelegate().setSupportActionBar(toolbar);
  }
 
  @Override
  public MenuInflater getMenuInflater() {
  return getDelegate().getMenuInflater();
  }
 
  @Override
  public void setContentView(@LayoutRes int layoutResID) {
  getDelegate().setContentView(layoutResID);
  }
 
  @Override
  public void setContentView(View view) {
  getDelegate().setContentView",C,
618,"* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  * ARE DISCLAIMED. IN NO EVENT SHALL HSQL DEVELOPMENT GROUP, HSQLDB.ORG,
  * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
  * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
  * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  * SOFTWARE, EVEN",L,
619,"(item);
  }
  }
 
  /**
  * This fragment shows data and sync preferences only. It is used when the
  * activity is showing a two-pane settings UI.
  */
  @TargetApi(Build.VERSION_CODES.HONEYCOMB)
  public static class DataSyncPreferenceFragment extends PreferenceFragment {
  @Override
  public void onCreate(Bundle savedInstanceState) {
  super.onCreate(savedInstanceState);
  addPreferencesFromResource(R.xml.pref_data_sync);
  setHasOptionsMenu(true);
 
  // Bind the summaries of EditText/List/Dialog/Ringtone preferences
  // to their values. When their values change, their summaries are
  // updated to reflect the new value,",C,
620,");
  metricsFilter.start();
 
  for (ch.qos.logback.classic.Logger logger : context.getLoggerList()) {
  for (Iterator<Appender<ILoggingEvent>> it = logger.iteratorForAppenders(); it.hasNext();) {
  Appender<ILoggingEvent> appender = it.next();
  if (!appender.getName().equals(ASYNC_LOGSTASH_APPENDER_NAME)) {
  log.debug(""Filter metrics logs from the {} appender"", appender.getName());
  appender.setContext(context);
  appender.addFilter(metricsFilter);
  appender.start();
  }
  }
  }
  }
 
  /**
  * Logback configuration is",C,
621,"NotBetween(Date value1, Date value2) {
  addCriterion(""updated not between"", value1, value2, ""updated"");
  return (Criteria) this;
  }
  }
 
  public static class Criteria extends GeneratedCriteria {
 
  protected Criteria() {
  super();
  }
  }
 
  public static class Criterion {
  private String condition;
 
  private Object value;
 
  private Object secondValue;
 
  private boolean noValue;
 
  private boolean singleValue;
 
  private boolean betweenValue;
 
  private boolean listValue;
 
  private String typeHandler;
 
  public String getCondition() {
  return condition;
  }
 
  public Object getValue() {
  return value;
  }
 
  public Object getSecondValue() {
  return secondValue",C,
622,"(getActivity(), SettingsActivity.class));
  return true;
  }
  return super.onOptionsItemSelected(item);
  }
  }
 
  /**
  * This fragment shows notification preferences only. It is used when the
  * activity is showing a two-pane settings UI.
  */
  @TargetApi(Build.VERSION_CODES.HONEYCOMB)
  public static class NotificationPreferenceFragment extends PreferenceFragment {
  @Override
  public void onCreate(Bundle savedInstanceState) {
  super.onCreate(savedInstanceState);
  addPreferencesFromResource(R.xml.pref_notification);
  setHasOptionsMenu(true);
 
  // Bind the summaries of EditText/List/Dialog/Ringtone preferences
  // to their values. When their",C,
623,".field = field;
  }
 
  /** Create an instance from a byte value.
  * @param field field to which this instance belongs
  * @param x value to convert to an instance
  */
  protected Dfp(final DfpField field, byte x) {
  this(field, (long) x);
  }
 
  /** Create an instance from an int value.
  * @param field field to which this instance belongs
  * @param x value to convert to an instance
  */
  protected Dfp(final DfpField field, int x) {
  this(field, (long) x);
  }
 
  /** Create an instance from a long value.
  * @param field field to which this instance belongs",C,
624,"_chip_state_list_anim = 0x7f020006;
  public static final int mtrl_extended_fab_change_size_motion_spec = 0x7f020007;
  public static final int mtrl_extended_fab_hide_motion_spec = 0x7f020008;
  public static final int mtrl_extended_fab_show_motion_spec = 0x7f020009;
  public static final int mtrl_extended_fab_state_list_animator = 0x7f02000a;
  public static final int m",DI,
625,"RV
  *  Metrics, Stochastic Evolution and Option Pricing, Interest Rate Dynamics and Option Pricing, LMM
  *  Extensions/Calibrations/Greeks, Algorithmic Differentiation, and Asset Backed Models and Analytics.
  * 
  * - DRIP Asset Allocation: Library for model libraries for MPT framework, Black Litterman Strategy
  *  Incorporator, Holdings Constraint, and Transaction Costs.
  * 
  * - DRIP Numerical Optimizer: Library for Numerical Optimization and Spline Functionality.
  * 
  * - DRIP Statistical Learning: Library for Statistical Evaluation and Machine Learning.
  * 
  *",DO,
626,"41;
  public static final int ConstraintLayout_Layout_layout_constraintTop_toBottomOf = 42;
  public static final int ConstraintLayout_Layout_layout_constraintTop_toTopOf = 43;
  public static final int ConstraintLayout_Layout_layout_constraintVertical_bias = 44;
  public static final int ConstraintLayout_Layout_layout_constraintVertical_chainStyle = 45;
  public static final int ConstraintLayout_Layout_layout_constraintVertical_weight = 46;
  public static final int ConstraintLayout_Layout_layout_constraintWidth_default = 47;
  public static final int ConstraintLayout_Layout_layout_constraintWidth_",DI,
627,"000f;
  public static final int actionModeBackground = 0x7f040010;
  public static final int actionModeCloseButtonStyle = 0x7f040011;
  public static final int actionModeCloseDrawable = 0x7f040012;
  public static final int actionModeCopyDrawable = 0x7f040013;
  public static final int actionModeCutDrawable = 0x7f040014;
  public static final int actionModeFindDrawable = 0x7f040015;
  public static final int actionModePasteDrawable = 0x7",DI,
628,";
  }
 
  public Criteria andIdEqualTo(Long value) {
  addCriterion(""id ="", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdNotEqualTo(Long value) {
  addCriterion(""id <>"", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdGreaterThan(Long value) {
  addCriterion(""id >"", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdGreaterThanOrEqualTo(Long value) {
  addCriterion(""id >="", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdLessThan(Long value) {
  addCriterion(""id <"", value, ""id",C,
629,"public static final int GradientColor_android_centerColor = 7;
  public static final int GradientColor_android_startX = 8;
  public static final int GradientColor_android_startY = 9;
  public static final int GradientColor_android_endX = 10;
  public static final int GradientColor_android_endY = 11;
  public static final int[] GradientColorItem = { 0x10101a5, 0x1010514 };
  public static final int GradientColorItem_android_color = 0;
  public static final int GradientColorItem_android_offset = 1;
  }",DI,
630,"Handler.getInstance().initHandler(); 
  org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
  org.evosuite.runtime.GuiSupport.setHeadless(); 
  org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 
 
  @After 
  public void doneWithTestCase(){ 
  threadStopper.killAndJoinClientThreads();
  org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
  org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
  resetClasses(); 
  org.evosuite",T,
631,"* direction or management of such entity, whether by contract or
  * otherwise, or (ii) ownership of fifty percent (50%) or more of the
  * outstanding shares, or (iii) beneficial ownership of such entity.
  *
  * ""You"" (or ""Your"") shall mean an individual or Legal Entity
  * exercising permissions granted by this License.
  *
  * ""Source"" form shall mean the preferred form for making modifications,
  * including but not limited to software source code, documentation
  * source, and configuration files.
  *
  * ""Object"" form shall mean any form resulting from mechanical
  * transformation or translation of a Source",L,
632,",-9,-9,-9,-9,-9, // Decimal 166 - 178
  -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9, // Decimal 179 - 191
  -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9, // Decimal 192 - 204
  -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9, // Decimal 205 - 217
  -9,-9,-9",DI,
633,"value) {
  addCriterion(""title >="", value, ""title"");
  return (Criteria) this;
  }
 
  public Criteria andTitleLessThan(String value) {
  addCriterion(""title <"", value, ""title"");
  return (Criteria) this;
  }
 
  public Criteria andTitleLessThanOrEqualTo(String value) {
  addCriterion(""title <="", value, ""title"");
  return (Criteria) this;
  }
 
  public Criteria andTitleLike(String value) {
  addCriterion(""title like"", value, ""title"");
  return (Criteria) this;
  }
 
  public Criteria andTitleNotLike(String value) {
  addCriterion(""title not like"", value, ""title"");
  return (Criteria) this;
  }",C,
634,"digit.
  * exp is in the range of -32767 to 32768</p>
  *
  * <p>IEEE 854-1987 Notes and differences</p>
  *
  * <p>IEEE 854 requires the radix to be either 2 or 10. The radix here is
  * 10000, so that requirement is not met, but it is possible that a
  * subclassed can be made to make it behave as a radix 10
  * number. It is my opinion that if it looks and behaves as a radix
  * 10 number",DO,
635,#ERROR!,DO,
636,"in each modified Data File or in the Software
  * as well as in the documentation associated with the Data File(s) or
  * Software that the data or software has been modified.
  *
  * THE DATA FILES AND SOFTWARE ARE PROVIDED ""AS IS"", WITHOUT WARRANTY OF
  * ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
  * WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  * NONINFRINGEMENT OF THIRD PARTY RIGHTS.
  * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR HOLDERS INCLUDED IN THIS
  * NOTICE BE LIABLE FOR ANY CLAIM, OR ANY SPECIAL INDIRECT OR CONSEQUENTIAL
  * DAMAGES, OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE,
  * DATA OR PROFITS, WHETHER",L,
637,"public static final int actionModeFindDrawable = 0x7f030015;
  public static final int actionModePasteDrawable = 0x7f030016;
  public static final int actionModePopupWindowStyle = 0x7f030017;
  public static final int actionModeSelectAllDrawable = 0x7f030018;
  public static final int actionModeShareDrawable = 0x7f030019;
  public static final int actionModeSplitBackground = 0x7f03001a;
  public static final int actionModeStyle = 0x7f030",DI,
638,#ERROR!,DI,
639,"transition(ScriptDataDoubleEscaped);
  }
  }
  },
  ScriptDataDoubleEscapedDashDash {
  void read(Tokeniser t, CharacterReader r) {
  char c = r.consume();
  switch (c) {
  case '-':
  t.emit(c);
  break;
  case '<':
  t.emit(c);
  t.transition(ScriptDataDoubleEscapedLessthanSign);
  break;
  case '>':
  t.emit(c);
  t.transition(ScriptData);
  break;
  case nullChar:
  t.error(this);
  t.emit(replacementChar);
  t.transition(ScriptDataDoubleEscaped);
  break;",C,
640,"StateListDrawableItem_android_drawable = 1;
  public static final int[] AnimatedStateListDrawableTransition = { 0x1010199, 0x1010449, 0x101044a, 0x101044b };
  public static final int AnimatedStateListDrawableTransition_android_drawable = 0;
  public static final int AnimatedStateListDrawableTransition_android_toId = 1;
  public static final int AnimatedStateListDrawableTransition_android_fromId = 2;
  public static final int AnimatedStateListDrawableTransition_android_reversible = 3;
  public static final int",DI,
641,"riterion(condition, value));
  }
 
  protected void addCriterion(String condition, Object value1, Object value2, String property) {
  if (value1 == null || value2 == null) {
  throw new RuntimeException(""Between values for "" + property + "" cannot be null"");
  }
  criteria.add(new Criterion(condition, value1, value2));
  }
 
  public Criteria andIdIsNull() {
  addCriterion(""id is null"");
  return (Criteria) this;
  }
 
  public Criteria andIdIsNotNull() {
  addCriterion(""id is not null"");
  return (Criteria) this;
  }
 
  public Criteria andIdEqualTo(Long value) {
  addCriterion(""id ="", value, ""id",C,
642,"03a;
  /** Drawable to use for the Web Search action button in WebView selection action modes 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionModeWebSearchDrawable=0x7f010045;
  /** <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</",DO,
643,"INCLUDING, BUT NOT LIMITED TO,
 THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESSFOR A PARTICULAR PURPOSE
 ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
 FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
 TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 package org.firstinspires.ftc.teamcode;",L,
644,"ToString(qname));
  }
 
  } else {
  xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
  }
  }
 
  private void writeQNames(javax.xml.namespace.QName[] qnames,
  javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 
  if (qnames!= null) {
  // we have to store this data until last moment since it is not possible to write any
  // namespace data after writing the charactor data
  java.lang.StringBuffer stringToWrite = new java.lang.StringBuffer();
  java.lang.String namespaceURI = null;",C,
645,""");
  return (Criteria) this;
  }
 
  public Criteria andStatusIn(List<Integer> values) {
  addCriterion(""status in"", values, ""status"");
  return (Criteria) this;
  }
 
  public Criteria andStatusNotIn(List<Integer> values) {
  addCriterion(""status not in"", values, ""status"");
  return (Criteria) this;
  }
 
  public Criteria andStatusBetween(Integer value1, Integer value2) {
  addCriterion(""status between"", value1, value2, ""status"");
  return (Criteria) this;
  }
 
  public Criteria andStatusNotBetween(Integer value1, Integer value2) {
  addCriterion(""status not between"", value1, value2, """,C,
646,"layout_constraintGuide_end = 24;
  public static final int ConstraintLayout_Layout_layout_constraintGuide_percent = 25;
  public static final int ConstraintLayout_Layout_layout_constraintHeight_default = 26;
  public static final int ConstraintLayout_Layout_layout_constraintHeight_max = 27;
  public static final int ConstraintLayout_Layout_layout_constraintHeight_min = 28;
  public static final int ConstraintLayout_Layout_layout_constraintHeight_percent = 29;
  public static final int ConstraintLayout_Layout_layout_constraintHorizontal_bias = 30;
  public static final int ConstraintLayout_Layout_layout_constraint",DI,
647,"cante
  * Tai Mu Shih
  * Thiago Augusto Souza do Nascimento
  * Tiago Moreno Rodrigues
  * Vivianne Barbosa Sousa
  *
  * Este programa é software livre; você pode redistribuí-lo e/ou
  * modificá-lo sob os termos de Licença Pública Geral GNU, conforme
  * publicada pela Free Software Foundation; versão 2 da
  * Licença.
  * Este programa é distribuído na expectativa de ser útil, mas SEM
  * QUALQUER GARANTIA; sem mesmo a garantia implícita de",L,
648,"<>"", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdGreaterThan(Integer value) {
  addCriterion(""id >"", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdGreaterThanOrEqualTo(Integer value) {
  addCriterion(""id >="", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdLessThan(Integer value) {
  addCriterion(""id <"", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdLessThanOrEqualTo(Integer value) {
  addCriterion(""id <="", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdIn(List",C,
649,"""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionModeCutDrawable=0x7f01003f;
  /** Drawable to use for the Find action button in WebView selection action modes 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<",DO,
650,"ately, this acknowledgment may appear in the software itself,
  * if and wherever such third-party acknowledgments normally appear.
  *
  * 4. The names ""Apache"" and ""Apache Software Foundation"" and
  * ""Apache BCEL"" must not be used to endorse or promote products
  * derived from this software without prior written permission. For
  * written permission, please contact apache@apache.org.
  *
  * 5. Products derived from this software may not be called ""Apache"",
  * ""Apache BCEL"", nor may ""Apache"" appear in their name, without
  * prior written permission of the Apache Software Foundation.
  *
  * THIS SOFTWARE IS PROVIDED ``",L,
651,"}
  }
  }
  catch( IOException ioe )
  {
  IO.logger.log(Level.WARNING, ""Error with stream reading"", ioe);
  }
  finally
  {
  /* clean up stream reading objects */
  try {
  if( buffread!= null )
  {
  buffread.close();
  }
  }
  catch( IOException ioe )
  {
  IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", ioe);
  }
 
  try {
  if( instrread!= null )
  {
  instrread.close();
  }
  }
  catch( IOException ioe )
  {
  IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", io",C,
652,"wherever such third-party notices normally appear. The contents
  * of the NOTICE file are for informational purposes only and
  * do not modify the License. You may add Your own attribution
  * notices within Derivative Works that You distribute, alongside
  * or as an addendum to the NOTICE text from the Work, provided
  * that such additional attribution notices cannot be construed
  * as modifying the License.
  *
  * You may add Your own copyright statement to Your modifications and
  * may provide additional or different license terms and conditions
  * for use, reproduction, or distribution of Your modifications, or
  * for any such Derivative Works as a",L,
653,".setVisibility(show? View.GONE : View.VISIBLE);
  }
  }
 
  @Override
  public Loader<Cursor> onCreateLoader(int i, Bundle bundle) {
  return new CursorLoader(this,
  // Retrieve data rows for the device user's 'profile' contact.
  Uri.withAppendedPath(ContactsContract.Profile.CONTENT_URI,
  ContactsContract.Contacts.Data.CONTENT_DIRECTORY), ProfileQuery.PROJECTION,
 
  // Select only email addresses.
  ContactsContract.Contacts.Data.MIMETYPE +
  "" =?"", new String[]{ContactsContract.CommonDataKinds.Email
  .CONTENT_ITEM_TYPE},
 
  // Show primary email addresses first. Note that there won't",C,
654,"not be called ""Apache"",
  * ""Apache BCEL"", nor may ""Apache"" appear in their name, without
  * prior written permission of the Apache Software Foundation.
  *
  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
  * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
  * USE, DATA, OR PROFITS;",L,
655,"javax.xml.stream.XMLStreamException{
  if (namespace.equals(""""))
  {
  xmlWriter.writeAttribute(attName,attValue);
  }
  else
  {
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
  }
  }
 
 
  /**
  * Util method to write an attribute without the ns prefix
  */
  private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 
  java.lang.String attributeNamespace = qname",C,
656,";
  }
 
  @Override
  protected String getJSMainModuleName() {
  return ""index"";
  }
  };
 
  @Override
  public ReactNativeHost getReactNativeHost() {
  return mReactNativeHost;
  }
 
  @Override
  public void onCreate() {
  super.onCreate();
  SoLoader.init(this, /* native exopackage */ false);
  initializeFlipper(this, getReactNativeHost().getReactInstanceManager());
  }
  
  /**
  * Loads Flipper in React Native templates. Call this in the onCreate method with something like
  * initializeFlipper(this, getReactNativeHost().getReactInstanceManager());
  *
  * @param context
  * @param reactInstanceManager",C,
657,"f050066;
  public static final int notification_right_side_padding_top = 0x7f050067;
  public static final int notification_small_icon_background_padding = 0x7f050068;
  public static final int notification_small_icon_size_as_large = 0x7f050069;
  public static final int notification_subtext_size = 0x7f05006a;
  public static final int notification_top_pad = 0x7f05006b;
  public static final int notification_top_pad_large",DI,
658,"Margin Analytics
  * - XVA Analytics
  * 
  * DROP Computational Core implements libraries for the following:
  * - Algorithm Support
  * - Computation Support
  * - Function Analysis
  * - Graph Algorithm
  * - Model Validation
  * - Numerical Analysis
  * - Numerical Optimizer
  * - Spline Builder
  * - Statistical Learning
  * 
  * Documentation for DROP is Spread Over:
  * 
  * - Main => https://lakshmidrip.github.io/DROP/
  * - Wiki => https://github.com/lakshmiDRIP",DO,
659,"Style = 0x7f040017;
  public static final int actionModeSelectAllDrawable = 0x7f040018;
  public static final int actionModeShareDrawable = 0x7f040019;
  public static final int actionModeSplitBackground = 0x7f04001a;
  public static final int actionModeStyle = 0x7f04001b;
  public static final int actionModeWebSearchDrawable = 0x7f04001c;
  public static final int actionOverflowButtonStyle = 0x7f04001d;
  public static final",DI,
660,"}
 
 public String getReturnUrl() {
 return this.returnUrl;
 }
 
 public void setReturnUrl(String returnUrl) {
 this.returnUrl = returnUrl;
 }
 
 public String getApiVersion() {
 return this.apiVersion;
 }
 
 public void setApiVersion(String apiVersion) {
 this.apiVersion = apiVersion;
 }
 
 public void setTerminalType(String terminalType){
 this.terminalType=terminalType;
 }
 
  public String getTerminalType(){
   return this.terminalType;
  }
 
  public void setTerminalInfo(String terminalInfo){
   this.terminalInfo=terminalInfo;",C,
661,"<li>Memory foot print. I'm using more memory than necessary to
  * represent numbers to get better performance.</li>
  * <li>Digits are bigger, so rounding is a greater loss. So, if you
  * really need 12 decimal digits, better use 4 base 10000 digits
  * there can be one partially filled.</li>
  * </ol></p>
  *
  * <p>Numbers are represented in the following form:
  * <pre>
  * n = sign &times; mant &times; (radix)<sup>exp</sup>;</p>
  * </pre",DO,
662,"Rodrigues Barros
 * Carlos Elmano Rodrigues Ferreira
 * Cláudio de Andrade Lira
 * Denys Guimarães Guenes Tavares
 * Eduardo Breckenfeld da Rosa Borges
 * Fabíola Gomes de Araújo
 * Flávio Leonardo Cavalcanti Cordeiro
 * Francisco do Nascimento Júnior
 * Homero Sampaio Cavalcanti
 * Ivan Sérgio da Silva Júnior
 * José Edmar de Siqueira
 * Jos",DO,
663,", 4503599627370496l)).add(field.getOne()); // Divide by 2^52, then add one
  xdfp = xdfp.multiply(DfpMath.pow(field.getTwo(), exponent));
 
  if ((bits & 0x8000000000000000L)!= 0) {
  xdfp = xdfp.negate();
  }
 
  System.arraycopy(xdfp.mant, 0, mant, 0, mant.length);
  sign = xdfp.sign;
  exp = xdfp",C,
664,"}
  },
  CharacterReferenceInRcdata {
  void read(Tokeniser t, CharacterReader r) {
  Character c = t.consumeCharacterReference(null, false);
  if (c == null)
  t.emit('&');
  else
  t.emit(c);
  t.transition(Rcdata);
  }
  },
  Rawtext {
  void read(Tokeniser t, CharacterReader r) {
  switch (r.current()) {
  case '<':
  t.advanceTransition(RawtextLessthanSign);
  break;
  case nullChar:
  t.error(this);
  r.advance();
  t.emit(replacementChar);
  break;
  case eof:
  t",C,
665,"null)
  t.emit('&');
  else
  t.emit(c);
  t.transition(Rcdata);
  }
  },
  Rawtext {
  void read(Tokeniser t, CharacterReader r) {
  switch (r.current()) {
  case '<':
  t.advanceTransition(RawtextLessthanSign);
  break;
  case nullChar:
  t.error(this);
  r.advance();
  t.emit(replacementChar);
  break;
  case eof:
  t.emit(new Token.EOF());
  break;
  default:
  String data = r.consumeToAny('<', nullChar);
  t.emit(data);
  break;
  }
  }",C,
666,"is set, {@link #show()} and {@link #hide()} will toggle
  * the visibility of the navigation bar, if it's present on the device and
  * the device allows hiding it. In cases where the navigation bar is present
  * but cannot be hidden, show and hide will toggle low profile mode.
  */
  public static final int FLAG_HIDE_NAVIGATION = FLAG_FULLSCREEN | 0x4;
 
  /**
  * The activity associated with this UI hider object.
  */
  protected Activity mActivity;
 
  /**
  * The view on which {@link View#setSystemUiVisibility(int)} will be called.
  */
  protected View mAnchorView;
 
  /**
  * The current",DO,
667,"public Criteria andIdLessThanOrEqualTo(Integer value) {
  addCriterion(""id <="", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdIn(List<Integer> values) {
  addCriterion(""id in"", values, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdNotIn(List<Integer> values) {
  addCriterion(""id not in"", values, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdBetween(Integer value1, Integer value2) {
  addCriterion(""id between"", value1, value2, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdNotBetween(Integer value",C,
668,"null) {
  tb.error(this);
  tb.process(new Token.EndTag(""a""));
 
  // still on stack?
  Element remainingA = tb.getFromStack(""a"");
  if (remainingA!= null) {
  tb.removeFromActiveFormattingElements(remainingA);
  tb.removeFromStack(remainingA);
  }
  }
  tb.reconstructFormattingElements();
  Element a = tb.insert(startTag);
  tb.pushActiveFormattingElements(a);
  } else if (StringUtil.in(name,
  ""b"", ""big"", ""code"", ""em"", ""font"", ""i"", ""s"", ""small"", ""strike"", ""strong"", ""tt",C,
669,"IP Statistical Learning - https://lakshmidrip.github.io/DRIP-Statistical-Learning/
  * 
  * - DRIP Fixed Income: Library for Instrument/Trading Conventions, Treasury Futures/Options,
  *  Funding/Forward/Overnight Curves, Multi-Curve Construction/Valuation, Collateral Valuation and XVA
  *  Metric Generation, Calibration and Hedge Attributions, Statistical Curve Construction, Bond RV
  *  Metrics, Stochastic Evolution and Option Pricing, Interest Rate Dynamics and Option Pricing, LMM
  *  Extensions/Calibrations/Greeks",DO,
670,"equals(""br"")) {
  return anythingElse(t, tb);
  } else if ((t.isStartTag() && StringUtil.in(t.asStartTag().name(), ""head"", ""noscript"")) || t.isEndTag()) {
  tb.error(this);
  return false;
  } else {
  return anythingElse(t, tb);
  }
  return true;
  }
 
  private boolean anythingElse(Token t, HtmlTreeBuilder tb) {
  tb.error(this);
  tb.process(new Token.EndTag(""noscript""));
  return tb.process(t);
  }
  },
  AfterHead {
  boolean process(Token t, HtmlTreeBuilder tb) {",C,
671,"t.isDoctype()) {
  tb.error(this);
  } else if (t.isStartTag()) {
  Token.StartTag startTag = t.asStartTag();
  String name = startTag.name();
  if (name.equals(""html"")) {
  return tb.process(t, InBody);
  } else if (name.equals(""body"")) {
  tb.insert(startTag);
  tb.framesetOk(false);
  tb.transition(InBody);
  } else if (name.equals(""frameset"")) {
  tb.insert(startTag);
  tb.transition(InFrameset);
  } else if (StringUtil.in(name, ""base",C,
672,"ScriptData);
  }
  }
  },
  ScriptDataEndTagOpen {
  void read(Tokeniser t, CharacterReader r) {
  readEndTag(t, r, ScriptDataEndTagName, ScriptData);
  }
  },
  ScriptDataEndTagName {
  void read(Tokeniser t, CharacterReader r) {
  handleDataEndTag(t, r, ScriptData);
  }
  },
  ScriptDataEscapeStart {
  void read(Tokeniser t, CharacterReader r) {
  if (r.matches('-')) {
  t.emit('-');
  t.advanceTransition(ScriptDataEscapeStartDash);
  } else {
  t.transition(ScriptData);
  }
  }
  },",C,
673,"written permission, please contact apache@apache.org.
  *
  * 5. Products derived from this software may not be called ""Apache"",
  * ""Apache BCEL"", nor may ""Apache"" appear in their name, without
  * prior written permission of the Apache Software Foundation.
  *
  * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
  * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE APACHE SOFTWARE FOUNDATION OR
  * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,",L,
674,"ça Pública Geral GNU, conforme
 * publicada pela Free Software Foundation; versão 2 da
 * Licença.
 * Este programa é distribuído na expectativa de ser útil, mas SEM
 * QUALQUER GARANTIA; sem mesmo a garantia implícita de
 * COMERCIALIZAÇÃO ou de ADEQUAÇÃO A QUALQUER PROPÓSITO EM
 * PARTICULAR. Consulte a Licença Pública Geral GNU para obter mais
 * detalhes.
 * Você deve ter recebido uma cópia da Licença P",L,
675,"user's 'profile' contact.
  Uri.withAppendedPath(ContactsContract.Profile.CONTENT_URI,
  ContactsContract.Contacts.Data.CONTENT_DIRECTORY), ProfileQuery.PROJECTION,
 
  // Select only email addresses.
  ContactsContract.Contacts.Data.MIMETYPE +
  "" =?"", new String[]{ContactsContract.CommonDataKinds.Email
  .CONTENT_ITEM_TYPE},
 
  // Show primary email addresses first. Note that there won't be
  // a primary email address if the user hasn't specified one.
  ContactsContract.Contacts.Data.IS_PRIMARY + "" DESC"");
  }
 
  @Override
  public void onLoadFinished(Loader<Cursor> cursorLoader, Cursor cursor)",C,
676,"be:
  * 1E(-(MIN_EXP-digits-1)*4), eg, for digits=5, MIN_EXP=-32767, that would
  * be 1e-131092.</p>
  *
  * <p>IEEE 854 defines that the implied radix point lies just to the right
  * of the most significant digit and to the left of the remaining digits.
  * This implementation puts the implied radix point to the left of all
  * digits including the most significant one. The most significant digit
  * here is the one just to the right of the radix point. This is a fine
  *",DO,
677,"2007> 
  * Adriano Britto Siqueira
  * Alexandre Santos Cabral
  * Ana Carolina Alves Breda
  * Ana Maria Andrade Cavalcante
  * Aryed Lins de Araújo
  * Bruno Leonardo Rodrigues Barros
  * Carlos Elmano Rodrigues Ferreira
  * Cláudio de Andrade Lira
  * Denys Guimarães Guenes Tavares
  * Eduardo Breckenfeld da Rosa Borges
  * Fabíola Gomes de Araújo
  * Flávio Leonardo C",DO,
678,"* Rodrigo Avellar Silveira
  * Rosana Carvalho Barbosa
  * Sávio Luiz de Andrade Cavalcante
  * Tai Mu Shih
  * Thiago Augusto Souza do Nascimento
  * Tiago Moreno Rodrigues
  * Vivianne Barbosa Sousa
  *
  * Este programa é software livre; você pode redistribuí-lo e/ou
  * modificá-lo sob os termos de Licença Pública Geral GNU, conforme
  * publicada pela Free Software Foundation; versão 2 da
  * Licença.
  * Este programa é distribuído na",DO,
679,".dataBuffer.append(Character.toLowerCase(r.current()));
  t.emit(""<"" + r.current());
  t.advanceTransition(ScriptDataDoubleEscapeStart);
  } else if (r.matches('/')) {
  t.createTempBuffer();
  t.advanceTransition(ScriptDataEscapedEndTagOpen);
  } else {
  t.emit('<');
  t.transition(ScriptDataEscaped);
  }
  }
  },
  ScriptDataEscapedEndTagOpen {
  void read(Tokeniser t, CharacterReader r) {
  if (r.matchesLetter()) {
  t.createTagPending(false);
  t.tagPending.appendTagName(Character.toLowerCase(r.",C,
680,"Elmano Rodrigues Ferreira
 * Cláudio de Andrade Lira
 * Denys Guimarães Guenes Tavares
 * Eduardo Breckenfeld da Rosa Borges
 * Fabíola Gomes de Araújo
 * Flávio Leonardo Cavalcanti Cordeiro
 * Francisco do Nascimento Júnior
 * Homero Sampaio Cavalcanti
 * Ivan Sérgio da Silva Júnior
 * José Edmar de Siqueira
 * José Thiago Tenório Lopes",DO,
681,"_MEM_USE_HOST_PTR MEM_USE_HOST_PTR} are not set in flags.</li>
  * <li>{@link CL10#CL_MEM_OBJECT_ALLOCATION_FAILURE MEM_OBJECT_ALLOCATION_FAILURE} if there is a failure to allocate memory for buffer object.</li>
  * <li>{@link CL10#CL_OUT_OF_RESOURCES OUT_OF_RESOURCES} if there is a failure to allocate resources required by the OpenCL implementation on the device.</li>
  * <li>{@link CL10#CL_OUT_OF_HOST_MEMORY OUT_OF_HOST_MEMORY} if there is a failure to allocate resources required by",DO,
682,"transition(Data);
  } else {
  t.emit(""<"");
  t.transition(Rcdata);
  }
  }
  },
  RCDATAEndTagOpen {
  void read(Tokeniser t, CharacterReader r) {
  if (r.matchesLetter()) {
  t.createTagPending(false);
  t.tagPending.appendTagName(Character.toLowerCase(r.current()));
  t.dataBuffer.append(Character.toLowerCase(r.current()));
  t.advanceTransition(RCDATAEndTagName);
  } else {
  t.emit(""</"");
  t.transition(Rcdata);
  }
  }
  },
  RCDATAEndTagName {
  void read(Tokeniser t, CharacterReader",C,
683,"a property name in properties is not a supported property name, if the value specified for a supported property name is not valid, or if the same property name is specified more than once.</li>
  * <li>{@link CL10#CL_INVALID_VALUE INVALID_VALUE} if values specified in flags are not valid as defined in table 5.3.</li>
  * <li>{@link CL10#CL_INVALID_BUFFER_SIZE INVALID_BUFFER_SIZE} if size is 0.</li>
  * <li>{@link CL10#CL_INVALID_HOST_PTR INVALID_HOST_PTR} if {@code host_ptr} is {@code NULL} and {@link CL",DO,
684,"01, 0x0101020b, 0x01010510, 0x01010511, 0x01010512, 0x01010513 };
  public static final int GradientColor_android_startColor = 0;
  public static final int GradientColor_android_endColor = 1;
  public static final int GradientColor_android_type = 2;
  public static final int GradientColor_android_centerX = 3;
  public static final int GradientColor_android_centerY = 4;
  public static final int GradientColor_",DI,
685,"return ""index"";
  }
  };
 
  @Override
  public ReactNativeHost getReactNativeHost() {
  return mReactNativeHost;
  }
 
  @Override
  public void onCreate() {
  super.onCreate();
  SoLoader.init(this, /* native exopackage */ false);
  initializeFlipper(this); // Remove this line if you don't want Flipper enabled
  }
 
  /**
  * Loads Flipper in React Native templates.
  *
  * @param context
  */
  private static void initializeFlipper(Context context) {
  if (BuildConfig.DEBUG) {
  try {
  /*
  We use reflection here to pick up the class that initializes Flipper,
  since Flipper library is",C,
686,");
  }
  }
  },
  ScriptDataEscapedDash {
  void read(Tokeniser t, CharacterReader r) {
  if (r.isEmpty()) {
  t.eofError(this);
  t.transition(Data);
  return;
  }
 
  char c = r.consume();
  switch (c) {
  case '-':
  t.emit(c);
  t.transition(ScriptDataEscapedDashDash);
  break;
  case '<':
  t.transition(ScriptDataEscapedLessthanSign);
  break;
  case nullChar:
  t.error(this);
  t.emit(replacementChar);
  t.transition(ScriptDataEscaped);
  break;",C,
687,"written permission,
  * please contact info@exolab.org.
  *
  * 4. Products derived from this Software may not be called ""Exolab""
  * nor may ""Exolab"" appear in their names without prior written
  * permission of Intalio, Inc. Exolab is a registered
  * trademark of Intalio, Inc.
  *
  * 5. Due credit should be given to the Exolab Project
  * (http://www.exolab.org/).
  *
  * THIS SOFTWARE IS PROVIDED BY INTALIO, INC. AND CONTRIBUTORS
  * ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT",L,
688,"prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS""
  * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
  * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  * ARISING IN ANY WAY",L,
689,"04000c;
  public static final int design_fab_out=0x7f04000d;
  public static final int design_snackbar_in=0x7f04000e;
  public static final int design_snackbar_out=0x7f04000f;
  }
  public static final class animator {
  public static final int design_appbar_state_list_animator=0x7f050000;
  }
  public static final class attr {
  /** <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type",C,
690,"title <="", value, ""title"");
  return (Criteria) this;
  }
 
  public Criteria andTitleLike(String value) {
  addCriterion(""title like"", value, ""title"");
  return (Criteria) this;
  }
 
  public Criteria andTitleNotLike(String value) {
  addCriterion(""title not like"", value, ""title"");
  return (Criteria) this;
  }
 
  public Criteria andTitleIn(List<String> values) {
  addCriterion(""title in"", values, ""title"");
  return (Criteria) this;
  }
 
  public Criteria andTitleNotIn(List<String> values) {
  addCriterion(""title not in"", values, ""title"");
  return (Criteria) this;
  }",C,
691,"f0600c4;
  public static final int notification_large_icon_width = 0x7f0600c5;
  public static final int notification_main_column_padding_top = 0x7f0600c6;
  public static final int notification_media_narrow_margin = 0x7f0600c7;
  public static final int notification_right_icon_size = 0x7f0600c8;
  public static final int notification_right_side_padding_top = 0x7f0600c9;
  public static final int notification_small_icon_background_",DI,
692,"@Override
  public boolean onOptionsItemSelected(MenuItem item) {
  int id = item.getItemId();
  if (id == android.R.id.home) {
  startActivity(new Intent(getActivity(), SettingsActivity.class));
  return true;
  }
  return super.onOptionsItemSelected(item);
  }
  }
 
  /**
  * This fragment shows notification preferences only. It is used when the
  * activity is showing a two-pane settings UI.
  */
  @TargetApi(Build.VERSION_CODES.HONEYCOMB)
  public static class NotificationPreferenceFragment extends PreferenceFragment {
  @Override
  public void onCreate(Bundle savedInstanceState) {
  super.onCreate(savedInstanceState);
  addPreferencesFromResource",C,
693,"ConstraintLayout_Layout_layout_constraintGuide_percent = 25;
  public static final int ConstraintLayout_Layout_layout_constraintHeight_default = 26;
  public static final int ConstraintLayout_Layout_layout_constraintHeight_max = 27;
  public static final int ConstraintLayout_Layout_layout_constraintHeight_min = 28;
  public static final int ConstraintLayout_Layout_layout_constraintHeight_percent = 29;
  public static final int ConstraintLayout_Layout_layout_constraintHorizontal_bias = 30;
  public static final int ConstraintLayout_Layout_layout_constraintHorizontal_chainStyle = 31;
  public static final int ConstraintLayout",DI,
694,", Boston, MA 02111-1307, USA
  */
 
 /*
  * GSAN – Sistema Integrado de Gestão de Serviços de Saneamento
  * Copyright (C) <2007> 
  * Adriano Britto Siqueira
  * Alexandre Santos Cabral
  * Ana Carolina Alves Breda
  * Ana Maria Andrade Cavalcante
  * Aryed Lins de Araújo
  * Bruno Leonardo Rodrigues Barros
  * Carlos Elmano Rodrigues Ferreira
  * Cláudio de Andrade Lira
  * Den",DO,
695,"Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
  } catch (InstantiationException ex) {
  java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
  } catch (IllegalAccessException ex) {
  java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
  } catch (javax.swing.UnsupportedLookAndFeelException ex) {
  java.util.logging.Logger.getLogger(Login.class.getName()).log(java.util.logging.Level.SEVERE",C,
696,"6"")) {
  tb.error(this);
  tb.pop();
  }
  tb.insert(startTag);
  } else if (StringUtil.in(name, ""pre"", ""listing"")) {
  if (tb.inButtonScope(""p"")) {
  tb.process(new Token.EndTag(""p""));
  }
  tb.insert(startTag);
  // todo: ignore LF if next token
  tb.framesetOk(false);
  } else if (name.equals(""form"")) {
  if (tb.getFormElement()!= null) {
  tb.error(this);
  return false;
  }
  if (tb.inButtonScope(""p"")) {
  tb.",C,
697,"public static final byte INFINITE = 1;
 
  /** Indicator value for signaling NaN. */
  public static final byte SNAN = 2;
 
  /** Indicator value for quiet NaN. */
  public static final byte QNAN = 3;
 
  /** String for NaN representation. */
  private static final String NAN_STRING = ""NaN"";
 
  /** String for positive infinity representation. */
  private static final String POS_INFINITY_STRING = ""Infinity"";
 
  /** String for negative infinity representation. */
  private static final String NEG_INFINITY_STRING = ""-Infinity"";
 
  /** Name for traps triggered by addition. */
  private static final String ADD_TRAP = ""add"";
 
  /** Name for traps triggered",DO,
698,"0x8000000000000000L)!= 0) {
  xdfp = xdfp.negate();
  }
 
  System.arraycopy(xdfp.mant, 0, mant, 0, mant.length);
  sign = xdfp.sign;
  exp = xdfp.exp;
  nans = xdfp.nans;
 
  }
 
  /** Copy constructor.
  * @param d instance to copy
  */
  public Dfp(final Dfp d) {
  mant = d.mant.clone();
  sign = d.sign;
  exp = d.exp;",C,
699,"actionModePasteDrawable = 0x7f020016;
  public static final int actionModePopupWindowStyle = 0x7f020017;
  public static final int actionModeSelectAllDrawable = 0x7f020018;
  public static final int actionModeShareDrawable = 0x7f020019;
  public static final int actionModeSplitBackground = 0x7f02001a;
  public static final int actionModeStyle = 0x7f02001b;
  public static final int actionModeWebSearchDrawable = 0x7f02001c",DI,
700,"_layout_constraintEnd_toStartOf = 22;
  public static final int ConstraintLayout_Layout_layout_constraintGuide_begin = 23;
  public static final int ConstraintLayout_Layout_layout_constraintGuide_end = 24;
  public static final int ConstraintLayout_Layout_layout_constraintGuide_percent = 25;
  public static final int ConstraintLayout_Layout_layout_constraintHeight_default = 26;
  public static final int ConstraintLayout_Layout_layout_constraintHeight_max = 27;
  public static final int ConstraintLayout_Layout_layout_constraintHeight_min = 28;
  public static final int ConstraintLayout_Layout_",DI,
701,". It is my opinion that if it looks and behaves as a radix
  * 10 number then it is one and that requirement would be met.</p>
  *
  * <p>The radix of 10000 was chosen because it should be faster to operate
  * on 4 decimal digits at once instead of one at a time. Radix 10 behavior
  * can be realized by adding an additional rounding step to ensure that
  * the number of decimal digits represented is constant.</p>
  *
  * <p>The IEEE standard specifically leaves out internal data encoding,
  * so it is reasonable to conclude that such a subclass of this radix
  *",DO,
702,">"".
  */
  public static final int activityChooserViewStyle=0x7f01006c;
  /** Specifies a background drawable for the action bar. 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int background=0x7f01002f;
  /** Specifies a background drawable for the bottom component of a split action bar. 
  <p>May be a",DO,
703,"or execution(* *.junk18(..)) or execution(* *.junk19(..)) or execution(* *.junk20(..)) or execution(* *.junk21(..)) or execution(* *.junk22(..)) or execution(* *.junk23(..)) or execution(* *.junk24(..)) or execution(* *.junk25(..)) or execution(* *.junk26(..)) or execution(* *.junk27(..)) or execution(* *.junk28(..)) or execution(* *.junk29(..)) or execution(* *.target(..)))"")
  public Object onTarget(ProceedingJoinPoint joinPoint) throws Throwable {
  int res = (int",C,
704,"0
  mant = new int[field.getRadixDigits()];
  nans = FINITE;
  this.field = field;
 
  boolean isLongMin = false;
  if (x == Long.MIN_VALUE) {
  // special case for Long.MIN_VALUE (-9223372036854775808)
  // we must shift it before taking its absolute value
  isLongMin = true;
  ++x;
  }
 
  // set the sign
  if (x < 0) {
  sign = -1;
  x = -x;
  } else {
  sign = 1;
  }
 
  exp = 0;
  while",C,
705,"with the ns prefix
  */
  private void writeAttribute(java.lang.String prefix,java.lang.String namespace,java.lang.String attName,
  java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
  if (xmlWriter.getPrefix(namespace) == null) {
  xmlWriter.writeNamespace(prefix, namespace);
  xmlWriter.setPrefix(prefix, namespace);
  }
  xmlWriter.writeAttribute(namespace,attName,attValue);
  }
 
  /**
  * Util method to write an attribute without the ns prefix
  */
  private void writeAttribute(java.lang.String namespace",C,
706,"* Sun designates this particular file as subject to the ""Classpath"" exception
  * as provided by Sun in the GPL Version 2 section of the License file that
  * accompanied this code. If applicable, add the following below the License
  * Header, with the fields enclosed by brackets [] replaced by your own
  * identifying information: ""Portions Copyrighted [year]
  * [name of copyright owner]""
  * 
  * Contributor(s):
  * 
  * If you wish your version of this file to be governed by only the CDDL or
  * only the GPL Version 2, indicate your decision by adding ""[Contributor]
  * elects to include this software in this distribution under the [C",L,
707,"charAt(p) <= '9') {
  break;
  }
 
  if (decimalFound && fpdecimal.charAt(p) == '0') {
  decimalPos--;
  }
 
  if (fpdecimal.charAt(p) == '.') {
  decimalFound = true;
  }
 
  p++;
 
  if (p == fpdecimal.length()) {
  break;
  }
  }
 
  // Copy the string onto Stripped
  int q = offset;
  striped[0] = '0';
  striped[1] = '0';
  striped[2] = '0';
  striped[3] = '0';
  int significantDigits=0;
  for(;;) {
  if (p",C,
708,#ERROR!,C,
709,"applicable laws, damage to or loss of data, programs or
 // equipment, and unavailability or interruption of operations.
 //
 // DISCLAIMER OF LIABILITY
 // EXCEPT AS EXPRESSLY SET FORTH IN THIS AGREEMENT, NEITHER RECIPIENT NOR ANY
 // CONTRIBUTORS SHALL HAVE ANY LIABILITY FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING WITHOUT LIMITATION
 // LOST PROFITS), HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 // CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 // ARISING IN ANY WAY OUT OF THE USE OR DISTRIBUTION OF THE PROGRAM OR THE
 // EXERCISE OF ANY RIGHTS GRAN",L,
710,"addCriterion(""name not like"", value, ""name"");
  return (Criteria) this;
  }
 
  public Criteria andNameIn(List<String> values) {
  addCriterion(""name in"", values, ""name"");
  return (Criteria) this;
  }
 
  public Criteria andNameNotIn(List<String> values) {
  addCriterion(""name not in"", values, ""name"");
  return (Criteria) this;
  }
 
  public Criteria andNameBetween(String value1, String value2) {
  addCriterion(""name between"", value1, value2, ""name"");
  return (Criteria) this;
  }
 
  public Criteria andNameNotBetween(String value1, String value2) {
  addCriterion(""",C,
711,"0) {
  oredCriteria.add(criteria);
  }
  return criteria;
  }
 
  protected Criteria createCriteriaInternal() {
  Criteria criteria = new Criteria();
  return criteria;
  }
 
  public void clear() {
  oredCriteria.clear();
  orderByClause = null;
  distinct = false;
  }
 
  protected abstract static class GeneratedCriteria {
  protected List<Criterion> criteria;
 
  protected GeneratedCriteria() {
  super();
  criteria = new ArrayList<Criterion>();
  }
 
  public boolean isValid() {
  return criteria.size() > 0;
  }
 
  public List<Criterion> getAllCriteria() {
  return criteria;
  }
 
  public List<Criterion> getCriteria() {
  return criteria",C,
712,")));
  }
 
  @Test
  @Transactional
  public void getUser() throws Exception {
  // Initialize the database
  userRepository.saveAndFlush(user);
 
  assertThat(cacheManager.getCache(UserRepository.USERS_BY_LOGIN_CACHE).get(user.getLogin())).isNull();
 
  // Get the user
  restUserMockMvc.perform(get(""/api/users/{login}"", user.getLogin()))
  .andExpect(status().isOk())
  .andExpect(content().contentType(MediaType.APPLICATION_JSON_UTF8_VALUE))
  .andExpect(jsonPath(""$.login"").value(user.getLogin()))
  .andExpect(jsonPath(""$.firstName"").value(DEFAULT_FIRSTNAME))
  .andExpect(",T,
713,"assertThat(SecurityContextHolder.getContext().getAuthentication()).isNull();
  }
 
  @Test
  public void testJWTFilterMissingToken() throws Exception {
  MockHttpServletRequest request = new MockHttpServletRequest();
  request.addHeader(JWTFilter.AUTHORIZATION_HEADER, ""Bearer "");
  request.setRequestURI(""/api/test"");
  MockHttpServletResponse response = new MockHttpServletResponse();
  MockFilterChain filterChain = new MockFilterChain();
  jwtFilter.doFilter(request, response, filterChain);
  assertThat(response.getStatus()).isEqualTo(HttpStatus.OK.value());
  assertThat(SecurityContextHolder.getContext().getAuthentication()).isNull();
  }
 
  @Test
  public void testJWTFilterWrongScheme() throws Exception {
  UsernamePasswordAuthenticationToken authentication = new",T,
714,"010511, 0x01010512, 0x01010513 };
  public static final int GradientColor_android_startColor = 0;
  public static final int GradientColor_android_endColor = 1;
  public static final int GradientColor_android_type = 2;
  public static final int GradientColor_android_centerX = 3;
  public static final int GradientColor_android_centerY = 4;
  public static final int GradientColor_android_gradientRadius = 5;
  public static final int GradientColor_android_tileMode = 6;
  public static final int GradientColor_",DI,
715,"* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES,
  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
  * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
  * GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
  * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
  * OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF",L,
716,""" cannot be null"");
  }
  criteria.add(new Criterion(condition, value1, value2));
  }
 
  public Criteria andIdIsNull() {
  addCriterion(""id is null"");
  return (Criteria) this;
  }
 
  public Criteria andIdIsNotNull() {
  addCriterion(""id is not null"");
  return (Criteria) this;
  }
 
  public Criteria andIdEqualTo(String value) {
  addCriterion(""id ="", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdNotEqualTo(String value) {
  addCriterion(""id <>"", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdGreaterThan(String value) {",C,
717,"test-key"");
  assertThat(event.getData().get(""test-key"").toString()).isEqualTo(""test-value"");
  assertThat(event.getTimestamp()).isEqualTo(Date.from(testUserEvent.getAuditEventDate()));
  }
 
  @Test
  public void testFindByPrincipal() {
  persistenceAuditEventRepository.save(testUserEvent);
  persistenceAuditEventRepository.save(testOldUserEvent);
  persistenceAuditEventRepository.save(testOtherUserEvent);
 
  List<AuditEvent> events = customAuditEventRepository
  .find(""test-user"", Date.from(testUserEvent.getAuditEventDate().minusSeconds(3600)));
  assertThat(events).hasSize(1);",T,
718,"Tag().name(),
  ""basefont"", ""bgsound"", ""link"", ""meta"", ""noframes"", ""style""))) {
  return tb.process(t, InHead);
  } else if (t.isEndTag() && t.asEndTag().name().equals(""br"")) {
  return anythingElse(t, tb);
  } else if ((t.isStartTag() && StringUtil.in(t.asStartTag().name(), ""head"", ""noscript"")) || t.isEndTag()) {
  tb.error(this);
  return false;
  } else {
  return anythingElse(t, tb);
  }
  return true;
  }
 
  private boolean anythingElse(",C,
719,".io/DROP/jacoco/index.html
  * 
  * Licensed under the Apache License, Version 2.0 (the ""License"");
  *  you may not use this file except in compliance with the License.
  * 
  * You may obtain a copy of the License at
  *  http://www.apache.org/licenses/LICENSE-2.0
  * 
  * Unless required by applicable law or agreed to in writing, software
  *  distributed under the License is distributed on an ""AS IS"" BASIS,
  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * 
  * See the License for the specific language governing permissions and",L,
720,"type</i>/<i>name</i></code>"" or a theme
  * attribute in the form
  * ""<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>"".
  */
  public static final int actionBarSplitStyle=0x7f030004;
  /**
  * Reference to a style for the Action Bar
  * <p>May be a reference to another resource, in the form
  * ""<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>"" or a theme
  * attribute in the form
  * ""<code>?[<i>package</i>:]<i>type</i>/<i>",DO,
721,"Events.get(0);
  assertThat(persistentAuditEvent.getData().get(""remoteAddress"")).isEqualTo(""1.2.3.4"");
  assertThat(persistentAuditEvent.getData().get(""sessionId"")).isEqualTo(""test-session-id"");
  }
 
  @Test
  public void testAddEventWithNullData() {
  Map<String, Object> data = new HashMap<>();
  data.put(""test-key"", null);
  AuditEvent event = new AuditEvent(""test-user"", ""test-type"", data);
  customAuditEventRepository.add(event);
  List<PersistentAuditEvent> persistentAuditEvents = persistenceAuditEventRepository.findAll();
  assertThat(persistentAuditEvents).hasSize(1);",T,
722,"RESPONSIBLE FOR ANY MEDIATEK
  * SOFTWARE RELEASES MADE TO RECEIVER'S SPECIFICATION OR TO CONFORM TO A PARTICULAR
  * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
  * CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
  * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
  * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
  * MEDIATEK FOR SUCH MEDIATE",L,
723,"* Eduardo Breckenfeld da Rosa Borges
  * Fabíola Gomes de Araújo
  * Flávio Leonardo Cavalcanti Cordeiro
  * Francisco do Nascimento Júnior
  * Homero Sampaio Cavalcanti
  * Ivan Sérgio da Silva Júnior
  * José Edmar de Siqueira
  * José Thiago Tenório Lopes
  * Kássia Regina Silvestre de Albuquerque
  * Leonardo Luiz Vieira da Silva
  * Márcio Roberto Batista da Silva
  *",DO,
724,"bar 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionBarTabStyle=0x7f010007;
  /** <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i",DO,
725,"_item_1line, emailAddressCollection);
 
  mEmailView.setAdapter(adapter);
  }
 
 
  private interface ProfileQuery {
  String[] PROJECTION = {
  ContactsContract.CommonDataKinds.Email.ADDRESS,
  ContactsContract.CommonDataKinds.Email.IS_PRIMARY,
  };
 
  int ADDRESS = 0;
  int IS_PRIMARY = 1;
  }
 
  /**
  * Represents an asynchronous login/registration task used to authenticate
  * the user.
  */
  public class UserLoginTask extends AsyncTask<Void, Void, Boolean> {
 
  private final String mEmail;
  private final String mPassword;
 
  UserLoginTask(String email, String password) {
  mEmail =",C,
726,"userThree.setEmail(USER_THREE_EMAIL);
  userThree.setFirstName(""userThree"");
  userThree.setLastName(""doe"");
  userThree.setLangKey(""en"");
  userRepository.save(userThree);
  }
 
  @Test
  @Transactional
  public void assertThatUserCanBeFoundByLogin() {
  UserDetails userDetails = domainUserDetailsService.loadUserByUsername(USER_ONE_LOGIN);
  assertThat(userDetails).isNotNull();
  assertThat(userDetails.getUsername()).isEqualTo(USER_ONE_LOGIN);
  }
 
  @Test
  @Transactional
  public void assertThatUserCanBeFoundByLoginIgnoreCase() {
  UserDetails userDetails = domainUserDetailsService.loadUser",T,
727,"insert(startTag);
  tb.setFormElement(form);
  } else if (name.equals(""li"")) {
  tb.framesetOk(false);
  LinkedList<Element> stack = tb.getStack();
  for (int i = stack.size() - 1; i > 0; i--) {
  Element el = stack.get(i);
  if (el.nodeName().equals(""li"")) {
  tb.process(new Token.EndTag(""li""));
  break;
  }
  if (tb.isSpecial(el) &&!StringUtil.in(el.nodeName(), ""address"", ""div"", ""p""))
  break;
  }
  if (tb.inButton",C,
728,"67;
 
  /** The maximum exponent before overflow is signaled and results flushed
  * to infinity */
  public static final int MAX_EXP = 32768;
 
  /** The amount under/overflows are scaled by before going to trap handler */
  public static final int ERR_SCALE = 32760;
 
  /** Indicator value for normal finite numbers. */
  public static final byte FINITE = 0;
 
  /** Indicator value for Infinity. */
  public static final byte INFINITE = 1;
 
  /** Indicator value for signaling NaN. */
  public static final byte SNAN = 2;
 
  /** Indicator value for quiet NaN. */
  public static final byte QNAN",DO,
729,"resource, in the form
  * ""<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>"" or a theme
  * attribute in the form
  * ""<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>"".
  */
  public static final int actionBarPopupTheme=0x7f030002;
  /**
  * Size of the Action Bar, including the contextual
  * bar used to present Action Modes.
  * <p>May be a dimension value, which is a floating point number appended with a
  * unit such as ""<code>14.5sp</code>"".
  * Available",DO,
730,"public ReactNativeHost getReactNativeHost() {
  return mReactNativeHost;
  }
 
  @Override
  public void onCreate() {
  super.onCreate();
  SoLoader.init(this, /* native exopackage */ false);
  initializeFlipper(this); // Remove this line if you don't want Flipper enabled
  }
 
  /**
  * Loads Flipper in React Native templates.
  *
  * @param context
  */
  private static void initializeFlipper(Context context) {
  if (BuildConfig.DEBUG) {
  try {
  /*
  We use reflection here to pick up the class that initializes Flipper,
  since Flipper library is not available in release mode
  */
  Class<?> aClass",C,
731,".inButtonScope(""p"")) {
  tb.process(new Token.EndTag(""p""));
  }
  tb.insert(startTag);
  tb.tokeniser.transition(TokeniserState.PLAINTEXT); // once in, never gets out
  } else if (name.equals(""button"")) {
  if (tb.inButtonScope(""button"")) {
  // close and reprocess
  tb.error(this);
  tb.process(new Token.EndTag(""button""));
  tb.process(startTag);
  } else {
  tb.reconstructFormattingElements();
  tb.insert(startTag);
  tb.framesetOk(false);
  }
  } else if (name.",C,
732,"Service;
 
  private User userOne;
  private User userTwo;
  private User userThree;
 
  @Before
  public void init() {
  userOne = new User();
  userOne.setLogin(USER_ONE_LOGIN);
  userOne.setPassword(RandomStringUtils.random(60));
  userOne.setActivated(true);
  userOne.setEmail(USER_ONE_EMAIL);
  userOne.setFirstName(""userOne"");
  userOne.setLastName(""doe"");
  userOne.setLangKey(""en"");
  userRepository.save(userOne);
 
  userTwo = new User();
  userTwo.setLogin(USER_TWO_LOGIN);
  userTwo.setPassword",T,
733,"TagOpen {
  void read(Tokeniser t, CharacterReader r) {
  if (r.matchesLetter()) {
  t.createTagPending(false);
  t.tagPending.appendTagName(Character.toLowerCase(r.current()));
  t.dataBuffer.append(r.current());
  t.advanceTransition(ScriptDataEscapedEndTagName);
  } else {
  t.emit(""</"");
  t.transition(ScriptDataEscaped);
  }
  }
  },
  ScriptDataEscapedEndTagName {
  void read(Tokeniser t, CharacterReader r) {
  if (r.matchesLetter()) {
  String name = r.consumeLetterSequence();
  t.tagPending.appendTagName",C,
734,"AS IS"" AND
  * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
  * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
  * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
  * ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
  * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",L,
735,"equals(""button"")) {
  if (tb.inButtonScope(""button"")) {
  // close and reprocess
  tb.error(this);
  tb.process(new Token.EndTag(""button""));
  tb.process(startTag);
  } else {
  tb.reconstructFormattingElements();
  tb.insert(startTag);
  tb.framesetOk(false);
  }
  } else if (name.equals(""a"")) {
  if (tb.getActiveFormattingElement(""a"")!= null) {
  tb.error(this);
  tb.process(new Token.EndTag(""a""));
 
  // still on stack?
  Element remainingA = tb.getFromStack(""a"");
  if",C,
736,"0x7f050051;
  public static final int notification_action_icon_size = 0x7f05005b;
  public static final int notification_action_text_size = 0x7f05005c;
  public static final int notification_big_circle_margin = 0x7f05005d;
  public static final int notification_content_margin_start = 0x7f05005e;
  public static final int notification_large_icon_height = 0x7f05005f;
  public static final int notification_large_icon_width =",DI,
737,"addCriterion(""id ="", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdNotEqualTo(Integer value) {
  addCriterion(""id <>"", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdGreaterThan(Integer value) {
  addCriterion(""id >"", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdGreaterThanOrEqualTo(Integer value) {
  addCriterion(""id >="", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdLessThan(Integer value) {
  addCriterion(""id <"", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andId",C,
738,"taskExecutionProperties;
 
  public AsyncConfiguration(TaskExecutionProperties taskExecutionProperties) {
  this.taskExecutionProperties = taskExecutionProperties;
  }
 
  @Override
  @Bean(name = ""taskExecutor"")
  public Executor getAsyncExecutor() {
  log.debug(""Creating Async Task Executor"");
  ThreadPoolTaskExecutor executor = new ThreadPoolTaskExecutor();
  executor.setCorePoolSize(taskExecutionProperties.getPool().getCoreSize());
  executor.setMaxPoolSize(taskExecutionProperties.getPool().getMaxSize());
  executor.setQueueCapacity(taskExecutionProperties.getPool().getQueueCapacity());
  executor.setThreadNamePrefix(taskExecutionProperties.getThreadNamePrefix());
  return new ExceptionHandlingAsyncTaskExecutor(executor",C,
739,":</p>
  * <ul>
  * <li>
  * <p>
  * <code>viewer-request</code>
  * </p>
  * </li>
  * <li>
  * <p>
  * <code>origin-request</code>
  * </p>
  * </li>
  * <li>
  * <p>
  * <code>viewer-response</code>
  * </p>
  * </li>
  * <li>
  * <p>
  * <code>origin-response</code>
  * </p>
  *",DO,
740,"libratus, aunque otras especies fueron incluidas erróneamente en este género. Como todos los tiranosáuridos conocidos, Gorgosaurus fue un bípedo depredador que en su madurez pesaba más de una tonelada y medía nueve metros de largo. Mostraba docenas de afilados dientes alineados en sus mandíbulas, mientras que sus extremidades anteriores, con dos dedos, eran relativamente cortas. El género Gorgosaurus está íntimamente emparentado con Albertosaurus y",DO,
741,",-9,-9,-9, // Decimal 192 - 204
  -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9, // Decimal 205 - 217
  -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9, // Decimal 218 - 230
  -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9, // Decimal 231 - 243
  -9,-9,-9,-9,-9",DI,
742,"DataEscaped);
  break;
  default:
  t.emit(c);
  t.transition(ScriptDataEscaped);
  }
  }
  },
  ScriptDataEscapedLessthanSign {
  void read(Tokeniser t, CharacterReader r) {
  if (r.matchesLetter()) {
  t.createTempBuffer();
  t.dataBuffer.append(Character.toLowerCase(r.current()));
  t.emit(""<"" + r.current());
  t.advanceTransition(ScriptDataDoubleEscapeStart);
  } else if (r.matches('/')) {
  t.createTempBuffer();
  t.advanceTransition(ScriptDataEscapedEndTagOpen);
  } else {
  t.",C,
743,"domainUserDetailsService.loadUserByUsername(USER_ONE_LOGIN);
  assertThat(userDetails).isNotNull();
  assertThat(userDetails.getUsername()).isEqualTo(USER_ONE_LOGIN);
  }
 
  @Test
  @Transactional
  public void assertThatUserCanBeFoundByLoginIgnoreCase() {
  UserDetails userDetails = domainUserDetailsService.loadUserByUsername(USER_ONE_LOGIN.toUpperCase(Locale.ENGLISH));
  assertThat(userDetails).isNotNull();
  assertThat(userDetails.getUsername()).isEqualTo(USER_ONE_LOGIN);
  }
 
  @Test
  @Transactional
  public void assertThatUserCanBeFoundByEmail() {
  UserDetails userDetails = domainUserDetailsService.loadUserByUsername(USER_",T,
744,"{
  emails.add(cursor.getString(ProfileQuery.ADDRESS));
  cursor.moveToNext();
  }
 
  addEmailsToAutoComplete(emails);
  }
 
  @Override
  public void onLoaderReset(Loader<Cursor> cursorLoader) {
 
  }
 
  private void addEmailsToAutoComplete(List<String> emailAddressCollection) {
  //Create adapter to tell the AutoCompleteTextView what to show in its dropdown list.
  ArrayAdapter<String> adapter =
  new ArrayAdapter<>(LoginActivity.this,
  android.R.layout.simple_dropdown_item_1line, emailAddressCollection);
 
  mEmailView.setAdapter(adapter);
  }
 
 
  private interface ProfileQuery {
  String[] PROJECTION",C,
745,"_creator = 33;
  public static final int ConstraintLayout_Layout_layout_constraintLeft_toLeftOf = 34;
  public static final int ConstraintLayout_Layout_layout_constraintLeft_toRightOf = 35;
  public static final int ConstraintLayout_Layout_layout_constraintRight_creator = 36;
  public static final int ConstraintLayout_Layout_layout_constraintRight_toLeftOf = 37;
  public static final int ConstraintLayout_Layout_layout_constraintRight_toRightOf = 38;
  public static final int ConstraintLayout_Layout_layout_constraintStart_toEndOf = 39;
  public static final int ConstraintLayout_",DI,
746,"(request, response, filterChain);
  assertThat(response.getStatus()).isEqualTo(HttpStatus.OK.value());
  assertThat(SecurityContextHolder.getContext().getAuthentication()).isNull();
  }
 
  @Test
  public void testJWTFilterMissingToken() throws Exception {
  MockHttpServletRequest request = new MockHttpServletRequest();
  request.addHeader(JWTFilter.AUTHORIZATION_HEADER, ""Bearer "");
  request.setRequestURI(""/api/test"");
  MockHttpServletResponse response = new MockHttpServletResponse();
  MockFilterChain filterChain = new MockFilterChain();
  jwtFilter.doFilter(request, response, filterChain);
  assertThat(response.getStatus()).isEqualTo(HttpStatus.OK.value());
  assertThat(SecurityContextHolder.getContext().getAuthentication()).isNull();",T,
747,"hanSign {
  void read(Tokeniser t, CharacterReader r) {
  if (r.matches('/')) {
  t.emit('/');
  t.createTempBuffer();
  t.advanceTransition(ScriptDataDoubleEscapeEnd);
  } else {
  t.transition(ScriptDataDoubleEscaped);
  }
  }
  },
  ScriptDataDoubleEscapeEnd {
  void read(Tokeniser t, CharacterReader r) {
  handleDataDoubleEscapeTag(t,r, ScriptDataEscaped, ScriptDataDoubleEscaped);
  }
  },
  BeforeAttributeName {
  // from tagname <xxx
  void read(Tokeniser t, CharacterReader r) {
  char c = r.consume();
  switch",C,
748,"Class = 0x7f03001f;
  public static final int actionViewClass = 0x7f030020;
  public static final int activityChooserViewStyle = 0x7f030021;
  public static final int alertDialogButtonGroupStyle = 0x7f030022;
  public static final int alertDialogCenterButtons = 0x7f030023;
  public static final int alertDialogStyle = 0x7f030024;
  public static final int alertDialogTheme = 0x7f030025;
  public static final int allow",DI,
749,">:]<i>name</i></code>"".
  */
  public static final int actionModeSplitBackground=0x7f01003d;
  /** <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionModeStyle=0x7f01003a;
  /** Drawable to use for the Web Search action button in WebView selection action modes 
  <p>Must be a reference",DO,
750,"OrEqualTo(Long value) {
  addCriterion(""id <="", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdIn(List<Long> values) {
  addCriterion(""id in"", values, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdNotIn(List<Long> values) {
  addCriterion(""id not in"", values, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdBetween(Long value1, Long value2) {
  addCriterion(""id between"", value1, value2, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdNotBetween(Long value1, Long value2",C,
751,");
  Thread.sleep(250);
  assertEquals(value, objectUnderTest.getProperty6());
  }
 
  @Test
  public void testProperty7() throws Exception {
  String value = ""value"";
  objectUnderTest.setProperty7(value);
  Thread.sleep(250);
  assertEquals(value, objectUnderTest.getProperty7());
  }
 
  @Test
  public void testProperty8() throws Exception {
  String value = ""value"";
  objectUnderTest.setProperty8(value);
  Thread.sleep(250);
  assertEquals(value, objectUnderTest.getProperty8());
  }
 
  @Test
  public void testProperty9() throws Exception {
  String value = ""value"";
  objectUnderTest.setProperty",T,
752,"Name,
  java.lang.String attValue,javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException{
  if (namespace.equals(""""))
  {
  xmlWriter.writeAttribute(attName,attValue);
  }
  else
  {
  registerPrefix(xmlWriter, namespace);
  xmlWriter.writeAttribute(namespace,attName,attValue);
  }
  }
 
 
  /**
  * Util method to write an attribute without the ns prefix
  */
  private void writeQNameAttribute(java.lang.String namespace, java.lang.String attName,
  javax.xml.namespace.QName qname, javax.xml.stream.XMLStreamWriter xml",C,
753,"PERMISSION_GRANTED) {
  return true;
  }
  if (shouldShowRequestPermissionRationale(READ_CONTACTS)) {
  Snackbar.make(mEmailView, R.string.permission_rationale, Snackbar.LENGTH_INDEFINITE)
  .setAction(android.R.string.ok, new View.OnClickListener() {
  @Override
  @TargetApi(Build.VERSION_CODES.M)
  public void onClick(View v) {
  requestPermissions(new String[]{READ_CONTACTS}, REQUEST_READ_CONTACTS);
  }
  });
  } else {
  requestPermissions(new String[]{READ_CONTACTS}, REQUEST_READ_CONTACTS);
  }
  return false",C,
754,"166 - 178
  -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9, // Decimal 179 - 191
  -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9, // Decimal 192 - 204
  -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-9, // Decimal 205 - 217
  -9,-9,-9,-9,-9,-9,-9,-9,-9,-9,-",DI,
755,"its => https://lakshmidrip.github.io/DROP/credits.html
  * - Issues Catalog => https://github.com/lakshmiDRIP/DROP/issues
  * 
  * Licensed under the Apache License, Version 2.0 (the ""License"");
  *  you may not use this file except in compliance with the License.
  * 
  * You may obtain a copy of the License at
  *  http://www.apache.org/licenses/LICENSE-2.0
  * 
  * Unless required by applicable law or agreed to in writing, software
  *  distributed under the License is distributed on an ""AS IS"" BASIS",L,
756,"_spec = 0x7f020007;
  public static final int mtrl_extended_fab_hide_motion_spec = 0x7f020008;
  public static final int mtrl_extended_fab_show_motion_spec = 0x7f020009;
  public static final int mtrl_extended_fab_state_list_animator = 0x7f02000a;
  public static final int mtrl_fab_hide_motion_spec = 0x7f02000b;
  public static final int mtrl_fab_show_motion_spec =",DI,
757,"ho de Araújo
 * Nelson Mendonça de Carvalho
 * Newton Morais e Silva
 * Pedro Alexandre Santos da Silva Filho
 * Rafael Corrêa Lima e Silva
 * Rafael Francisco Pinto
 * Rafael Koury Monteiro
 * Rafael Palermo de Araújo
 * Raphael Veras Rossiter
 * Roberto Sobreira Barbalho
 * Rodrigo Avellar Silveira
 * Rosana Carvalho Barbosa
 * Sávio Luiz de And",DO,
758,"drawable to use for action mode UI
  * <p>May be a reference to another resource, in the form
  * ""<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>"" or a theme
  * attribute in the form
  * ""<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>"".
  */
  public static final int actionModeBackground=0x7f030010;
  /**
  * <p>May be a reference to another resource, in the form
  * ""<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>"" or a theme",DO,
759,"without limitation the rights to use, copy, modify, merge,
  * publish, distribute, and/or sell copies of the Data Files or Software, and
  * to permit persons to whom the Data Files or Software are furnished to do so,
  * provided that (a) the above copyright notice(s) and this permission notice
  * appear with all copies of the Data Files or Software, (b) both the above
  * copyright notice(s) and this permission notice appear in associated
  * documentation, and (c) there is clear notice in each modified Data File or
  * in the Software as well as in the documentation associated with the Data
  * File(s) or Software that the data or software has been modified",L,
760,"010008;
  /** Default style for tabs within an action bar 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionBarTabStyle=0x7f010007;
  /** <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""",DO,
761,"* 8. Limitation of Liability. In no event and under no legal theory,
  * whether in tort (including negligence), contract, or otherwise,
  * unless required by applicable law (such as deliberate and grossly
  * negligent acts) or agreed to in writing, shall any Contributor be
  * liable to You for damages, including any direct, indirect, special,
  * incidental, or consequential damages of any character arising as a
  * result of this License or out of the use or inability to use the
  * Work (including but not limited to damages for loss of goodwill,
  *",L,
762,"0023;
  public static final int alertDialogStyle = 0x7f020024;
  public static final int alertDialogTheme = 0x7f020025;
  public static final int allowStacking = 0x7f020026;
  public static final int alpha = 0x7f020027;
  public static final int alphabeticModifiers = 0x7f020028;
  public static final int arrowHeadLength = 0x7f020029;
  public static final int arrowShaftLength = 0x7f02002a",DI,
763,"i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionOverflowButtonStyle=0x7f01000a;
  /** The name of an optional ActionProvider class to instantiate an action view
  and perform operations such as default action for that menu item.
  See {@link android.view.MenuItem#setActionProvider(android.view.ActionProvider)}
  for more info. 
  <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx'",DO,
764,"process(t);
  }
  },
  BeforeHead {
  boolean process(Token t, HtmlTreeBuilder tb) {
  if (isWhitespace(t)) {
  return true;
  } else if (t.isComment()) {
  tb.insert(t.asComment());
  } else if (t.isDoctype()) {
  tb.error(this);
  return false;
  } else if (t.isStartTag() && t.asStartTag().name().equals(""html"")) {
  return InBody.process(t, tb); // does not transition
  } else if (t.isStartTag() && t.asStartTag().name().equals(""head"")) {
  Element head",C,
765,".process(t, tb); // does not transition
  } else if (t.isStartTag() && t.asStartTag().name().equals(""head"")) {
  Element head = tb.insert(t.asStartTag());
  tb.setHeadElement(head);
  tb.transition(InHead);
  } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().name(), ""head"", ""body"", ""html"", ""br""))) {
  tb.process(new Token.StartTag(""head""));
  return tb.process(t);
  } else if (t.isEndTag()) {
  tb.error(this);
  return false;",C,
766,"40014;
  public static final int actionModeFindDrawable = 0x7f040015;
  public static final int actionModePasteDrawable = 0x7f040016;
  public static final int actionModePopupWindowStyle = 0x7f040017;
  public static final int actionModeSelectAllDrawable = 0x7f040018;
  public static final int actionModeShareDrawable = 0x7f040019;
  public static final int actionModeSplitBackground = 0x7f04001a;
  public static final int actionModeStyle =",DI,
767,"* The end of line string for this machine.
  */
  protected String eol = System.getProperty(""line.separator"", ""\n"");
 
  /**
  * Used to convert raw characters to their escaped version
  * when these raw version cannot be used as part of an ASCII
  * string literal.
  */
  static String add_escapes(String str) {
  StringBuffer retval = new StringBuffer();
  char ch;
  for (int i = 0; i < str.length(); i++) {
  switch (str.charAt(i))
  {
  case 0 :
  continue;
  case '\b':
  retval.append(""\\b"");
  continue;
  case '\t':
  retval.append(""\\t",C,
768,"()) {
  if (!body.hasAttr(attribute.getKey()))
  body.attributes().put(attribute);
  }
  }
  } else if (name.equals(""frameset"")) {
  tb.error(this);
  LinkedList<Element> stack = tb.getStack();
  if (stack.size() == 1 || (stack.size() > 2 &&!stack.get(1).nodeName().equals(""body""))) {
  // only in fragment case
  return false; // ignore
  } else if (!tb.framesetOk()) {
  return false; // ignore frameset
  } else {
  Element second = stack.get(1);
  if (second.parent()!= null)",C,
769,"Alexandre Santos da Silva Filho
 * Rafael Corrêa Lima e Silva
 * Rafael Francisco Pinto
 * Rafael Koury Monteiro
 * Rafael Palermo de Araújo
 * Raphael Veras Rossiter
 * Roberto Sobreira Barbalho
 * Rodrigo Avellar Silveira
 * Rosana Carvalho Barbosa
 * Sávio Luiz de Andrade Cavalcante
 * Tai Mu Shih
 * Thiago Augusto Souza do Nascimento
 * Tiago Moreno",DO,
770,"get(""sessionId"")).isEqualTo(""test-session-id"");
  }
 
  @Test
  public void testAddEventWithNullData() {
  Map<String, Object> data = new HashMap<>();
  data.put(""test-key"", null);
  AuditEvent event = new AuditEvent(""test-user"", ""test-type"", data);
  customAuditEventRepository.add(event);
  List<PersistentAuditEvent> persistentAuditEvents = persistenceAuditEventRepository.findAll();
  assertThat(persistentAuditEvents).hasSize(1);
  PersistentAuditEvent persistentAuditEvent = persistentAuditEvents.get(0);
  assertThat(persistentAuditEvent.getData().get(""test-key"")).isEqualTo(""null"");
  }
 
  @",T,
771,"transition(TagName);
  } else {
  t.error(this);
  t.emit('<'); // char that got us here
  t.transition(Data);
  }
  break;
  }
  }
  },
  EndTagOpen {
  void read(Tokeniser t, CharacterReader r) {
  if (r.isEmpty()) {
  t.eofError(this);
  t.emit(""</"");
  t.transition(Data);
  } else if (r.matchesLetter()) {
  t.createTagPending(false);
  t.transition(TagName);
  } else if (r.matches('>')) {
  t.error(this);
  t.advanceTransition(Data);
  } else {",C,
772," contact.
  Uri.withAppendedPath(ContactsContract.Profile.CONTENT_URI,
  ContactsContract.Contacts.Data.CONTENT_DIRECTORY), ProfileQuery.PROJECTION,
 
  // Select only email addresses.
  ContactsContract.Contacts.Data.MIMETYPE +
  "" =?"", new String[]{ContactsContract.CommonDataKinds.Email
  .CONTENT_ITEM_TYPE},
 
  // Show primary email addresses first. Note that there won't be
  // a primary email address if the user hasn't specified one.
  ContactsContract.Contacts.Data.IS_PRIMARY + "" DESC"");
  }
 
  @Override
  public void onLoadFinished(Loader<Cursor> cursorLoader, Cursor cursor) {
  List<",C,
773,"* as of the date such litigation is filed.
  *
  * 4. Redistribution. You may reproduce and distribute copies of the
  * Work or Derivative Works thereof in any medium, with or without
  * modifications, and in Source or Object form, provided that You
  * meet the following conditions:
  *
  * (a) You must give any other recipients of the Work or
  * Derivative Works a copy of this License; and
  *
  * (b) You must cause any modified files to carry prominent notices
  * stating that You changed the files; and
  *
  * (c) You must retain, in the Source form of",L,
774,"NotEqualTo(Integer value) {
  addCriterion(""id <>"", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdGreaterThan(Integer value) {
  addCriterion(""id >"", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdGreaterThanOrEqualTo(Integer value) {
  addCriterion(""id >="", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdLessThan(Integer value) {
  addCriterion(""id <"", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdLessThanOrEqualTo(Integer value) {
  addCriterion(""id <="", value, ""id"");
  return (Criteria) this",C,
775,"""password"");
  return (Criteria) this;
  }
 
  public Criteria andPasswordLessThanOrEqualTo(String value) {
  addCriterion(""password <="", value, ""password"");
  return (Criteria) this;
  }
 
  public Criteria andPasswordLike(String value) {
  addCriterion(""password like"", value, ""password"");
  return (Criteria) this;
  }
 
  public Criteria andPasswordNotLike(String value) {
  addCriterion(""password not like"", value, ""password"");
  return (Criteria) this;
  }
 
  public Criteria andPasswordIn(List<String> values) {
  addCriterion(""password in"", values, ""password"");
  return (Criteria) this;
  }
 
  public Criteria andPasswordNotIn(List",C,
776,"theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionModeShareDrawable=0x7f010043;
  /** Background drawable to use for action mode UI in the lower split bar 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionModeSplitBackground=0",DO,
777,"@Override
  public void onCreate() {
  super.onCreate();
  SoLoader.init(this, /* native exopackage */ false);
  initializeFlipper(this, getReactNativeHost().getReactInstanceManager());
  }
 
  /**
  * Loads Flipper in React Native templates. Call this in the onCreate method with something like
  * initializeFlipper(this, getReactNativeHost().getReactInstanceManager());
  *
  * @param context
  * @param reactInstanceManager
  */
  private static void initializeFlipper(
  Context context, ReactInstanceManager reactInstanceManager) {
  if (BuildConfig.DEBUG) {
  try {
  /*
  We use reflection here to pick up the class that initializes Flip",C,
778,") for the original code used.
  *
  * After any such modifications, the original and derivative code shall remain
  * under the copyright of the copyright holder(s) and/or original author(s)per
  * the Attribution and Assignment Agreement that can be located at
  * http://www.open-xchange.com/EN/developer/. The contributing author shall be
  * given Attribution for the derivative code and a license granting use.
  *
  * Copyright (C) 2016-2020 OX Software GmbH
  * Mail: info@open-xchange.com
  *
  *
  * This program is free software; you",L,
779,"* appropriateness of using or redistributing the Work and assume any
  * risks associated with Your exercise of permissions under this License.
  *
  * 8. Limitation of Liability. In no event and under no legal theory,
  * whether in tort (including negligence), contract, or otherwise,
  * unless required by applicable law (such as deliberate and grossly
  * negligent acts) or agreed to in writing, shall any Contributor be
  * liable to You for damages, including any direct, indirect, special,
  * incidental, or consequential damages of any character arising as a
  *",L,
780,"or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionBarStyle=0x7f01000b;
  /** <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionBarTabBarStyle=0x7f010008;
  /**",DO,
781,">
  * <tr><td>async</td><td>1</td><td>The async font fetch works as follows.
  * First, check the local cache, then if the requeted font is not cached, trigger a
  * request the font and continue with layout inflation. Once the font fetch succeeds, the
  * target text view will be refreshed with the downloaded font data. The
  * fontProviderFetchTimeout will be ignored if async loading is specified.</td></tr>
  * <tr><td>blocking</td><td>0</td><td>The blocking font fetch works as follows.
  * First, check the local cache, then if the requested font is not cached, request",DO,
782,"00)), ""test-type"");
  assertThat(events).hasSize(1);
  AuditEvent event = events.get(0);
  assertThat(event.getPrincipal()).isEqualTo(testUserEvent.getPrincipal());
  assertThat(event.getType()).isEqualTo(testUserEvent.getAuditEventType());
  assertThat(event.getData()).containsKey(""test-key"");
  assertThat(event.getData().get(""test-key"").toString()).isEqualTo(""test-value"");
  assertThat(event.getTimestamp()).isEqualTo(Date.from(testUserEvent.getAuditEventDate()));
  }
 
  @Test
  public void addAuditEvent() {
  Map<String, Object> data = new HashMap<>();
  data.put(""test",T,
783,"null);
  } else {
  // Set the summary to reflect the new ringtone display
  // name.
  String name = ringtone.getTitle(preference.getContext());
  preference.setSummary(name);
  }
  }
 
  } else {
  // For all other preferences, set the summary to the value's
  // simple string representation.
  preference.setSummary(stringValue);
  }
  return true;
  }
  };
 
  /**
  * Helper method to determine if the device has an extra-large screen. For
  * example, 10"" tablets are extra-large.
  */
  private static boolean isXLargeTablet(Context context) {
  return (context.getResources().getConfiguration().screenLayout",C,
784,"int actionBarSplitStyle=0x7f01000c;
  /** Reference to a style for the Action Bar 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionBarStyle=0x7f01000b;
  /** <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i",DO,
785,"0x7f030027;
  public static final int alphabeticModifiers = 0x7f030028;
  public static final int arrowHeadLength = 0x7f030029;
  public static final int arrowShaftLength = 0x7f03002a;
  public static final int autoCompleteTextViewStyle = 0x7f03002b;
  public static final int autoSizeMaxTextSize = 0x7f03002c;
  public static final int autoSizeMinTextSize = 0x7f03002d;
  public static final int auto",DI,
786,"this.entityAudit.setUpdatedBy(userId);
  }
  setSystemInformation(recordType);
  }
 
  @Override
  public void setEntityAudit(int customerId, String userId) {
  if (entityAudit == null) {
  entityAudit = new EntityAudit();
  }
  if (getPrimaryKey() == null) {
  this.entityAudit.setCreatedBy(userId);
  this.systemInfo.setActiveStatus(1);
  } else {
  this.entityAudit.setUpdatedBy(userId);
  }
  }
 
  @JsonIgnore
  public String getLoggedInUserInfo() {
  String auditInfo = """";
  if (this.entityAudit!= null) {
  auditInfo = entityAudit.toString();
  }",C,
787,"media types.
  *
  * ""Work"" shall mean the work of authorship, whether in Source or
  * Object form, made available under the License, as indicated by a
  * copyright notice that is included in or attached to the work
  * (an example is provided in the Appendix below).
  *
  * ""Derivative Works"" shall mean any work, whether in Source or Object
  * form, that is based on (or derived from) the Work and for which the
  * editorial revisions, annotations, elaborations, or other modifications
  * represent, as a whole, an original work of authorship. For the purposes
  * of this License, Deriv",L,
788,#ERROR!,T,
789,"data {
  void read(Tokeniser t, CharacterReader r) {
  Character c = t.consumeCharacterReference(null, false);
  if (c == null)
  t.emit('&');
  else
  t.emit(c);
  t.transition(Rcdata);
  }
  },
  Rawtext {
  void read(Tokeniser t, CharacterReader r) {
  switch (r.current()) {
  case '<':
  t.advanceTransition(RawtextLessthanSign);
  break;
  case nullChar:
  t.error(this);
  r.advance();
  t.emit(replacementChar);
  break;
  case eof:
  t.emit(new Token.EOF());",C,
790,"/
  * - DRIP Numerical Optimizer - https://lakshmidrip.github.io/DRIP-Numerical-Optimizer/
  * - DRIP Statistical Learning - https://lakshmidrip.github.io/DRIP-Statistical-Learning/
  * 
  * - DRIP Fixed Income: Library for Instrument/Trading Conventions, Treasury Futures/Options,
  *  Funding/Forward/Overnight Curves, Multi-Curve Construction/Valuation, Collateral Valuation and XVA
  *  Metric Generation, Calibration and Hedge Attributions, Statistical Curve Construction, Bond RV
  *",DO,
791,"(UserDetails) authentication.getPrincipal();
  return springSecurityUser.getUsername();
  } else if (authentication.getPrincipal() instanceof String) {
  return (String) authentication.getPrincipal();
  }
  return null;
  });
  }
 
  /**
  * Get the JWT of the current user.
  *
  * @return the JWT of the current user
  */
  public static Optional<String> getCurrentUserJWT() {
  SecurityContext securityContext = SecurityContextHolder.getContext();
  return Optional.ofNullable(securityContext.getAuthentication())
  .filter(authentication -> authentication.getCredentials() instanceof String)
  .map(authentication -> (String) authentication.getCredentials());
  }
 
  /**
  * Check if a",C,
792,"Of = 34;
  public static final int ConstraintLayout_Layout_layout_constraintLeft_toRightOf = 35;
  public static final int ConstraintLayout_Layout_layout_constraintRight_creator = 36;
  public static final int ConstraintLayout_Layout_layout_constraintRight_toLeftOf = 37;
  public static final int ConstraintLayout_Layout_layout_constraintRight_toRightOf = 38;
  public static final int ConstraintLayout_Layout_layout_constraintStart_toEndOf = 39;
  public static final int ConstraintLayout_Layout_layout_constraintStart_toStartOf = 40;
  public static final int ConstraintLayout_Layout",DI,
793,"if the requeted font is not cached, trigger a
  * request the font and continue with layout inflation. Once the font fetch succeeds, the
  * target text view will be refreshed with the downloaded font data. The
  * fontProviderFetchTimeout will be ignored if async loading is specified.</td></tr>
  * <tr><td>blocking</td><td>0</td><td>The blocking font fetch works as follows.
  * First, check the local cache, then if the requested font is not cached, request the
  * font from the provider and wait until it is finished. You can change the length of
  * the timeout by modifying fontProviderFetchTimeout. If the timeout happens,",DO,
794,"case '>':
  t.emit(c);
  t.transition(ScriptData);
  break;
  case nullChar:
  t.error(this);
  t.emit(replacementChar);
  t.transition(ScriptDataDoubleEscaped);
  break;
  case eof:
  t.eofError(this);
  t.transition(Data);
  break;
  default:
  t.emit(c);
  t.transition(ScriptDataDoubleEscaped);
  }
  }
  },
  ScriptDataDoubleEscapedLessthanSign {
  void read(Tokeniser t, CharacterReader r) {
  if (r.matches('/')) {
  t.emit('/');
  t.createTempBuffer();",C,
795,"addCriterion(""userName not like"", value, ""username"");
  return (Criteria) this;
  }
 
  public Criteria andUsernameIn(List<String> values) {
  addCriterion(""userName in"", values, ""username"");
  return (Criteria) this;
  }
 
  public Criteria andUsernameNotIn(List<String> values) {
  addCriterion(""userName not in"", values, ""username"");
  return (Criteria) this;
  }
 
  public Criteria andUsernameBetween(String value1, String value2) {
  addCriterion(""userName between"", value1, value2, ""username"");
  return (Criteria) this;
  }
 
  public Criteria andUsernameNotBetween(String value1, String value2) {
  addCriterion(""",C,
796,"of the use or inability to use the
  * Work (including but not limited to damages for loss of goodwill,
  * work stoppage, computer failure or malfunction, or any and all
  * other commercial damages or losses), even if such Contributor
  * has been advised of the possibility of such damages.
  *
  * 9. Accepting Warranty or Additional Liability. While redistributing
  * the Work or Derivative Works thereof, You may choose to offer,
  * and charge a fee for, acceptance of support, warranty, indemnity,
  * or other liability obligations and/or rights consistent with this",DO,
797,"Evolution and Option Pricing, Interest Rate Dynamics and Option Pricing, LMM
  *  Extensions/Calibrations/Greeks, Algorithmic Differentiation, and Asset Backed Models and Analytics.
  * 
  * - DRIP Asset Allocation: Library for model libraries for MPT framework, Black Litterman Strategy
  *  Incorporator, Holdings Constraint, and Transaction Costs.
  * 
  * - DRIP Numerical Optimizer: Library for Numerical Optimization and Spline Functionality.
  * 
  * - DRIP Statistical Learning: Library for Statistical Evaluation and Machine Learning.
  * 
  * Licensed under the Apache License, Version 2.",DO,
798,"AuditEventRepository.save(testOldUserEvent);
  persistenceAuditEventRepository.save(testOtherUserEvent);
 
  List<AuditEvent> events = customAuditEventRepository
  .find(""test-user"", Date.from(testUserEvent.getAuditEventDate().minusSeconds(3600)));
  assertThat(events).hasSize(1);
  AuditEvent event = events.get(0);
  assertThat(event.getPrincipal()).isEqualTo(testUserEvent.getPrincipal());
  assertThat(event.getType()).isEqualTo(testUserEvent.getAuditEventType());
  assertThat(event.getData()).containsKey(""test-key"");
  assertThat(event.getData().get(""test-key"").toString()).isEqualTo(""",T,
799,"</i>:]<i>name</i></code>"".
 <p>May be a color value, in the form of ""<code>#<i>rgb</i></code>"", ""<code>#<i>argb</i></code>"",
 ""<code>#<i>rrggbb</i></code>"", or ""<code>#<i>aarrggbb</i></code>"".
  */
  public static final int actionMenuTextColor=0x7f010012;
  /** Background drawable to use for action mode UI 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or",DO,
800,"param field field to which this instance belongs
  * @param x value to convert to an instance
  */
  protected Dfp(final DfpField field, double x) {
 
  // initialize as if 0
  mant = new int[field.getRadixDigits()];
  sign = 1;
  exp = 0;
  nans = FINITE;
  this.field = field;
 
  long bits = Double.doubleToLongBits(x);
  long mantissa = bits & 0x000fffffffffffffL;
  int exponent = (int) ((bits & 0x7ff0000000000000L) >> 52) -",C,
801,"7f030016;
  public static final int actionModePopupWindowStyle = 0x7f030017;
  public static final int actionModeSelectAllDrawable = 0x7f030018;
  public static final int actionModeShareDrawable = 0x7f030019;
  public static final int actionModeSplitBackground = 0x7f03001a;
  public static final int actionModeStyle = 0x7f03001b;
  public static final int actionModeWebSearchDrawable = 0x7f03001c;
  public static final int actionOverflow",DI,
802,"terms"") public ReferenceList getAssignedToTerms() { return this.assigned_to_terms; }
  /** @see #assigned_to_terms */ @JsonProperty(""assigned_to_terms"") public void setAssignedToTerms(ReferenceList assigned_to_terms) { this.assigned_to_terms = assigned_to_terms; }
 
  /** @see #implements_rules */ @JsonProperty(""implements_rules"") public ReferenceList getImplementsRules() { return this.implements_rules; }
  /** @see #implements_rules */ @JsonProperty(""implements_rules"") public void setImplementsRules(ReferenceList implements_rules) { this.implements_rules = implements_rules; }
 
  /**",DO,
803,"until the exponent reaches MIN_EXP-digits.
  * Thus the smallest number we can represent would be:
  * 1E(-(MIN_EXP-digits-1)*4), eg, for digits=5, MIN_EXP=-32767, that would
  * be 1e-131092.</p>
  *
  * <p>IEEE 854 defines that the implied radix point lies just to the right
  * of the most significant digit and to the left of the remaining digits.
  * This implementation puts the implied radix point to the left of all
  * digits including the most significant one. The most significant digit
  *",DO,
804,"006;
  public static final int mtrl_extended_fab_change_size_motion_spec = 0x7f020007;
  public static final int mtrl_extended_fab_hide_motion_spec = 0x7f020008;
  public static final int mtrl_extended_fab_show_motion_spec = 0x7f020009;
  public static final int mtrl_extended_fab_state_list_animator = 0x7f02000a;
  public static final int mtrl_fab_hide_motion_spec = 0x7f02",DI,
805,"0x7f02003d;
  public static final int buttonBarStyle = 0x7f02003e;
  public static final int buttonGravity = 0x7f02003f;
  public static final int buttonIconDimen = 0x7f020040;
  public static final int buttonPanelSideLayout = 0x7f020041;
  public static final int buttonStyle = 0x7f020042;
  public static final int buttonStyleSmall = 0x7f020043;
  public static final int buttonTint = 0x7f",DI,
806,"menor proporción, con Tyrannosaurus. Los fósiles de Gorgosaurus y Albertosaurus, de hecho, son extremadamente similares, distinguiéndose sutilmente por pequeñas diferencias en los huesos del cráneo y los dientes, lo que hace que algunos expertos consideren a G. libratus como una de las especies, un sinónimo menor, del género Albertosaurus.Gorgosaurus vivió en un exuberante ambiente inundable a lo largo de la costa del mar interior occidental. Fue un superde",DO,
807,"or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionModeSplitBackground=0x7f01003d;
  /** <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionModeStyle=0x7f01003a;
  /**",DO,
808,"final int notification_action_text_size = 0x7f06012f;
  public static final int notification_big_circle_margin = 0x7f060130;
  public static final int notification_content_margin_start = 0x7f060131;
  public static final int notification_large_icon_height = 0x7f060132;
  public static final int notification_large_icon_width = 0x7f060133;
  public static final int notification_main_column_padding_top = 0x7f060134;",DI,
809,"static final int actionBarPopupTheme=0x7f030002;
  /**
  * Size of the Action Bar, including the contextual
  * bar used to present Action Modes.
  * <p>May be a dimension value, which is a floating point number appended with a
  * unit such as ""<code>14.5sp</code>"".
  * Available units are: px (pixels), dp (density-independent pixels),
  * sp (scaled pixels based on preferred font size), in (inches), and
  * mm (millimeters).
  * <p>Must be one of the following constant values.</p>
  * <table>
  * <colgroup align=""left"" />",DO,
810,"in decimal digits
  final int offset = 4; // Starting offset into Striped
  final char[] striped = new char[getRadixDigits() * rsize + offset * 2];
 
  // Check some special cases
  if (s.equals(POS_INFINITY_STRING)) {
  sign = (byte) 1;
  nans = INFINITE;
  return;
  }
 
  if (s.equals(NEG_INFINITY_STRING)) {
  sign = (byte) -1;
  nans = INFINITE;
  return;
  }
 
  if (s.equals(NAN_STRING)) {
  sign = (byte) 1;
  nans = QNAN;
  return",C,
811,"</th><th>Description</th></tr>
  * <tr><td>async</td><td>1</td><td>The async font fetch works as follows.
  * First, check the local cache, then if the requeted font is not cached, trigger a
  * request the font and continue with layout inflation. Once the font fetch succeeds, the
  * target text view will be refreshed with the downloaded font data. The
  * fontProviderFetchTimeout will be ignored if async loading is specified.</td></tr>
  * <tr><td>blocking</td><td>0</td><td>The blocking font fetch works as follows.
  * First, check the local cache,",DO,
812,"04e;
  public static final int colorBackgroundFloating = 0x7f02004f;
  public static final int colorButtonNormal = 0x7f020050;
  public static final int colorControlActivated = 0x7f020051;
  public static final int colorControlHighlight = 0x7f020052;
  public static final int colorControlNormal = 0x7f020053;
  public static final int colorError = 0x7f020054;
  public static final int colorPrimary = 0x7f020055;",DI,
813,"null, this);
  }
 
  private boolean mayRequestContacts() {
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
  return true;
  }
  if (checkSelfPermission(READ_CONTACTS) == PackageManager.PERMISSION_GRANTED) {
  return true;
  }
  if (shouldShowRequestPermissionRationale(READ_CONTACTS)) {
  Snackbar.make(mEmailView, R.string.permission_rationale, Snackbar.LENGTH_INDEFINITE)
  .setAction(android.R.string.ok, new View.OnClickListener() {
  @Override
  @TargetApi(Build.VERSION_CODES.M)
  public void onClick",C,
814,"with
  * the conditions stated in this License.
  *
  * 5. Submission of Contributions. Unless You explicitly state otherwise,
  * any Contribution intentionally submitted for inclusion in the Work
  * by You to the Licensor shall be under the terms and conditions of
  * this License, without any additional terms or conditions.
  * Notwithstanding the above, nothing herein shall supersede or modify
  * the terms of any separate license agreement you may have executed
  * with Licensor regarding such Contributions.
  *
  * 6. Trademarks. This License does not grant permission to use the trade
  * names, trademarks, service marks, or product names of",L,
815,"7f030009;
  /**
  * Reference to a theme that should be used to inflate widgets
  * and layouts destined for the action bar. Most of the time
  * this will be a reference to the current theme, but when
  * the action bar has a significantly different contrast
  * profile than the rest of the activity the difference
  * can become important. If this is set to @null the current
  * theme will be used.
  * <p>May be a reference to another resource, in the form
  * ""<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>"" or a theme
  * attribute in the form
  * ""<",DO,
816,"LessthanSign);
  }
  },
  ScriptData {
  void read(Tokeniser t, CharacterReader r) {
  readData(t, r, this, ScriptDataLessthanSign);
  }
  },
  PLAINTEXT {
  void read(Tokeniser t, CharacterReader r) {
  switch (r.current()) {
  case nullChar:
  t.error(this);
  r.advance();
  t.emit(replacementChar);
  break;
  case eof:
  t.emit(new Token.EOF());
  break;
  default:
  String data = r.consumeTo(nullChar);
  t.emit(data);
  break;
  }
  }
  },",C,
817,"assertThat(event.getType()).isEqualTo(testUserEvent.getAuditEventType());
  assertThat(event.getData()).containsKey(""test-key"");
  assertThat(event.getData().get(""test-key"").toString()).isEqualTo(""test-value"");
  assertThat(event.getTimestamp()).isEqualTo(Date.from(testUserEvent.getAuditEventDate()));
  }
 
  @Test
  public void testFindByPrincipal() {
  persistenceAuditEventRepository.save(testUserEvent);
  persistenceAuditEventRepository.save(testOldUserEvent);
  persistenceAuditEventRepository.save(testOtherUserEvent);
 
  List<AuditEvent> events = customAuditEventRepository
  .find(""test-user"", Date.from(test",T,
818,"</i>:]<i>name</i></code>"".
  */
  public static final int actionLayout=0x7f01004e;
  /** TextAppearance style that will be applied to text that
  appears within action menu items. 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionMenuTextAppearance=0x7f010011;
  /** Color for text",DO,
819,"i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionModeCloseButtonStyle=0x7f01003b;
  /** Drawable to use for the close action mode button 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */",DO,
820,"} else if (StringUtil.in(name,
  ""address"", ""article"", ""aside"", ""blockquote"", ""center"", ""details"", ""dir"", ""div"", ""dl"",
  ""fieldset"", ""figcaption"", ""figure"", ""footer"", ""header"", ""hgroup"", ""menu"", ""nav"", ""ol"",
  ""p"", ""section"", ""summary"", ""ul"")) {
  if (tb.inButtonScope(""p"")) {
  tb.process(new Token.EndTag(""p""));
  }
  tb.insert(startTag);
  } else if (StringUtil.in(name, ""h1"", ""h2"", ""h3"", ""h4"", ""h5"", ""h",C,
821,"pop up to html element
  while (stack.size() > 1)
  stack.removeLast();
  tb.insert(startTag);
  tb.transition(InFrameset);
  }
  } else if (StringUtil.in(name,
  ""address"", ""article"", ""aside"", ""blockquote"", ""center"", ""details"", ""dir"", ""div"", ""dl"",
  ""fieldset"", ""figcaption"", ""figure"", ""footer"", ""header"", ""hgroup"", ""menu"", ""nav"", ""ol"",
  ""p"", ""section"", ""summary"", ""ul"")) {
  if (tb.inButtonScope(""p"")) {
  tb.process(new Token.EndTag(""p""));
  }",C,
822,"addCriterion(""userName like"", value, ""username"");
  return (Criteria) this;
  }
 
  public Criteria andUsernameNotLike(String value) {
  addCriterion(""userName not like"", value, ""username"");
  return (Criteria) this;
  }
 
  public Criteria andUsernameIn(List<String> values) {
  addCriterion(""userName in"", values, ""username"");
  return (Criteria) this;
  }
 
  public Criteria andUsernameNotIn(List<String> values) {
  addCriterion(""userName not in"", values, ""username"");
  return (Criteria) this;
  }
 
  public Criteria andUsernameBetween(String value1, String value2) {
  addCriterion(""userName between"", value1, value2, """,C,
823,"()).isEqualTo(testUserEvent.getPrincipal());
  assertThat(event.getType()).isEqualTo(testUserEvent.getAuditEventType());
  assertThat(event.getData()).containsKey(""test-key"");
  assertThat(event.getData().get(""test-key"").toString()).isEqualTo(""test-value"");
  assertThat(event.getTimestamp()).isEqualTo(Date.from(testUserEvent.getAuditEventDate()));
  }
 
  @Test
  public void testFindByPrincipal() {
  persistenceAuditEventRepository.save(testUserEvent);
  persistenceAuditEventRepository.save(testOldUserEvent);
  persistenceAuditEventRepository.save(testOtherUserEvent);
 
  List<AuditEvent> events = customAuditEventRepository
  .find",T,
824,"/= RADIX;
  exp++;
  }
 
  if (isLongMin) {
  // remove the shift added for Long.MIN_VALUE
  // we know in this case that fixing the last digit is sufficient
  for (int i = 0; i < mant.length - 1; i++) {
  if (mant[i]!= 0) {
  mant[i]++;
  break;
  }
  }
  }
  }
 
  /** Create an instance from a double value.
  * @param field field to which this instance belongs
  * @param x value to convert to an instance
  */
  protected Dfp(final DfpField field, double x) {
 
  // initialize as if",C,
825,"AuditEventDate(testUserEvent.getAuditEventDate());
  persistenceAuditEventRepository.save(testUserOtherTypeEvent);
 
  List<AuditEvent> events = customAuditEventRepository.find(""test-user"",
  Date.from(testUserEvent.getAuditEventDate().minusSeconds(3600)), ""test-type"");
  assertThat(events).hasSize(1);
  AuditEvent event = events.get(0);
  assertThat(event.getPrincipal()).isEqualTo(testUserEvent.getPrincipal());
  assertThat(event.getType()).isEqualTo(testUserEvent.getAuditEventType());
  assertThat(event.getData()).containsKey(""test-key"");
  assertThat(event.getData().get(""",T,
826,"type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionButtonStyle=0x7f010016;
  /** Default ActionBar dropdown style. 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final",DO,
827,"public static final int actionModePasteDrawable = 0x7f020016;
  public static final int actionModePopupWindowStyle = 0x7f020017;
  public static final int actionModeSelectAllDrawable = 0x7f020018;
  public static final int actionModeShareDrawable = 0x7f020019;
  public static final int actionModeSplitBackground = 0x7f02001a;
  public static final int actionModeStyle = 0x7f02001b;
  public static final int actionModeWebSearchDrawable = 0x7f0",DI,
828,"* copy, modify, merge, publish, distribute, and/or sell copies of
  * the Data Files or Software, and to permit persons to whom the Data Files
  * or Software are furnished to do so, provided that
  * (a) this copyright and permission notice appear with all copies 
  * of the Data Files or Software,
  * (b) this copyright and permission notice appear in associated 
  * documentation, and
  * (c) there is clear notice in each modified Data File or in the Software
  * as well as in the documentation associated with the Data File(s) or
  * Software that the data or software has been modified.
  *
  * THE DATA FILES AND SOFTWARE ARE PROVIDED ""AS IS"",",L,
829,"0));
  userThree.setActivated(false);
  userThree.setEmail(USER_THREE_EMAIL);
  userThree.setFirstName(""userThree"");
  userThree.setLastName(""doe"");
  userThree.setLangKey(""en"");
  userRepository.save(userThree);
  }
 
  @Test
  @Transactional
  public void assertThatUserCanBeFoundByLogin() {
  UserDetails userDetails = domainUserDetailsService.loadUserByUsername(USER_ONE_LOGIN);
  assertThat(userDetails).isNotNull();
  assertThat(userDetails.getUsername()).isEqualTo(USER_ONE_LOGIN);
  }
 
  @Test
  @Transactional
  public void assertThatUserCanBeFoundByLoginIgnoreCase() {",T,
830,"value, ""created"");
  return (Criteria) this;
  }
 
  public Criteria andCreatedLessThanOrEqualTo(Date value) {
  addCriterion(""created <="", value, ""created"");
  return (Criteria) this;
  }
 
  public Criteria andCreatedIn(List<Date> values) {
  addCriterion(""created in"", values, ""created"");
  return (Criteria) this;
  }
 
  public Criteria andCreatedNotIn(List<Date> values) {
  addCriterion(""created not in"", values, ""created"");
  return (Criteria) this;
  }
 
  public Criteria andCreatedBetween(Date value1, Date value2) {
  addCriterion(""created between"", value1, value2, ""created"");
  return (Criteria",C,
831,"MS technology testing and IMS application prototyping for research
  * purposes, typically performed in IMS test-beds.
  *
  * Users of the Open Source IMS Core System have to be aware that IMS
  * technology may be subject of patents and licence terms, as being
  * specified within the various IMS-related IETF, ITU-T, ETSI, and 3GPP
  * standards. Thus all Open IMS Core users have to take notice of this
  * fact and have to agree to check out carefully before installing,
  * using and extending the Open Source IMS Core System, if related
  * patents and licenses may become applicable to the intended usage
  *",DO,
832,"}
 
  @Test
  @Transactional
  public void createUserWithExistingLogin() throws Exception {
  // Initialize the database
  userRepository.saveAndFlush(user);
  int databaseSizeBeforeCreate = userRepository.findAll().size();
 
  ManagedUserVM managedUserVM = new ManagedUserVM();
  managedUserVM.setLogin(DEFAULT_LOGIN);// this login should already be used
  managedUserVM.setPassword(DEFAULT_PASSWORD);
  managedUserVM.setFirstName(DEFAULT_FIRSTNAME);
  managedUserVM.setLastName(DEFAULT_LASTNAME);
  managedUserVM.setEmail(""anothermail@localhost"");
  managedUserVM.setActivated(true);
  managedUserVM.setImageUrl(DEFAULT",T,
833,#ERROR!,DI,
834,"053;
  public static final int compat_notification_large_icon_max_width = 0x7f060054;
  public static final int notification_action_icon_size = 0x7f0600c0;
  public static final int notification_action_text_size = 0x7f0600c1;
  public static final int notification_big_circle_margin = 0x7f0600c2;
  public static final int notification_content_margin_start = 0x7f0600c3;
  public static final int notification_large_icon_height = 0x7",DI,
835,"token);
 
  assertThat(isTokenValid).isEqualTo(false);
  }
 
  @Test
  public void testReturnFalseWhenJWTisUnsupported() {
  String unsupportedToken = createUnsupportedToken();
 
  boolean isTokenValid = tokenProvider.validateToken(unsupportedToken);
 
  assertThat(isTokenValid).isEqualTo(false);
  }
 
  @Test
  public void testReturnFalseWhenJWTisInvalid() {
  boolean isTokenValid = tokenProvider.validateToken("""");
 
  assertThat(isTokenValid).isEqualTo(false);
  }
 
  private Authentication createAuthentication() {
  Collection<GrantedAuthority> authorities = new ArrayList<>();
  authorities.add(new SimpleGrantedAuthority(AuthoritiesConstants.ANONYMOUS));
  return new Username",T,
836,"api/users"")
  .contentType(TestUtil.APPLICATION_JSON_UTF8)
  .content(TestUtil.convertObjectToJsonBytes(managedUserVM)))
  .andExpect(status().isCreated());
 
  // Validate the User in the database
  List<User> userList = userRepository.findAll();
  assertThat(userList).hasSize(databaseSizeBeforeCreate + 1);
  User testUser = userList.get(userList.size() - 1);
  assertThat(testUser.getLogin()).isEqualTo(DEFAULT_LOGIN);
  assertThat(testUser.getFirstName()).isEqualTo(DEFAULT_FIRSTNAME);
  assertThat(testUser.getLastName()).isEqualTo(DEFAULT_LASTNAME);
  assertThat(testUser",T,
837,"t, r);
  }
  }
 
  private void anythingElse(Tokeniser t, CharacterReader r) {
  t.emit(""</"" + t.dataBuffer.toString());
  r.unconsume();
  t.transition(Rcdata);
  }
  },
  RawtextLessthanSign {
  void read(Tokeniser t, CharacterReader r) {
  if (r.matches('/')) {
  t.createTempBuffer();
  t.advanceTransition(RawtextEndTagOpen);
  } else {
  t.emit('<');
  t.transition(Rawtext);
  }
  }
  },
  RawtextEndTagOpen {
  void read(Tokeniser t, CharacterReader r) {
  read",C,
838,"NetworkingModule.setCustomClientBuilder(
  new NetworkingModule.CustomClientBuilder() {
  @Override
  public void apply(OkHttpClient.Builder builder) {
  builder.addNetworkInterceptor(new FlipperOkhttpInterceptor(networkFlipperPlugin));
  }
  });
  client.addPlugin(networkFlipperPlugin);
  client.start();
 
  // Fresco Plugin needs to ensure that ImagePipelineFactory is initialized
  // Hence we run if after all native modules have been initialized
  ReactContext reactContext = reactInstanceManager.getCurrentReactContext();
  if (reactContext == null) {
  reactInstanceManager.addReactInstanceEventListener(
  new ReactInstanceManager.ReactInstanceEventListener() {
  @Override",C,
839,";
  case StartTag:
  Token.StartTag start = t.asStartTag();
  String name = start.name();
  if (name.equals(""html"")) {
  return InBody.process(t, tb);
  } else if (StringUtil.in(name, ""base"", ""basefont"", ""bgsound"", ""command"", ""link"")) {
  Element el = tb.insertEmpty(start);
  // jsoup special: update base the frist time it is seen
  if (name.equals(""base"") && el.hasAttr(""href""))
  tb.maybeSetBaseUri(el);
  } else if (name.equals(""meta"")) {
  Element meta = tb.insertEmpty",C,
840,"this.apiVersion = apiVersion;
 }
 
 public void setTerminalType(String terminalType){
 this.terminalType=terminalType;
 }
 
  public String getTerminalType(){
   return this.terminalType;
  }
 
  public void setTerminalInfo(String terminalInfo){
   this.terminalInfo=terminalInfo;
  }
 
  public String getTerminalInfo(){
   return this.terminalInfo;
  } 
 
 public void setProdCode(String prodCode) {
 this.prodCode=prodCode;
 }
 
 public String getProdCode() {
 return this.prodCode; 
 }
 
 public String getApiMethodName() {",C,
841,"Object> data = new HashMap<>();
  data.put(""test-key"", ""test-value"");
  AuditEvent event = new AuditEvent(""test-user"", ""test-type"", data);
  customAuditEventRepository.add(event);
  List<PersistentAuditEvent> persistentAuditEvents = persistenceAuditEventRepository.findAll();
  assertThat(persistentAuditEvents).hasSize(1);
  PersistentAuditEvent persistentAuditEvent = persistentAuditEvents.get(0);
  assertThat(persistentAuditEvent.getPrincipal()).isEqualTo(event.getPrincipal());
  assertThat(persistentAuditEvent.getAuditEventType()).isEqualTo(event.getType());
  assertThat(persistentAuditEvent.getData()).containsKey(""test-key"");
  assertThat(persistent",T,
842,".map(authentication -> (String) authentication.getCredentials());
  }
 
  /**
  * Check if a user is authenticated.
  *
  * @return true if the user is authenticated, false otherwise
  */
  public static boolean isAuthenticated() {
  SecurityContext securityContext = SecurityContextHolder.getContext();
  return Optional.ofNullable(securityContext.getAuthentication())
  .map(authentication -> authentication.getAuthorities().stream()
  .noneMatch(grantedAuthority -> grantedAuthority.getAuthority().equals(AuthoritiesConstants.ANONYMOUS)))
  .orElse(false);
  }
 
  /**
  * If the current user has a specific authority (security role).
  * <p>
  * The name",C,
843,"Carlos Elmano Rodrigues Ferreira
  * Cláudio de Andrade Lira
  * Denys Guimarães Guenes Tavares
  * Eduardo Breckenfeld da Rosa Borges
  * Fabíola Gomes de Araújo
  * Flávio Leonardo Cavalcanti Cordeiro
  * Francisco do Nascimento Júnior
  * Homero Sampaio Cavalcanti
  * Ivan Sérgio da Silva Júnior
  * José Edmar de Siqueira
  * José Thiago Tenório Lopes
  * Kássia Regina",DO,
844,"};
 
  @Override
  public ReactNativeHost getReactNativeHost() {
  return mReactNativeHost;
  }
 
  @Override
  public void onCreate() {
  super.onCreate();
  SoLoader.init(this, /* native exopackage */ false);
  initializeFlipper(this, getReactNativeHost().getReactInstanceManager());
  }
  
  /**
  * Loads Flipper in React Native templates. Call this in the onCreate method with something like
  * initializeFlipper(this, getReactNativeHost().getReactInstanceManager());
  *
  * @param context
  * @param reactInstanceManager
  */
  private static void initializeFlipper(
  Context context, ReactInstanceManager reactInstanceManager) {
  if",C,
845,"TO A PARTICULAR
  * STANDARD OR OPEN FORUM. RECEIVER'S SOLE AND EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
  * CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
  * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
  * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
  * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
  *
  * The following software/firmware and/or related documentation (""MediaTek Software"")
  * have",L,
846,"_layout_constraintRight_creator = 36;
  public static final int ConstraintLayout_Layout_layout_constraintRight_toLeftOf = 37;
  public static final int ConstraintLayout_Layout_layout_constraintRight_toRightOf = 38;
  public static final int ConstraintLayout_Layout_layout_constraintStart_toEndOf = 39;
  public static final int ConstraintLayout_Layout_layout_constraintStart_toStartOf = 40;
  public static final int ConstraintLayout_Layout_layout_constraintTop_creator = 41;
  public static final int ConstraintLayout_Layout_layout_constraintTop_toBottomOf = 42;
  public static",DI,
847,"dfp;
 
 import java.util.Arrays;
 
 import org.apache.commons.math3.RealFieldElement;
 import org.apache.commons.math3.exception.DimensionMismatchException;
 import org.apache.commons.math3.util.FastMath;
 
 /**
  * Decimal floating point library for Java
  *
  * <p>Another floating point class. This one is built using radix 10000
  * which is 10<sup>4</sup>, so its almost decimal.</p>
  *
  * <p>The design goals here are:
  * <ol>
  * <li>Decimal math,",DO,
848,"IdGreaterThanOrEqualTo(Integer value) {
  addCriterion(""id >="", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdLessThan(Integer value) {
  addCriterion(""id <"", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdLessThanOrEqualTo(Integer value) {
  addCriterion(""id <="", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdIn(List<Integer> values) {
  addCriterion(""id in"", values, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdNotIn(List<Integer> values) {
  addCriterion(""id not in"", values, ""id",C,
849,"1);
  PersistentAuditEvent persistentAuditEvent = persistentAuditEvents.get(0);
  assertThat(persistentAuditEvent.getData().get(""remoteAddress"")).isEqualTo(""1.2.3.4"");
  assertThat(persistentAuditEvent.getData().get(""sessionId"")).isEqualTo(""test-session-id"");
  }
 
  @Test
  public void testAddEventWithNullData() {
  Map<String, Object> data = new HashMap<>();
  data.put(""test-key"", null);
  AuditEvent event = new AuditEvent(""test-user"", ""test-type"", data);
  customAuditEventRepository.add(event);
  List<PersistentAuditEvent> persistentAuditEvents = persistenceAuditEventRepository.findAll();",T,
850,");
  }
 
  /**
  * Initializes Metrics.
  */
  private void initMetrics(ServletContext servletContext, EnumSet<DispatcherType> disps) {
  log.debug(""Initializing Metrics registries"");
  servletContext.setAttribute(InstrumentedFilter.REGISTRY_ATTRIBUTE,
  metricRegistry);
  servletContext.setAttribute(MetricsServlet.METRICS_REGISTRY,
  metricRegistry);
 
  log.debug(""Registering Metrics Filter"");
  FilterRegistration.Dynamic metricsFilter = servletContext.addFilter(""webappMetricsFilter"",
  new InstrumentedFilter());
 
  metricsFilter.addMappingForUrlPatterns(disps, true, ""/*"");
  metricsFilter.setAsyncSupported(true);
 
  log.debug(""Registering Metrics Servlet"");",C,
851,"for, acceptance of support, warranty, indemnity,
  * or other liability obligations and/or rights consistent with this
  * License. However, in accepting such obligations, You may act only
  * on Your own behalf and on Your sole responsibility, not on behalf
  * of any other Contributor, and only if You agree to indemnify,
  * defend, and hold each Contributor harmless for any liability
  * incurred by, or claims asserted against, such Contributor by reason
  * of your accepting any such warranty or additional liability.
  *
  * END OF TERMS AND CONDITIONS
  *
  * APPENDIX: How",L,
852,"TreeBuilder tb) {
  if (isWhitespace(t)) {
  tb.insert(t.asCharacter());
  } else if (t.isComment()) {
  tb.insert(t.asComment());
  } else if (t.isDoctype()) {
  tb.error(this);
  } else if (t.isStartTag()) {
  Token.StartTag startTag = t.asStartTag();
  String name = startTag.name();
  if (name.equals(""html"")) {
  return tb.process(t, InBody);
  } else if (name.equals(""body"")) {
  tb.insert(startTag);
  tb.framesetOk(false);",C,
853,"}
 
  public Criteria andTitleNotLike(String value) {
  addCriterion(""title not like"", value, ""title"");
  return (Criteria) this;
  }
 
  public Criteria andTitleIn(List<String> values) {
  addCriterion(""title in"", values, ""title"");
  return (Criteria) this;
  }
 
  public Criteria andTitleNotIn(List<String> values) {
  addCriterion(""title not in"", values, ""title"");
  return (Criteria) this;
  }
 
  public Criteria andTitleBetween(String value1, String value2) {
  addCriterion(""title between"", value1, value2, ""title"");
  return (Criteria) this;
  }
 
  public Criteria andTitleNot",C,
854,"condition, value));
  }
 
  protected void addCriterion(String condition, Object value1, Object value2, String property) {
  if (value1 == null || value2 == null) {
  throw new RuntimeException(""Between values for "" + property + "" cannot be null"");
  }
  criteria.add(new Criterion(condition, value1, value2));
  }
 
  public Criteria andIdIsNull() {
  addCriterion(""id is null"");
  return (Criteria) this;
  }
 
  public Criteria andIdIsNotNull() {
  addCriterion(""id is not null"");
  return (Criteria) this;
  }
 
  public Criteria andIdEqualTo(Long value) {
  addCriterion(""id ="", value, ""id"");",C,
855,#ERROR!,T,
856,#ERROR!,C,
857,"or close to it</li>
  * <li>Settable precision (but no mix between numbers using different settings)</li>
  * <li>Portability. Code should be kept as portable as possible.</li>
  * <li>Performance</li>
  * <li>Accuracy - Results should always be +/- 1 ULP for basic
  * algebraic operation</li>
  * <li>Comply with IEEE 854-1987 as much as possible.
  * (See IEEE 854-1987 notes below)</li>
  * </ol></p>
  *
  * <p>Trade",DO,
858,"""<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>"".
  */
  public static final int actionBarTheme=0x7f030009;
  /**
  * Reference to a theme that should be used to inflate widgets
  * and layouts destined for the action bar. Most of the time
  * this will be a reference to the current theme, but when
  * the action bar has a significantly different contrast
  * profile than the rest of the activity the difference
  * can become important. If this is set to @null the current
  * theme will be used.
  * <p>May be a reference to another resource, in the form",DO,
859,"while ( (mantissa & 0x0010000000000000L) == 0) {
  exponent--;
  mantissa <<= 1;
  }
  mantissa &= 0x000fffffffffffffL;
  }
 
  if (exponent == 1024) {
  // infinity or NAN
  if (x!= x) {
  sign = (byte) 1;
  nans = QNAN;
  } else if (x < 0) {
  sign = (byte) -1;
  nans = INFINITE;
  } else {
  sign = (byte) 1;
  nans =",C,
860,"action menu items. 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionMenuTextAppearance=0x7f010011;
  /** Color for text that appears within action menu items. 
  <p>May be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to",DO,
861,"} or {@link CL10#CL_MEM_COPY_HOST_PTR MEM_COPY_HOST_PTR} are set in flags or if {@code host_ptr} is not {@code NULL} but
  * {@link CL10#CL_MEM_COPY_HOST_PTR MEM_COPY_HOST_PTR} or {@link CL10#CL_MEM_USE_HOST_PTR MEM_USE_HOST_PTR} are not set in flags.</li>
  * <li>{@link CL10#CL_MEM_OBJECT_ALLOCATION_FAILURE MEM_OBJECT_ALLOCATION_FAILURE} if there is a failure to allocate memory for buffer object.</li>
  * <",DO,
862,"final int AnimatedStateListDrawableItem_android_id = 0;
  public static final int AnimatedStateListDrawableItem_android_drawable = 1;
  public static final int[] AnimatedStateListDrawableTransition = { 0x1010199, 0x1010449, 0x101044a, 0x101044b };
  public static final int AnimatedStateListDrawableTransition_android_drawable = 0;
  public static final int AnimatedStateListDrawableTransition_android_toId = 1;
  public static final int AnimatedStateListDrawableTransition_android_fromId = 2;
  public static final",DI,
863,"code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionBarWidgetTheme=0x7f01000d;
  /** Default action button style. 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name",DO,
864,"EXCLUSIVE REMEDY AND MEDIATEK'S ENTIRE AND
  * CUMULATIVE LIABILITY WITH RESPECT TO THE MEDIATEK SOFTWARE RELEASED HEREUNDER WILL BE,
  * AT MEDIATEK'S OPTION, TO REVISE OR REPLACE THE MEDIATEK SOFTWARE AT ISSUE,
  * OR REFUND ANY SOFTWARE LICENSE FEES OR SERVICE CHARGE PAID BY RECEIVER TO
  * MEDIATEK FOR SUCH MEDIATEK SOFTWARE AT ISSUE.
  *
  * The following software/firmware and/or related documentation (""MediaTek Software"")
  * have been modified by MediaTek Inc. All revisions are subject to any receiver's
  * applicable license agreements",L,
865,"0x7f05005f;
  public static final int notification_large_icon_width = 0x7f050060;
  public static final int notification_main_column_padding_top = 0x7f050061;
  public static final int notification_media_narrow_margin = 0x7f050062;
  public static final int notification_right_icon_size = 0x7f050063;
  public static final int notification_right_side_padding_top = 0x7f050064;
  public static final int notification_small_icon",DI,
866,"case that fixing the last digit is sufficient
  for (int i = 0; i < mant.length - 1; i++) {
  if (mant[i]!= 0) {
  mant[i]++;
  break;
  }
  }
  }
  }
 
  /** Create an instance from a double value.
  * @param field field to which this instance belongs
  * @param x value to convert to an instance
  */
  protected Dfp(final DfpField field, double x) {
 
  // initialize as if 0
  mant = new int[field.getRadixDigits()];
  sign = 1;
  exp = 0;
  nans = FINITE;",C,
867,"factory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
  _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }
 
  public void _jspDestroy() {
  }
 
  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
  throws java.io.IOException, javax.servlet.ServletException {
 
  final javax.servlet.jsp.PageContext pageContext;
  javax.servlet.http.HttpSession session = null;
  final javax.servlet.ServletContext application;
  final javax.servlet.ServletConfig config;
  javax.servlet.jsp",C,
868,"f050065;
  public static final int notification_right_icon_size = 0x7f050066;
  public static final int notification_right_side_padding_top = 0x7f050067;
  public static final int notification_small_icon_background_padding = 0x7f050068;
  public static final int notification_small_icon_size_as_large = 0x7f050069;
  public static final int notification_subtext_size = 0x7f05006a;
  public static final int notification_top_pad",DI,
869,"f010044;
  /** Drawable to use for the Paste action button in Contextual Action Bar 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionModePasteDrawable=0x7f010041;
  /** PopupWindow style to use for action modes when showing as a window overlay. 
  <p>Must be a reference to another resource, in the",DO,
870,"* ""<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>"" or a theme
  * attribute in the form
  * ""<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>"".
  */
  public static final int actionModeCloseDrawable=0x7f030012;
  /**
  * Drawable to use for the Copy action button in Contextual Action Bar
  * <p>May be a reference to another resource, in the form
  * ""<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>"" or a theme
  * attribute in the form
  *",DO,
871,"ModeSelectAllDrawable = 0x7f040018;
  public static final int actionModeShareDrawable = 0x7f040019;
  public static final int actionModeSplitBackground = 0x7f04001a;
  public static final int actionModeStyle = 0x7f04001b;
  public static final int actionModeWebSearchDrawable = 0x7f04001c;
  public static final int actionOverflowButtonStyle = 0x7f04001d;
  public static final int actionOverflowMenuStyle = 0x7f04001e;
  public",DI,
872,"striped[0] = '0';
  striped[1] = '0';
  striped[2] = '0';
  striped[3] = '0';
  int significantDigits=0;
  for(;;) {
  if (p == (fpdecimal.length())) {
  break;
  }
 
  // Don't want to run pass the end of the array
  if (q == mant.length*rsize+offset+1) {
  break;
  }
 
  if (fpdecimal.charAt(p) == '.') {
  decimalFound = true;
  decimalPos = significantDigits;
  p++;
  continue;
  }
 
  if (fpdecimal.charAt(p) <",C,
873,"github.io/DROP/junit/index.html
  * - Jacoco => https://lakshmidrip.github.io/DROP/jacoco/index.html
  * 
  * Licensed under the Apache License, Version 2.0 (the ""License"");
  *  you may not use this file except in compliance with the License.
  * 
  * You may obtain a copy of the License at
  *  http://www.apache.org/licenses/LICENSE-2.0
  * 
  * Unless required by applicable law or agreed to in writing, software
  *  distributed under the License is distributed on an ""AS IS"" BASIS,
  *",L,
874,"reflect the new value, per the Android Design
  // guidelines.
  bindPreferenceSummaryToValue(findPreference(""example_text""));
  bindPreferenceSummaryToValue(findPreference(""example_list""));
  }
 
  @Override
  public boolean onOptionsItemSelected(MenuItem item) {
  int id = item.getItemId();
  if (id == android.R.id.home) {
  startActivity(new Intent(getActivity(), SettingsActivity.class));
  return true;
  }
  return super.onOptionsItemSelected(item);
  }
  }
 
  /**
  * This fragment shows notification preferences only. It is used when the
  * activity is showing a two-pane settings UI.
  */
  @TargetApi(Build.",C,
875,");
  r.advance();
  t.emit(replacementChar);
  break;
  default:
  String data = r.consumeToAny('-', '<', nullChar);
  t.emit(data);
  }
  }
  },
  ScriptDataEscapedDash {
  void read(Tokeniser t, CharacterReader r) {
  if (r.isEmpty()) {
  t.eofError(this);
  t.transition(Data);
  return;
  }
 
  char c = r.consume();
  switch (c) {
  case '-':
  t.emit(c);
  t.transition(ScriptDataEscapedDashDash);
  break;
  case '<':
  t.transition(ScriptDataEscapedLes",C,
876,"int notification_big_circle_margin = 0x7f0600c2;
  public static final int notification_content_margin_start = 0x7f0600c3;
  public static final int notification_large_icon_height = 0x7f0600c4;
  public static final int notification_large_icon_width = 0x7f0600c5;
  public static final int notification_main_column_padding_top = 0x7f0600c6;
  public static final int notification_media_narrow_margin = 0x7f0600c7;
  public",DI,
877,"have to be aware that IMS
  * technology may be subject of patents and licence terms, as being
  * specified within the various IMS-related IETF, ITU-T, ETSI, and 3GPP
  * standards. Thus all Open IMS Core users have to take notice of this
  * fact and have to agree to check out carefully before installing,
  * using and extending the Open Source IMS Core System, if related
  * patents and licenses may become applicable to the intended usage
  * context. 
  *
  * You should have received a copy of the GNU General Public License
  * along with this program; if not, write to the Free Software
  * Foundation, Inc.,",L,
878,"intentionally
  * submitted to Licensor for inclusion in the Work by the copyright owner
  * or by an individual or Legal Entity authorized to submit on behalf of
  * the copyright owner. For the purposes of this definition, ""submitted""
  * means any form of electronic, verbal, or written communication sent
  * to the Licensor or its representatives, including but not limited to
  * communication on electronic mailing lists, source code control systems,
  * and issue tracking systems that are managed by, or on behalf of, the
  * Licensor for the purpose of discussing and improving the Work, but
  * excluding communication that is conspicuously marked or otherwise
  *",L,
879,"definition,
  * ""control"" means (i) the power, direct or indirect, to cause the
  * direction or management of such entity, whether by contract or
  * otherwise, or (ii) ownership of fifty percent (50%) or more of the
  * outstanding shares, or (iii) beneficial ownership of such entity.
  *
  * ""You"" (or ""Your"") shall mean an individual or Legal Entity
  * exercising permissions granted by this License.
  *
  * ""Source"" form shall mean the preferred form for making modifications,
  * including but not limited to software source code, documentation
  * source, and configuration files.
  *",L,
880,"If the Work includes a ""NOTICE"" text file as part of its
  * distribution, then any Derivative Works that You distribute must
  * include a readable copy of the attribution notices contained
  * within such NOTICE file, excluding those notices that do not
  * pertain to any part of the Derivative Works, in at least one
  * of the following places: within a NOTICE text file distributed
  * as part of the Derivative Works; within the Source form or
  * documentation, if provided along with the Derivative Works; or,
  * within a display generated by the Derivative Works, if and
  * wherever such third-party notices normally",L,
881,"if (readerInputStream!= null)
  {
  readerInputStream.close();
  }
  }
  catch (IOException exceptIO)
  {
  IO.logger.log(Level.WARNING, ""Error closing InputStreamReader"", exceptIO);
  }
 
  /* Close socket objects */
  try
  {
  if (socket!= null)
  {
  socket.close();
  }
  }
  catch (IOException exceptIO)
  {
  IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO);
  }
 
  try
  {
  if (listener!= null)
  {
  listener.close();
  }
  }
  catch (IOException exceptIO)
  {
  IO.logger.log(Level.WARNING,",C,
882,"nullChar:
  t.error(this);
  r.advance();
  t.emit(replacementChar);
  break;
  default:
  String data = r.consumeToAny('-', '<', nullChar);
  t.emit(data);
  }
  }
  },
  ScriptDataEscapedDash {
  void read(Tokeniser t, CharacterReader r) {
  if (r.isEmpty()) {
  t.eofError(this);
  t.transition(Data);
  return;
  }
 
  char c = r.consume();
  switch (c) {
  case '-':
  t.emit(c);
  t.transition(ScriptDataEscapedDashDash);
  break;
  case '<':",C,
883,"_column_padding_top = 0x7f0600cb;
  public static final int notification_media_narrow_margin = 0x7f0600cc;
  public static final int notification_right_icon_size = 0x7f0600cd;
  public static final int notification_right_side_padding_top = 0x7f0600ce;
  public static final int notification_small_icon_background_padding = 0x7f0600cf;
  public static final int notification_small_icon_size_as_large = 0x7f0600d0;
  public static",DI,
884,"attribute (in the form
 ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"")
 containing a value of this type.
  */
  public static final int actionProviderClass=0x7f010050;
  /** The name of an optional View class to instantiate and use as an
  action view. See {@link android.view.MenuItem#setActionView(android.view.View)}
  for more info. 
  <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
 <p>This may also be a reference to a resource (in the form",DO,
885,"code>"",
 ""<code>#<i>rrggbb</i></code>"", or ""<code>#<i>aarrggbb</i></code>"".
  */
  public static final int actionMenuTextColor=0x7f010012;
  /** Background drawable to use for action mode UI 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionModeBackground=0x7f0",DO,
886,"substring(p+1);
  boolean negative = false;
 
  for (int i=0; i<fpexp.length(); i++)
  {
  if (fpexp.charAt(i) == '-')
  {
  negative = true;
  continue;
  }
  if (fpexp.charAt(i) >= '0' && fpexp.charAt(i) <= '9') {
  sciexp = sciexp * 10 + fpexp.charAt(i) - '0';
  }
  }
 
  if (negative) {
  sciexp = -sciexp;
  }
  } else {
  // normal case
  fpdecimal = s;
  }
 
  // If there is a minus sign in the",C,
887,"ScriptData);
  }
  },
  ScriptDataEscapeStart {
  void read(Tokeniser t, CharacterReader r) {
  if (r.matches('-')) {
  t.emit('-');
  t.advanceTransition(ScriptDataEscapeStartDash);
  } else {
  t.transition(ScriptData);
  }
  }
  },
  ScriptDataEscapeStartDash {
  void read(Tokeniser t, CharacterReader r) {
  if (r.matches('-')) {
  t.emit('-');
  t.advanceTransition(ScriptDataEscapedDashDash);
  } else {
  t.transition(ScriptData);
  }
  }
  },
  ScriptDataEscaped {
  void read(Tokeniser t",C,
888,"invisible by a subclass.</p>
  * @see DfpField
  * @version $Id$
  * @since 2.2
  */
 public class Dfp implements RealFieldElement<Dfp> {
 
  /** The radix, or base of this system. Set to 10000 */
  public static final int RADIX = 10000;
 
  /** The minimum exponent before underflow is signaled. Flush to zero
  * occurs at minExp-DIGITS */
  public static final int MIN_EXP = -32767;
 
  /** The maximum exponent before overflow is signaled and results flushed
  * to infinity */
  public static final int MAX",DO,
889,"""html"", ""br""))) {
  tb.process(new Token.StartTag(""head""));
  return tb.process(t);
  } else if (t.isEndTag()) {
  tb.error(this);
  return false;
  } else {
  tb.process(new Token.StartTag(""head""));
  return tb.process(t);
  }
  return true;
  }
  },
  InHead {
  boolean process(Token t, HtmlTreeBuilder tb) {
  if (isWhitespace(t)) {
  tb.insert(t.asCharacter());
  return true;
  }
  switch (t.type) {
  case Comment:
  tb.insert(t.asComment());",C,
890,"*
  * <p>The design goals here are:
  * <ol>
  * <li>Decimal math, or close to it</li>
  * <li>Settable precision (but no mix between numbers using different settings)</li>
  * <li>Portability. Code should be kept as portable as possible.</li>
  * <li>Performance</li>
  * <li>Accuracy - Results should always be +/- 1 ULP for basic
  * algebraic operation</li>
  * <li>Comply with IEEE 854-1987 as much as possible.
  * (See IEEE 85",DO,
891,"Araújo
 * Bruno Leonardo Rodrigues Barros
 * Carlos Elmano Rodrigues Ferreira
 * Cláudio de Andrade Lira
 * Denys Guimarães Guenes Tavares
 * Eduardo Breckenfeld da Rosa Borges
 * Fabíola Gomes de Araújo
 * Flávio Leonardo Cavalcanti Cordeiro
 * Francisco do Nascimento Júnior
 * Homero Sampaio Cavalcanti
 * Ivan Sérgio da Silva Júnior
 * J",DO,
892,"_checked_box_inner_merged_animation = 0x7f01000c;
  public static final int btn_checkbox_to_checked_box_outer_merged_animation = 0x7f01000d;
  public static final int btn_checkbox_to_checked_icon_null_animation = 0x7f01000e;
  public static final int btn_checkbox_to_unchecked_box_inner_merged_animation = 0x7f01000f;
  public static final int btn_checkbox_to_unchecked_check_path_merged_animation = 0x7f0100",DI,
893,"promote products derived from this software without specific prior written permission.
  *
  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS"" AND ANY
  * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
  * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT
  * SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,PROCUREMENT
  * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
  * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,STRICT LIABILITY,OR TORT
  * (INCLUDING NEGLIGENCE OR OTHERWISE",L,
894,"used.
  * <p>May be a reference to another resource, in the form
  * ""<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>"" or a theme
  * attribute in the form
  * ""<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>"".
  */
  public static final int actionBarWidgetTheme=0x7f03000a;
  /**
  * Default action button style.
  * <p>May be a reference to another resource, in the form
  * ""<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>""",DO,
895,"18"", TEXTO, true, 1, """",R.drawable.img_5));
  arrayList.add(new ObjetoListView(""Juan"", """", ""AYER"", IMAGEN, true, 1, ""Foto"",R.drawable.img_3));
  arrayList.add(new ObjetoListView(""Amaya"", """", ""JUEVES"", VIDEO, true, 1, ""Video"",R.drawable.img_4));
  arrayList.add(new ObjetoListView(""Diana"", ""Nos vemos viernes ""+ getEmoji(0x1F60A), ""2/8/18"", TEXTO, true, 1",C,
896,"prefix = org.apache.axis2.databinding.utils.BeanUtil.getUniquePrefix();
  }
 
  xmlWriter.writeNamespace(prefix, namespace);
  xmlWriter.setPrefix(prefix, namespace);
  }
 
  return prefix;
  }
 
 
  
  /**
  * databinding method to get an XML representation of this object
  *
  */
  public javax.xml.stream.XMLStreamReader getPullParser(javax.xml.namespace.QName qName)
  throws org.apache.axis2.databinding.ADBException{
 
 
  
  java.util.ArrayList elementList = new java.util.ArrayList();
  java.util.ArrayList attribList = new java.util.ArrayList();
 
  
  element",C,
897,".equals(""body"")) {
  tb.error(this);
  LinkedList<Element> stack = tb.getStack();
  if (stack.size() == 1 || (stack.size() > 2 &&!stack.get(1).nodeName().equals(""body""))) {
  // only in fragment case
  return false; // ignore
  } else {
  tb.framesetOk(false);
  Element body = stack.get(1);
  for (Attribute attribute : startTag.getAttributes()) {
  if (!body.hasAttr(attribute.getKey()))
  body.attributes().put(attribute);
  }
  }
  } else if (name.equals(""frameset"")) {
  tb.error(this",C,
898,"shall the
  Institute for Systems Biology and the Whitehead Institute
  be liable to any party for direct, indirect, special,
  incidental or consequential damages, including lost profits, arising
  out of the use of this software and its documentation, even if the
  Institute for Systems Biology and the Whitehead Institute
  have been advised of the possibility of such damage. See
  the GNU Lesser General Public License for more details.
 
  You should have received a copy of the GNU Lesser General Public License
  along with this library; if not, write to the Free Software Foundation,
  Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1",L,
899,"stringToWrite.toString());
  }
 
  }
 
 
  /**
  * Register a namespace prefix
  */
  private java.lang.String registerPrefix(javax.xml.stream.XMLStreamWriter xmlWriter, java.lang.String namespace) throws javax.xml.stream.XMLStreamException {
  java.lang.String prefix = xmlWriter.getPrefix(namespace);
  if (prefix == null) {
  prefix = generatePrefix(namespace);
  javax.xml.namespace.NamespaceContext nsContext = xmlWriter.getNamespaceContext();
  while (true) {
  java.lang.String uri = nsContext.getNamespaceURI(prefix);
  if (uri == null || uri.length() == 0) {",C,
900,"in the form
  * ""<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>"".
  */
  public static final int actionBarTabTextStyle=0x7f030008;
  /**
  * Reference to a theme that should be used to inflate the
  * action bar. This will be inherited by any widget inflated
  * into the action bar.
  * <p>May be a reference to another resource, in the form
  * ""<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>"" or a theme
  * attribute in the form
  * ""<code>?[<i>package</i>:]<i",DO,
901,"f020082;
  public static final int fontVariationSettings = 0x7f020083;
  public static final int fontWeight = 0x7f020084;
  public static final int keylines = 0x7f020094;
  public static final int layout_anchor = 0x7f020097;
  public static final int layout_anchorGravity = 0x7f020098;
  public static final int layout_behavior = 0x7f020099;
  public static final int layout_dodgeInsetEdges = 0x7f0",DI,
902,") this;
  }
 
  public Criteria andUpdatedIsNotNull() {
  addCriterion(""updated is not null"");
  return (Criteria) this;
  }
 
  public Criteria andUpdatedEqualTo(Date value) {
  addCriterion(""updated ="", value, ""updated"");
  return (Criteria) this;
  }
 
  public Criteria andUpdatedNotEqualTo(Date value) {
  addCriterion(""updated <>"", value, ""updated"");
  return (Criteria) this;
  }
 
  public Criteria andUpdatedGreaterThan(Date value) {
  addCriterion(""updated >"", value, ""updated"");
  return (Criteria) this;
  }
 
  public Criteria andUpdatedGreaterThanOrEqualTo(Date value) {
  addCriterion(""updated >="", value, ""updated"");
  return (",C,
903,"occurs at minExp-DIGITS */
  public static final int MIN_EXP = -32767;
 
  /** The maximum exponent before overflow is signaled and results flushed
  * to infinity */
  public static final int MAX_EXP = 32768;
 
  /** The amount under/overflows are scaled by before going to trap handler */
  public static final int ERR_SCALE = 32760;
 
  /** Indicator value for normal finite numbers. */
  public static final byte FINITE = 0;
 
  /** Indicator value for Infinity. */
  public static final byte INFINITE = 1;
 
  /** Indicator value for signaling NaN. */
  public static final byte",DI,
904,"</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionBarWidgetTheme=0x7f01000d;
  /** Default action button style. 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final",DO,
905,"the default namespace
  xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
  }
 
  } else {
  xmlWriter.writeCharacters(org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
  }
  }
 
  private void writeQNames(javax.xml.namespace.QName[] qnames,
  javax.xml.stream.XMLStreamWriter xmlWriter) throws javax.xml.stream.XMLStreamException {
 
  if (qnames!= null) {
  // we have to store this data until last moment since it is not possible to write any
  // namespace data after writing the charactor data
  java.",C,
906,"java.lang.String namespaceURI = null;
  java.lang.String prefix = null;
 
  for (int i = 0; i < qnames.length; i++) {
  if (i > 0) {
  stringToWrite.append("" "");
  }
  namespaceURI = qnames[i].getNamespaceURI();
  if (namespaceURI!= null) {
  prefix = xmlWriter.getPrefix(namespaceURI);
  if ((prefix == null) || (prefix.length() == 0)) {
  prefix = generatePrefix(namespaceURI);
  xmlWriter.writeNamespace(prefix, namespaceURI);
  xmlWriter.setPrefix(prefix,namespaceURI);
  }
 
  if (prefix",C,
907,"* - Issues Catalog => https://github.com/lakshmiDRIP/DROP/issues
  * 
  * Licensed under the Apache License, Version 2.0 (the ""License"");
  *  you may not use this file except in compliance with the License.
  * 
  * You may obtain a copy of the License at
  *  http://www.apache.org/licenses/LICENSE-2.0
  * 
  * Unless required by applicable law or agreed to in writing, software
  *  distributed under the License is distributed on an ""AS IS"" BASIS,
  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  *",L,
908,"String docId = DocumentsContract.getDocumentId(imageUri);
  String[] split = docId.split("":"");
  String type = split[0];
  Uri contentUri = null;
  if (""image"".equals(type)) {
  contentUri = MediaStore.Images.Media.EXTERNAL_CONTENT_URI;
  } else if (""video"".equals(type)) {
  contentUri = MediaStore.Video.Media.EXTERNAL_CONTENT_URI;
  } else if (""audio"".equals(type)) {
  contentUri = MediaStore.Audio.Media.EXTERNAL_CONTENT_URI;
  }
  String selection = MediaStore.Images.Media._ID + ""=?"";
  String[] selectionArgs = new",C,
909,"public static final int actionModePasteDrawable=0x7f010041;
  /** PopupWindow style to use for action modes when showing as a window overlay. 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionModePopupWindowStyle=0x7f010046;
  /** Drawable to use for the Select all action button in Contextual Action Bar",DO,
910,"layout_constraintEnd_toEndOf = 21;
  public static final int ConstraintLayout_Layout_layout_constraintEnd_toStartOf = 22;
  public static final int ConstraintLayout_Layout_layout_constraintGuide_begin = 23;
  public static final int ConstraintLayout_Layout_layout_constraintGuide_end = 24;
  public static final int ConstraintLayout_Layout_layout_constraintGuide_percent = 25;
  public static final int ConstraintLayout_Layout_layout_constraintHeight_default = 26;
  public static final int ConstraintLayout_Layout_layout_constraintHeight_max = 27;
  public static final int ConstraintLayout_Layout_",DI,
911,"execute them
 
  tb.tokeniser.transition(TokeniserState.ScriptData);
  tb.markInsertionMode();
  tb.transition(Text);
  tb.insert(start);
  } else if (name.equals(""head"")) {
  tb.error(this);
  return false;
  } else {
  return anythingElse(t, tb);
  }
  break;
  case EndTag:
  Token.EndTag end = t.asEndTag();
  name = end.name();
  if (name.equals(""head"")) {
  tb.pop();
  tb.transition(AfterHead);
  } else if (StringUtil.in(name, ""body"", ""html"", ""br"")) {
  return",C,
912,"(t.asComment());
  break;
  case Doctype:
  tb.error(this);
  return false;
  case StartTag:
  Token.StartTag start = t.asStartTag();
  String name = start.name();
  if (name.equals(""html"")) {
  return InBody.process(t, tb);
  } else if (StringUtil.in(name, ""base"", ""basefont"", ""bgsound"", ""command"", ""link"")) {
  Element el = tb.insertEmpty(start);
  // jsoup special: update base the frist time it is seen
  if (name.equals(""base"") && el.hasAttr(""href""))
  tb.maybeSetBase",C,
913,"(getServletConfig());
  }
  }
  }
  return _jsp_instancemanager;
  }
 
  public void _jspInit() {
  }
 
  public void _jspDestroy() {
  }
 
  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
  throws java.io.IOException, javax.servlet.ServletException {
 
  final javax.servlet.jsp.PageContext pageContext;
  javax.servlet.http.HttpSession session = null;
  final javax.servlet.ServletContext application;
  final javax.servlet.ServletConfig config;
  javax.servlet.jsp.JspWriter out = null;
  final java.lang.Object page =",C,
914,"was submitted. If You
  * institute patent litigation against any entity (including a
  * cross-claim or counterclaim in a lawsuit) alleging that the Work
  * or a Contribution incorporated within the Work constitutes direct
  * or contributory patent infringement, then any patent licenses
  * granted to You under this License for that Work shall terminate
  * as of the date such litigation is filed.
  *
  * 4. Redistribution. You may reproduce and distribute copies of the
  * Work or Derivative Works thereof in any medium, with or without
  * modifications, and in Source or Object form, provided that",L,
915,"getDelegate().onCreate(savedInstanceState);
  super.onCreate(savedInstanceState);
  }
 
  @Override
  protected void onPostCreate(Bundle savedInstanceState) {
  super.onPostCreate(savedInstanceState);
  getDelegate().onPostCreate(savedInstanceState);
  }
 
  public ActionBar getSupportActionBar() {
  return getDelegate().getSupportActionBar();
  }
 
  public void setSupportActionBar(@Nullable Toolbar toolbar) {
  getDelegate().setSupportActionBar(toolbar);
  }
 
  @Override
  public MenuInflater getMenuInflater() {
  return getDelegate().getMenuInflater();
  }
 
  @Override
  public void setContentView(@LayoutRes int layoutResID) {
  getDelegate().setContentView(layoutResID);
  }
 
  @Override",C,
916,"dot_group_animation = 0x7f010012;
  public static final int btn_radio_to_off_mtrl_ring_outer_animation = 0x7f010013;
  public static final int btn_radio_to_off_mtrl_ring_outer_path_animation = 0x7f010014;
  public static final int btn_radio_to_on_mtrl_dot_group_animation = 0x7f010015;
  public static final int btn_radio_to_on_mtrl_ring_outer_animation = 0x7f0",DI,
917,"true;
  }
  if (shouldShowRequestPermissionRationale(READ_CONTACTS)) {
  Snackbar.make(mEmailView, R.string.permission_rationale, Snackbar.LENGTH_INDEFINITE)
  .setAction(android.R.string.ok, new View.OnClickListener() {
  @Override
  @TargetApi(Build.VERSION_CODES.M)
  public void onClick(View v) {
  requestPermissions(new String[]{READ_CONTACTS}, REQUEST_READ_CONTACTS);
  }
  });
  } else {
  requestPermissions(new String[]{READ_CONTACTS}, REQUEST_READ_CONTACTS);
  }
  return false;
  }
 
  /**
  * Callback",C,
918,", r, RawtextEndTagName, Rawtext);
  }
  },
  RawtextEndTagName {
  void read(Tokeniser t, CharacterReader r) {
  handleDataEndTag(t, r, Rawtext);
  }
  },
  ScriptDataLessthanSign {
  void read(Tokeniser t, CharacterReader r) {
  switch (r.consume()) {
  case '/':
  t.createTempBuffer();
  t.transition(ScriptDataEndTagOpen);
  break;
  case '!':
  t.emit(""<!"");
  t.transition(ScriptDataEscapeStart);
  break;
  default:
  t.emit(""<"");
  r.unconsume();
  t.transition(Script",C,
919,"Criteria) this;
  }
 
  public Criteria andPasswordLessThan(String value) {
  addCriterion(""password <"", value, ""password"");
  return (Criteria) this;
  }
 
  public Criteria andPasswordLessThanOrEqualTo(String value) {
  addCriterion(""password <="", value, ""password"");
  return (Criteria) this;
  }
 
  public Criteria andPasswordLike(String value) {
  addCriterion(""password like"", value, ""password"");
  return (Criteria) this;
  }
 
  public Criteria andPasswordNotLike(String value) {
  addCriterion(""password not like"", value, ""password"");
  return (Criteria) this;
  }
 
  public Criteria andPasswordIn(List<String> values) {
  addCriterion(""",C,
920,"socket objects */
  try
  {
  if (socket!= null)
  {
  socket.close();
  }
  }
  catch (IOException exceptIO)
  {
  IO.logger.log(Level.WARNING, ""Error closing Socket"", exceptIO);
  }
 
  try
  {
  if (listener!= null)
  {
  listener.close();
  }
  }
  catch (IOException exceptIO)
  {
  IO.logger.log(Level.WARNING, ""Error closing ServerSocket"", exceptIO);
  }
  }
  }
  }
  else
  {
  /* INCIDENTAL: CWE 561 Dead Code, the code below will never run
  * but ensure data is inititialized before the Sink to avoid",C,
921,"package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionMenuTextAppearance=0x7f010011;
  /** Color for text that appears within action menu items. 
  <p>May be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
 <p>May be a color value, in the form of ""<code>#<i>rgb</i></code>"", ""<code",DO,
922,"OR
  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
  * SOFTWARE.
  */
 
 /**************************************************************************************
  * <auto-generated>
  * This code was generated from a template using JCOReflector
  * 
  * Manual changes to this file may cause unexpected behavior in your application.
  * Manual changes to this file will be overwritten if",L,
923,"static final int notification_action_icon_size = 0x7f06012e;
  public static final int notification_action_text_size = 0x7f06012f;
  public static final int notification_big_circle_margin = 0x7f060130;
  public static final int notification_content_margin_start = 0x7f060131;
  public static final int notification_large_icon_height = 0x7f060132;
  public static final int notification_large_icon_width = 0x7f060133;
  public",DI,
924,"Tag().name().equals(""br"")) {
  return anythingElse(t, tb);
  } else if ((t.isStartTag() && StringUtil.in(t.asStartTag().name(), ""head"", ""noscript"")) || t.isEndTag()) {
  tb.error(this);
  return false;
  } else {
  return anythingElse(t, tb);
  }
  return true;
  }
 
  private boolean anythingElse(Token t, HtmlTreeBuilder tb) {
  tb.error(this);
  tb.process(new Token.EndTag(""noscript""));
  return tb.process(t);
  }
  },
  AfterHead {
  boolean process(Token t, HtmlTreeBuilder",C,
925,"Performance</li>
  * <li>Accuracy - Results should always be +/- 1 ULP for basic
  * algebraic operation</li>
  * <li>Comply with IEEE 854-1987 as much as possible.
  * (See IEEE 854-1987 notes below)</li>
  * </ol></p>
  *
  * <p>Trade offs:
  * <ol>
  * <li>Memory foot print. I'm using more memory than necessary to
  * represent numbers to get better performance.</li>
  * <li>Digits are bigger, so rounding is a greater",DO,
926,"* to infinity */
  public static final int MAX_EXP = 32768;
 
  /** The amount under/overflows are scaled by before going to trap handler */
  public static final int ERR_SCALE = 32760;
 
  /** Indicator value for normal finite numbers. */
  public static final byte FINITE = 0;
 
  /** Indicator value for Infinity. */
  public static final byte INFINITE = 1;
 
  /** Indicator value for signaling NaN. */
  public static final byte SNAN = 2;
 
  /** Indicator value for quiet NaN. */
  public static final byte QNAN = 3;
 
  /** String for NaN representation. */
  private static final String N",DI,
927,"public Criteria andIdGreaterThan(Integer value) {
  addCriterion(""id >"", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdGreaterThanOrEqualTo(Integer value) {
  addCriterion(""id >="", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdLessThan(Integer value) {
  addCriterion(""id <"", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdLessThanOrEqualTo(Integer value) {
  addCriterion(""id <="", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdIn(List<Integer> values) {
  addCriterion(""id in"", values, ""id"");",C,
928,"Layout_constraint_referenced_ids = 9;
  public static final int ConstraintLayout_Layout_layout_constrainedHeight = 10;
  public static final int ConstraintLayout_Layout_layout_constrainedWidth = 11;
  public static final int ConstraintLayout_Layout_layout_constraintBaseline_creator = 12;
  public static final int ConstraintLayout_Layout_layout_constraintBaseline_toBaselineOf = 13;
  public static final int ConstraintLayout_Layout_layout_constraintBottom_creator = 14;
  public static final int ConstraintLayout_Layout_layout_constraintBottom_toBottomOf = 15;
  public static final int ConstraintLayout_Layout_layout_constraint",DI,
929,".org/copyright.html.
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of the Unicode data files and any associated documentation (the ""Data
  * Files"") or Unicode software and any associated documentation (the
  * ""Software"") to deal in the Data Files or Software without restriction,
  * including without limitation the rights to use, copy, modify, merge,
  * publish, distribute, and/or sell copies of the Data Files or Software, and
  * to permit persons to whom the Data Files or Software are furnished to do so,
  * provided that (a) the above copyright notice(s) and this permission notice
  * appear with all copies of the Data",L,
930,"public boolean onOptionsItemSelected(MenuItem item) {
  int id = item.getItemId();
  if (id == android.R.id.home) {
  startActivity(new Intent(getActivity(), SettingsActivity.class));
  return true;
  }
  return super.onOptionsItemSelected(item);
  }
  }
 
  /**
  * This fragment shows notification preferences only. It is used when the
  * activity is showing a two-pane settings UI.
  */
  @TargetApi(Build.VERSION_CODES.HONEYCOMB)
  public static class NotificationPreferenceFragment extends PreferenceFragment {
  @Override
  public void onCreate(Bundle savedInstanceState) {
  super.onCreate(savedInstanceState);
  addPreferencesFromResource(R.",C,
931,"modifications, or
  * for any such Derivative Works as a whole, provided Your use,
  * reproduction, and distribution of the Work otherwise complies with
  * the conditions stated in this License.
  *
  * 5. Submission of Contributions. Unless You explicitly state otherwise,
  * any Contribution intentionally submitted for inclusion in the Work
  * by You to the Licensor shall be under the terms and conditions of
  * this License, without any additional terms or conditions.
  * Notwithstanding the above, nothing herein shall supersede or modify
  * the terms of any separate license agreement you may have executed
  * with Licensor regarding such Contributions.",L,
932,"intentionally submitted for inclusion in the Work
  * by You to the Licensor shall be under the terms and conditions of
  * this License, without any additional terms or conditions.
  * Notwithstanding the above, nothing herein shall supersede or modify
  * the terms of any separate license agreement you may have executed
  * with Licensor regarding such Contributions.
  *
  * 6. Trademarks. This License does not grant permission to use the trade
  * names, trademarks, service marks, or product names of the Licensor,
  * except as required for reasonable and customary use in describing the
  * origin of the Work and reproducing the content of the NOTICE file",L,
933,"public static final int actionViewClass = 0x7f030020;
  public static final int activityChooserViewStyle = 0x7f030021;
  public static final int alertDialogButtonGroupStyle = 0x7f030022;
  public static final int alertDialogCenterButtons = 0x7f030023;
  public static final int alertDialogStyle = 0x7f030024;
  public static final int alertDialogTheme = 0x7f030025;
  public static final int allowStacking = 0x7f030026",DI,
934,".lang.String _jspx_method = request.getMethod();
  if (!""GET"".equals(_jspx_method) &&!""POST"".equals(_jspx_method) &&!""HEAD"".equals(_jspx_method) &&!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
  response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, ""JSPs only permit GET POST or HEAD"");
  return;
  }
 
  final javax.servlet.jsp.PageContext pageContext;
  javax.servlet.http.HttpSession session = null;
  final javax.servlet.ServletContext application;
  final javax.servlet.ServletConfig config;
  javax.servlet.jsp.",C,
935,"@Transactional
  public void assertThatUserCanNotBeFoundByEmailIgnoreCase() {
  domainUserDetailsService.loadUserByUsername(USER_TWO_EMAIL.toUpperCase(Locale.ENGLISH));
  }
 
  @Test
  @Transactional
  public void assertThatEmailIsPrioritizedOverLogin() {
  UserDetails userDetails = domainUserDetailsService.loadUserByUsername(USER_ONE_EMAIL);
  assertThat(userDetails).isNotNull();
  assertThat(userDetails.getUsername()).isEqualTo(USER_ONE_LOGIN);
  }
 
  @Test(expected = UserNotActivatedException.class)
  @Transactional
  public void assertThatUserNotActivatedExceptionIsThrownForNotActivatedUsers() {
  domainUserDetailsService.loadUserByUsername",T,
936,"SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
  | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION);
  }
  };
  private View mControlsView;
  private final Runnable mShowPart2Runnable = new Runnable() {
  @Override
  public void run() {
  // Delayed display of UI elements
  ActionBar actionBar = getSupportActionBar();
  if (actionBar!= null) {
  actionBar.show();
  }
  mControlsView.setVisibility(View.VISIBLE);
  }
  };
  private boolean mVisible;
  private final Runnable mHideRunnable = new Runnable() {
  @Override
  public void run() {
  hide();
  }
  };
  /**",C,
937,"[i].length) {
  maxSize = expectedTokenSequences[i].length;
  }
  for (int j = 0; j < expectedTokenSequences[i].length; j++) {
  expected.append(tokenImage[expectedTokenSequences[i][j]]).append(' ');
  }
  if (expectedTokenSequences[i][expectedTokenSequences[i].length - 1]!= 0) {
  expected.append(""..."");
  }
  expected.append(eol).append("" "");
  }
  String retval = ""Encountered \"""";
  Token tok = currentToken.next;
  for (int i = 0; i < maxSize; i++) {
  if (i!= 0",C,
938,"ex) {
  java.util.logging.Logger.getLogger(login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
  } catch (InstantiationException ex) {
  java.util.logging.Logger.getLogger(login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
  } catch (IllegalAccessException ex) {
  java.util.logging.Logger.getLogger(login.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
  } catch (javax.swing.UnsupportedLookAndFeelException ex) {
  java.util.logging.Logger.getLogger(login.class",C,
939,"(isTokenValid).isEqualTo(false);
  }
 
  @Test
  public void testReturnFalseWhenJWTisUnsupported() {
  String unsupportedToken = createUnsupportedToken();
 
  boolean isTokenValid = tokenProvider.validateToken(unsupportedToken);
 
  assertThat(isTokenValid).isEqualTo(false);
  }
 
  @Test
  public void testReturnFalseWhenJWTisInvalid() {
  boolean isTokenValid = tokenProvider.validateToken("""");
 
  assertThat(isTokenValid).isEqualTo(false);
  }
 
  private Authentication createAuthentication() {
  Collection<GrantedAuthority> authorities = new ArrayList<>();
  authorities.add(new SimpleGrantedAuthority(AuthoritiesConstants.ANONYMOUS));
  return new UsernamePasswordAuthenticationToken(""",T,
940,"TabTextStyle = 0x7f030008;
  public static final int actionBarTheme = 0x7f030009;
  public static final int actionBarWidgetTheme = 0x7f03000a;
  public static final int actionButtonStyle = 0x7f03000b;
  public static final int actionDropDownStyle = 0x7f03000c;
  public static final int actionLayout = 0x7f03000d;
  public static final int actionMenuTextAppearance = 0x7f03000e;
  public static final int actionMenuTextColor =",DI,
941,"- i.e., as
  * documented in the class ""Throwable"". The fields ""errorToken"",
  * ""expectedTokenSequences"", and ""tokenImage"" do not contain
  * relevant information. The JavaCC generated code does not use
  * these constructors.
  */
 
  public ParseException() {
  super();
  }
 
  /** Constructor with message. */
  public ParseException(String message) {
  super(message);
  }
 
 
  /**
  * This is the last token that has been consumed successfully. If
  * this object has been created due to a parse error, the token
  * followng this token will (therefore) be the first error token.
  */
  public Token currentToken;
 
  /**",DO,
942,"Map<String, Object> data = new HashMap<>();
  data.put(""test-key"", ""test-value"");
  AuditEvent event = new AuditEvent(""test-user"", ""test-type"", data);
  customAuditEventRepository.add(event);
  List<PersistentAuditEvent> persistentAuditEvents = persistenceAuditEventRepository.findAll();
  assertThat(persistentAuditEvents).hasSize(1);
  PersistentAuditEvent persistentAuditEvent = persistentAuditEvents.get(0);
  assertThat(persistentAuditEvent.getPrincipal()).isEqualTo(event.getPrincipal());
  assertThat(persistentAuditEvent.getAuditEventType()).isEqualTo(event.getType());
  assertThat(persistentAuditEvent.getData()).containsKey(""test-key",C,
943,"the terms and conditions of
  * this License, each Contributor hereby grants to You a perpetual,
  * worldwide, non-exclusive, no-charge, royalty-free, irrevocable
  * (except as stated in this section) patent license to make, have made,
  * use, offer to sell, sell, import, and otherwise transfer the Work,
  * where such license applies only to those patent claims licensable
  * by such Contributor that are necessarily infringed by their
  * Contribution(s) alone or by combination of their Contribution(s)
  * with the Work to which such Contribution(s)",L,
944,"@Override
  public void setEntityValidator(EntityValidatorHelper<Object> _validateFactory) {
  this.entityValidator = _validateFactory;
  }
 
  @Override
  public void setEntityAudit(int customerId, String userId, RECORD_TYPE recordType) {
  System.out.println(""Setting logged in user info for "" + recordType);
  if (entityAudit == null) {
  entityAudit = new EntityAudit();
  }
  if (recordType == RECORD_TYPE.ADD) {
  this.entityAudit.setCreatedBy(userId);
  } else {
  this.entityAudit.setUpdatedBy(userId);
  }
  setSystemInformation(recordType);
  }
 
  @Override",C,
945,".getRow() + 1;
  if (nextRow <= 7) {
  if (board.getPiece( onePossibleMove( nextRow, currentCol ) ) == null) {
  returnList.add( onePossibleMove( nextRow, currentCol ) );
  }
  }
  if (this.getRow() == 1) {
  int nextNextRow = this.getRow() + 2;
  if (board.getPiece( onePossibleMove( nextRow, currentCol ) ) == null && board.getPiece( onePossibleMove( nextNextRow, currentCol ) ) == null) {
  returnList.add( onePossibleMove( nextNextRow, currentCol ) );
  }",C,
946,"error(this);
  return false;
  } else if (t.isComment()) {
  tb.insert(t.asComment());
  } else if (isWhitespace(t)) {
  return true; // ignore whitespace
  } else if (t.isStartTag() && t.asStartTag().name().equals(""html"")) {
  tb.insert(t.asStartTag());
  tb.transition(BeforeHead);
  } else if (t.isEndTag() && (StringUtil.in(t.asEndTag().name(), ""head"", ""body"", ""html"", ""br""))) {
  return anythingElse(t, tb);
  } else if (t.isEndTag()) {",C,
947,"},
  ScriptDataDoubleEscapedDashDash {
  void read(Tokeniser t, CharacterReader r) {
  char c = r.consume();
  switch (c) {
  case '-':
  t.emit(c);
  break;
  case '<':
  t.emit(c);
  t.transition(ScriptDataDoubleEscapedLessthanSign);
  break;
  case '>':
  t.emit(c);
  t.transition(ScriptData);
  break;
  case nullChar:
  t.error(this);
  t.emit(replacementChar);
  t.transition(ScriptDataDoubleEscaped);
  break;
  case eof:
  t.eofError(this);",C,
948,"extended_fab_state_list_animator = 0x7f02000a;
  public static final int mtrl_fab_hide_motion_spec = 0x7f02000b;
  public static final int mtrl_fab_show_motion_spec = 0x7f02000c;
  public static final int mtrl_fab_transformation_sheet_collapse_spec = 0x7f02000d;
  public static final int mtrl_fab_transformation_sheet_expand_spec = 0x7f02000e;
  }
  public static final class attr {
  private",DI,
949,"received when a permissions request has been completed.
  */
  @Override
  public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions,
  @NonNull int[] grantResults) {
  if (requestCode == REQUEST_READ_CONTACTS) {
  if (grantResults.length == 1 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
  populateAutoComplete();
  }
  }
  }
 
 
  /**
  * Attempts to sign in or register the account specified by the login form.
  * If there are form errors (invalid email, missing fields, etc.), the
  * errors are presented and no actual login attempt is made.
  */
  private void attemptLogin() {",C,
950,"final int actionBarTabTextStyle=0x7f010009;
  /** Reference to a theme that should be used to inflate widgets
  and layouts destined for the action bar. Most of the time
  this will be a reference to the current theme, but when
  the action bar has a significantly different contrast
  profile than the rest of the activity the difference
  can become important. If this is set to @null the current
  theme will be used.
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i",DO,
951,"XMLStreamException {
  java.lang.String namespaceURI = qname.getNamespaceURI();
  if (namespaceURI!= null) {
  java.lang.String prefix = xmlWriter.getPrefix(namespaceURI);
  if (prefix == null) {
  prefix = generatePrefix(namespaceURI);
  xmlWriter.writeNamespace(prefix, namespaceURI);
  xmlWriter.setPrefix(prefix,namespaceURI);
  }
 
  if (prefix.trim().length() > 0){
  xmlWriter.writeCharacters(prefix + "":"" + org.apache.axis2.databinding.utils.ConverterUtil.convertToString(qname));
  } else {
  // i.e this is the default namespace
  xmlWriter",C,
952,"fp(final DfpField field, double x) {
 
  // initialize as if 0
  mant = new int[field.getRadixDigits()];
  sign = 1;
  exp = 0;
  nans = FINITE;
  this.field = field;
 
  long bits = Double.doubleToLongBits(x);
  long mantissa = bits & 0x000fffffffffffffL;
  int exponent = (int) ((bits & 0x7ff0000000000000L) >> 52) - 1023;
 
  if (exponent == -1023) {
  // Zero or sub-",C,
953,"9;
  public static final int buttonBarButtonStyle = 0x7f02003a;
  public static final int buttonBarNegativeButtonStyle = 0x7f02003b;
  public static final int buttonBarNeutralButtonStyle = 0x7f02003c;
  public static final int buttonBarPositiveButtonStyle = 0x7f02003d;
  public static final int buttonBarStyle = 0x7f02003e;
  public static final int buttonGravity = 0x7f02003f;
  public static final int buttonIconDimen = 0x7f02004",DI,
954,"application because of this use-case.</li>
  * <li> Not having an outer join causes n+1 requests to the database. This is not a real issue as
  * we have by default a second-level cache. This means on the first HTTP call we do the n+1 requests,
  * but then all authorities come from the cache, so in fact it's much better than doing an outer join
  * (which will get lots of data from the database, for each HTTP call).</li>
  * <li> As this manages users, for security reasons, we'd rather have a DTO layer.</li>
  * </ul>
  * <p>
  * Another option would be to have",DO,
955,"* independent module is a module which is not derived from or
  * based on this software. If you modify this software, you may
  * extend this exception to your version of the software, but
  * you are not obligated to do so. If you do not wish to do so,
  * delete this exception statement from your version.
  *
  * Fabric3 is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty
  * of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
  * See the GNU General Public License for more details.
  *
  * You should have received a copy of the
  * GNU General Public License along with Fabric3.
  * If not,",L,
956,"along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA
 */
 
 /*
 * GSAN - Sistema Integrado de Gestão de Serviços de Saneamento
 * Copyright (C) <2007> 
 * Adriano Britto Siqueira
 * Alexandre Santos Cabral
 * Ana Carolina Alves Breda
 * Ana Maria Andrade Cavalcante
 * Aryed Lins de Araújo",L,
957,"3;
  public static final int notification_right_side_padding_top = 0x7f050064;
  public static final int notification_small_icon_background_padding = 0x7f050065;
  public static final int notification_small_icon_size_as_large = 0x7f050066;
  public static final int notification_subtext_size = 0x7f050067;
  public static final int notification_top_pad = 0x7f050068;
  public static final int notification_top_pad_large_text = 0x",DI,
958,"constraintHorizontal_bias = 30;
  public static final int ConstraintLayout_Layout_layout_constraintHorizontal_chainStyle = 31;
  public static final int ConstraintLayout_Layout_layout_constraintHorizontal_weight = 32;
  public static final int ConstraintLayout_Layout_layout_constraintLeft_creator = 33;
  public static final int ConstraintLayout_Layout_layout_constraintLeft_toLeftOf = 34;
  public static final int ConstraintLayout_Layout_layout_constraintLeft_toRightOf = 35;
  public static final int ConstraintLayout_Layout_layout_constraintRight_creator = 36;
  public static final int ConstraintLayout_Layout_",DI,
959,"afael Palermo de Araújo
 * Raphael Veras Rossiter
 * Roberto Sobreira Barbalho
 * Rodrigo Avellar Silveira
 * Rosana Carvalho Barbosa
 * Sávio Luiz de Andrade Cavalcante
 * Tai Mu Shih
 * Thiago Augusto Souza do Nascimento
 * Tiago Moreno Rodrigues
 * Vivianne Barbosa Sousa
 *
 * Este programa é software livre; você pode redistribuí-lo e/ou
 * modificá-lo sob os term",DO,
960,"public Criteria andStatusIn(List<Integer> values) {
  addCriterion(""status in"", values, ""status"");
  return (Criteria) this;
  }
 
  public Criteria andStatusNotIn(List<Integer> values) {
  addCriterion(""status not in"", values, ""status"");
  return (Criteria) this;
  }
 
  public Criteria andStatusBetween(Integer value1, Integer value2) {
  addCriterion(""status between"", value1, value2, ""status"");
  return (Criteria) this;
  }
 
  public Criteria andStatusNotBetween(Integer value1, Integer value2) {
  addCriterion(""status not between"", value1, value2, ""status"");
  return (Criteria) this;
  }",C,
961,"tok.next;
  }
  retval += ""\"" at line "" + currentToken.next.beginLine + "", column "" + currentToken.next.beginColumn;
  retval += ""."" + eol;
  if (expectedTokenSequences.length == 1) {
  retval += ""Was expecting:"" + eol + "" "";
  } else {
  retval += ""Was expecting one of:"" + eol + "" "";
  }
  retval += expected.toString();
  return retval;
  }
 
  /**
  * The end of line string for this machine.
  */
  protected String eol = System.getProperty(""line.separator"", ""\n"");
 
  /**
  * Used to convert raw characters to their escaped version",C,
962,". See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA
 */
 
 /*
 * GSAN - Sistema Integrado de Gestão de Serviços de Saneamento
 * Copyright (C) <2007> 
 * Adriano Britto Siqueira
 * Alexandre Santos Cabral
 * Ana Carol",L,
963,";
  }
 
  protected Criteria createCriteriaInternal() {
  Criteria criteria = new Criteria();
  return criteria;
  }
 
  public void clear() {
  oredCriteria.clear();
  orderByClause = null;
  distinct = false;
  }
 
  protected abstract static class GeneratedCriteria {
  protected List<Criterion> criteria;
 
  protected GeneratedCriteria() {
  super();
  criteria = new ArrayList<Criterion>();
  }
 
  public boolean isValid() {
  return criteria.size() > 0;
  }
 
  public List<Criterion> getAllCriteria() {
  return criteria;
  }
 
  public List<Criterion> getCriteria() {
  return criteria;
  }
 
  protected void addCriterion(String condition) {
  if (condition == null",C,
964,"7f010050;
  /** The name of an optional View class to instantiate and use as an
  action view. See {@link android.view.MenuItem#setActionView(android.view.View)}
  for more info. 
  <p>Must be a string value, using '\\;' to escape characters such as '\\n' or '\\uxxxx' for a unicode character.
 <p>This may also be a reference to a resource (in the form
 ""<code>@[<i>package</i>:]<i>type</i>:<i>name</i></code>"") or
 theme attribute (in the form
 ""<code>?[<i>package</i>:][<i>type</i>:]<i",DO,
965,";
  case eof:
  t.emit(new Token.EOF());
  break;
  default:
  String data = r.consumeToAny('<', nullChar);
  t.emit(data);
  break;
  }
  }
  },
  ScriptData {
  void read(Tokeniser t, CharacterReader r) {
  switch (r.current()) {
  case '<':
  t.advanceTransition(ScriptDataLessthanSign);
  break;
  case nullChar:
  t.error(this);
  r.advance();
  t.emit(replacementChar);
  break;
  case eof:
  t.emit(new Token.EOF());
  break;
  default:
  String data = r.",C,
966,"ia Coelho de Araújo
  * Nelson Mendonça de Carvalho
  * Newton Morais e Silva
  * Pedro Alexandre Santos da Silva Filho
  * Rafael Corrêa Lima e Silva
  * Rafael Francisco Pinto
  * Rafael Koury Monteiro
  * Rafael Palermo de Araújo
  * Raphael Veras Rossiter
  * Roberto Sobreira Barbalho
  * Rodrigo Avellar Silveira
  * Rosana Carvalho Barbosa
  * Sávio Luiz de Andrade Cavalcante
  * T",DO,
967,#ERROR!,C,
968,"password"");
  return (Criteria) this;
  }
 
  public Criteria andPasswordGreaterThanOrEqualTo(String value) {
  addCriterion(""password >="", value, ""password"");
  return (Criteria) this;
  }
 
  public Criteria andPasswordLessThan(String value) {
  addCriterion(""password <"", value, ""password"");
  return (Criteria) this;
  }
 
  public Criteria andPasswordLessThanOrEqualTo(String value) {
  addCriterion(""password <="", value, ""password"");
  return (Criteria) this;
  }
 
  public Criteria andPasswordLike(String value) {
  addCriterion(""password like"", value, ""password"");
  return (Criteria) this;
  }
 
  public Criteria andPasswordNotLike(String value) {",C,
969,"try
  {
  data = Integer.parseInt(s_data.trim());
  }
  catch(NumberFormatException nfe)
  {
  IO.logger.log(Level.WARNING, ""Number format exception parsing data from string"", nfe);
  }
  }
  }
  catch( IOException ioe )
  {
  IO.logger.log(Level.WARNING, ""Error with stream reading"", ioe);
  }
  finally
  {
  /* clean up stream reading objects */
  try {
  if( buffread!= null )
  {
  buffread.close();
  }
  }
  catch( IOException ioe )
  {
  IO.logger.log(Level.WARNING, ""Error closing BufferedReader"", ioe",C,
970,"c = r.consume();
  switch (c) {
  case '-':
  t.emit(c);
  break;
  case '<':
  t.transition(ScriptDataEscapedLessthanSign);
  break;
  case '>':
  t.emit(c);
  t.transition(ScriptData);
  break;
  case nullChar:
  t.error(this);
  t.emit(replacementChar);
  t.transition(ScriptDataEscaped);
  break;
  default:
  t.emit(c);
  t.transition(ScriptDataEscaped);
  }
  }
  },
  ScriptDataEscapedLessthanSign {
  void read(Tokeniser t, CharacterReader r)",C,
971,", CharacterReader r) {
  handleDataEndTag(t, r, ScriptData);
  }
  },
  ScriptDataEscapeStart {
  void read(Tokeniser t, CharacterReader r) {
  if (r.matches('-')) {
  t.emit('-');
  t.advanceTransition(ScriptDataEscapeStartDash);
  } else {
  t.transition(ScriptData);
  }
  }
  },
  ScriptDataEscapeStartDash {
  void read(Tokeniser t, CharacterReader r) {
  if (r.matches('-')) {
  t.emit('-');
  t.advanceTransition(ScriptDataEscapedDashDash);
  } else {
  t.transition(ScriptData);
  }",C,
972,"7f020035;
  public static final int barLength = 0x7f020036;
  public static final int borderlessButtonStyle = 0x7f020039;
  public static final int buttonBarButtonStyle = 0x7f02003a;
  public static final int buttonBarNegativeButtonStyle = 0x7f02003b;
  public static final int buttonBarNeutralButtonStyle = 0x7f02003c;
  public static final int buttonBarPositiveButtonStyle = 0x7f02003d;
  public static final int buttonBarStyle = 0x7",DI,
973,"0;
  public static final int actionModeCloseButtonStyle = 0x7f030011;
  public static final int actionModeCloseDrawable = 0x7f030012;
  public static final int actionModeCopyDrawable = 0x7f030013;
  public static final int actionModeCutDrawable = 0x7f030014;
  public static final int actionModeFindDrawable = 0x7f030015;
  public static final int actionModePasteDrawable = 0x7f030016;
  public static final int actionModePopupWindowStyle = 0x7f",DI,
974,"int actionModeCloseButtonStyle=0x7f030011;
  /**
  * Drawable to use for the close action mode button
  * <p>May be a reference to another resource, in the form
  * ""<code>@[+][<i>package</i>:]<i>type</i>/<i>name</i></code>"" or a theme
  * attribute in the form
  * ""<code>?[<i>package</i>:]<i>type</i>/<i>name</i></code>"".
  */
  public static final int actionModeCloseDrawable=0x7f030012;
  /**
  * Drawable to use for the Copy action button in Contextual Action Bar
  * <p>",DO,
975,"fields enclosed by brackets [] replaced by
  * your own identifying information:
  * ""Portions Copyrighted [year] [name of copyright owner]""
  *
  * Contributor(s):
  *
  * The Original Software is NetBeans. The Initial Developer of the Original
  * Software is Sun Microsystems, Inc. Portions Copyright 1997-2007 Sun
  * Microsystems, Inc. All Rights Reserved.
  *
  * If you wish your version of this file to be governed by only the CDDL
  * or only the GPL Version 2, indicate your decision by adding
  * ""[Contributor] elects to include this software in this distribution
  * under the [CDDL or GPL Version",C,
976,".getData().equals(nullString)) {
  // todo confirm that check
  tb.error(this);
  return false;
  } else if (isWhitespace(c)) {
  tb.reconstructFormattingElements();
  tb.insert(c);
  } else {
  tb.reconstructFormattingElements();
  tb.insert(c);
  tb.framesetOk(false);
  }
  break;
  }
  case Comment: {
  tb.insert(t.asComment());
  break;
  }
  case Doctype: {
  tb.error(this);
  return false;
  }
  case StartTag:
  Token.StartTag startTag = t.asStartTag();
  String name = start",C,
977,"return (Criteria) this;
  }
 
  public Criteria andIdNotEqualTo(Long value) {
  addCriterion(""id <>"", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdGreaterThan(Long value) {
  addCriterion(""id >"", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdGreaterThanOrEqualTo(Long value) {
  addCriterion(""id >="", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdLessThan(Long value) {
  addCriterion(""id <"", value, ""id"");
  return (Criteria) this;
  }
 
  public Criteria andIdLessThanOrEqualTo(Long value) {
  addCriterion(""id",C,
978,"();
  tb.insert(c);
  tb.framesetOk(false);
  }
  break;
  }
  case Comment: {
  tb.insert(t.asComment());
  break;
  }
  case Doctype: {
  tb.error(this);
  return false;
  }
  case StartTag:
  Token.StartTag startTag = t.asStartTag();
  String name = startTag.name();
  if (name.equals(""html"")) {
  tb.error(this);
  // merge attributes onto real html
  Element html = tb.getStack().getFirst();
  for (Attribute attribute : startTag.getAttributes()) {
  if (!html.hasAttr(attribute.getKey()))",C,
979,"</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionModeCutDrawable=0x7f01003f;
  /** Drawable to use for the Find action button in WebView selection action modes 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<",DO,
980,"05005c;
  public static final int notification_big_circle_margin = 0x7f05005d;
  public static final int notification_content_margin_start = 0x7f05005e;
  public static final int notification_large_icon_height = 0x7f05005f;
  public static final int notification_large_icon_width = 0x7f050060;
  public static final int notification_main_column_padding_top = 0x7f050061;
  public static final int notification_media_narrow_margin = 0x",DI,
981,"000000L)!= 0) {
  xdfp = xdfp.negate();
  }
 
  System.arraycopy(xdfp.mant, 0, mant, 0, mant.length);
  sign = xdfp.sign;
  exp = xdfp.exp;
  nans = xdfp.nans;
 
  }
 
  /** Copy constructor.
  * @param d instance to copy
  */
  public Dfp(final Dfp d) {
  mant = d.mant.clone();
  sign = d.sign;
  exp = d.exp;
  nans = d.nans;
  field",C,
982,RIANGLES}</td><td>{@link GL11#GL_QUAD_STRIP QUAD_STRIP}</td><td>{@link GL11#GL_QUADS QUADS}</td><td>{@link GL32#GL_LINES_ADJACENCY LINES_ADJACENCY}</td><td>{@link GL32#GL_LINE_STRIP_ADJACENCY LINE_STRIP_ADJACENCY}</td><td>{@link GL32#GL_TRIANGLES_ADJACENCY TRIANGLES_ADJACENCY}</td><td>{@link GL32#GL_TRIANGLE_STRIP_ADJACENCY TRIANGLE_STRIP_ADJACENCY}</td></tr><tr><,DI,
983,"weight = 32;
  public static final int ConstraintLayout_Layout_layout_constraintLeft_creator = 33;
  public static final int ConstraintLayout_Layout_layout_constraintLeft_toLeftOf = 34;
  public static final int ConstraintLayout_Layout_layout_constraintLeft_toRightOf = 35;
  public static final int ConstraintLayout_Layout_layout_constraintRight_creator = 36;
  public static final int ConstraintLayout_Layout_layout_constraintRight_toLeftOf = 37;
  public static final int ConstraintLayout_Layout_layout_constraintRight_toRightOf = 38;
  public static final int ConstraintLayout_Layout_",DI,
984,":
  String data = r.consumeToAny('-', '<', nullChar);
  t.emit(data);
  }
  }
  },
  ScriptDataDoubleEscapedDash {
  void read(Tokeniser t, CharacterReader r) {
  char c = r.consume();
  switch (c) {
  case '-':
  t.emit(c);
  t.transition(ScriptDataDoubleEscapedDashDash);
  break;
  case '<':
  t.emit(c);
  t.transition(ScriptDataDoubleEscapedLessthanSign);
  break;
  case nullChar:
  t.error(this);
  t.emit(replacementChar);
  t.transition(ScriptDataDoubleEscaped",C,
985,,U,
986,"io, Inc. For written permission,
  * please contact info@exolab.org.
  *
  * 4. Products derived from this Software may not be called ""Exolab""
  * nor may ""Exolab"" appear in their names without prior written
  * permission of Intalio, Inc. Exolab is a registered
  * trademark of Intalio, Inc.
  *
  * 5. Due credit should be given to the Exolab Project
  * (http://www.exolab.org/).
  *
  * THIS SOFTWARE IS PROVIDED BY INTALIO, INC. AND CONTRIBUTORS
  * ``AS IS'' AND ANY EXPRESSED OR",L,
987,";
  }
  return super.onOptionsItemSelected(item);
  }
  }
 
  /**
  * This fragment shows data and sync preferences only. It is used when the
  * activity is showing a two-pane settings UI.
  */
  @TargetApi(Build.VERSION_CODES.HONEYCOMB)
  public static class DataSyncPreferenceFragment extends PreferenceFragment {
  @Override
  public void onCreate(Bundle savedInstanceState) {
  super.onCreate(savedInstanceState);
  addPreferencesFromResource(R.xml.pref_data_sync);
  setHasOptionsMenu(true);
 
  // Bind the summaries of EditText/List/Dialog/Ringtone preferences
  // to their values. When their values change, their summaries",C,
988,"the address is associated with, if any.
  * </p>
  * </li>
  * <li>
  * <p>
  * <code>network-interface-owner-id</code> - The AWS account ID of the
  * owner.
  * </p>
  * </li>
  * <li>
  * <p>
  * <code>private-ip-address</code> - [EC2-VPC] The private IP address
  * associated with the Elastic IP address.
  * </p>
  * </li>
  * <li>
  * <p>
  * <code>public-ip</code> - The Elastic IP address.
  * </p>",DO,
989,"Exception {
  // Initialize the database
  userRepository.saveAndFlush(user);
  int databaseSizeBeforeCreate = userRepository.findAll().size();
 
  ManagedUserVM managedUserVM = new ManagedUserVM();
  managedUserVM.setLogin(""anotherlogin"");
  managedUserVM.setPassword(DEFAULT_PASSWORD);
  managedUserVM.setFirstName(DEFAULT_FIRSTNAME);
  managedUserVM.setLastName(DEFAULT_LASTNAME);
  managedUserVM.setEmail(DEFAULT_EMAIL);// this email should already be used
  managedUserVM.setActivated(true);
  managedUserVM.setImageUrl(DEFAULT_IMAGEURL);
  managedUserVM.setLangKey(DEFAULT_LANGKEY);
  managed",C,
990,"this, RawtextLessthanSign);
  }
  },
  ScriptData {
  void read(Tokeniser t, CharacterReader r) {
  readData(t, r, this, ScriptDataLessthanSign);
  }
  },
  PLAINTEXT {
  void read(Tokeniser t, CharacterReader r) {
  switch (r.current()) {
  case nullChar:
  t.error(this);
  r.advance();
  t.emit(replacementChar);
  break;
  case eof:
  t.emit(new Token.EOF());
  break;
  default:
  String data = r.consumeTo(nullChar);
  t.emit(data);
  break;
  }",C,
991,"0x7f020045;
  public static final int checkboxStyle = 0x7f020047;
  public static final int checkedTextViewStyle = 0x7f020048;
  public static final int closeIcon = 0x7f020049;
  public static final int closeItemLayout = 0x7f02004a;
  public static final int collapseContentDescription = 0x7f02004b;
  public static final int collapseIcon = 0x7f02004c;
  public static final int color = 0x7f020",DI,
992,"*
  * (c) You must retain, in the Source form of any Derivative Works
  * that You distribute, all copyright, patent, trademark, and
  * attribution notices from the Source form of the Work,
  * excluding those notices that do not pertain to any part of
  * the Derivative Works; and
  *
  * (d) If the Work includes a ""NOTICE"" text file as part of its
  * distribution, then any Derivative Works that You distribute must
  * include a readable copy of the attribution notices contained
  * within such NOTICE file, excluding those notices that do not
  * pertain to any part of",L,
993,"*/
  public static final int actionModeCloseDrawable=0x7f01003e;
  /** Drawable to use for the Copy action button in Contextual Action Bar 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionModeCopyDrawable=0x7f010040;
  /** Drawable to use for the Cut action button in Contextual Action Bar 
  <",DO,
994,">:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".
  */
  public static final int actionModeStyle=0x7f01003a;
  /** Drawable to use for the Web Search action button in WebView selection action modes 
  <p>Must be a reference to another resource, in the form ""<code>@[+][<i>package</i>:]<i>type</i>:<i>name</i></code>""
 or to a theme attribute in the form ""<code>?[<i>package</i>:][<i>type</i>:]<i>name</i></code>"".",DO,
995,"sure 0 has the right sign
  if ((bits & 0x8000000000000000L)!= 0) {
  sign = -1;
  }
  return;
  }
 
  exponent++;
 
  // Normalize the subnormal number
  while ( (mantissa & 0x0010000000000000L) == 0) {
  exponent--;
  mantissa <<= 1;
  }
  mantissa &= 0x000fffffffffffffL;
  }
 
  if (exponent == 1024) {
  // infinity or NAN
  if (x!= x)",C,
996,"_general);
  setHasOptionsMenu(true);
 
  // Bind the summaries of EditText/List/Dialog/Ringtone preferences
  // to their values. When their values change, their summaries are
  // updated to reflect the new value, per the Android Design
  // guidelines.
  bindPreferenceSummaryToValue(findPreference(""example_text""));
  bindPreferenceSummaryToValue(findPreference(""example_list""));
  }
 
  @Override
  public boolean onOptionsItemSelected(MenuItem item) {
  int id = item.getItemId();
  if (id == android.R.id.home) {
  startActivity(new Intent(getActivity(), SettingsActivity.class));
  return true;
  }
  return super.on",C,
997,"Intalio, Inc. Exolab is a registered
  * trademark of Intalio, Inc.
  *
  * 5. Due credit should be given to the Exolab Project
  * (http://www.exolab.org/).
  *
  * THIS SOFTWARE IS PROVIDED BY INTALIO, INC. AND CONTRIBUTORS
  * ``AS IS'' AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT
  * NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
  * FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL
  * INTALIO, INC. OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
  * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES",L,
998,"return getDelegate().getSupportActionBar();
  }
 
  public void setSupportActionBar(@Nullable Toolbar toolbar) {
  getDelegate().setSupportActionBar(toolbar);
  }
 
  @Override
  public MenuInflater getMenuInflater() {
  return getDelegate().getMenuInflater();
  }
 
  @Override
  public void setContentView(@LayoutRes int layoutResID) {
  getDelegate().setContentView(layoutResID);
  }
 
  @Override
  public void setContentView(View view) {
  getDelegate().setContentView(view);
  }
 
  @Override
  public void setContentView(View view, ViewGroup.LayoutParams params) {
  getDelegate().setContentView(view, params);
  }
 
  @Override
  public void addContentView(View",C,
999,";
  }
 
  public Criteria andNameLike(String value) {
  addCriterion(""name like"", value, ""name"");
  return (Criteria) this;
  }
 
  public Criteria andNameNotLike(String value) {
  addCriterion(""name not like"", value, ""name"");
  return (Criteria) this;
  }
 
  public Criteria andNameIn(List<String> values) {
  addCriterion(""name in"", values, ""name"");
  return (Criteria) this;
  }
 
  public Criteria andNameNotIn(List<String> values) {
  addCriterion(""name not in"", values, ""name"");
  return (Criteria) this;
  }
 
  public Criteria andNameBetween(String value1, String value2",C,